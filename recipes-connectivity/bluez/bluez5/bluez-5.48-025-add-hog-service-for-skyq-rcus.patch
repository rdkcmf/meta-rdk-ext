###################################################################################################
Date: Mon, 17 Dec 2018 15:46:34 +0000
From 917b84fcf27a6e2165fa38392f926f1e9220ad7c Mon Sep 17 00:00:00 2001
From: Ben Gray <ben.gray@sky.uk>
Subject: [PATCH] NGDEV-128716: BLE RCU losses pairing

It's been found that sometimes the "Services" part of the info file
for a paired device is removed.  This seems to happen if there was
an issue resolving the services. The side affect of this is that on
the next boot bluez won't perform auto-connect as it thinks the
remote device doesn't have any services that require auto-connect.

This patch forces the HoG profile to be present on SkyQ RCU devices if
it was not included in the 'Services' section of the info file.

Source: SKY
License: GPLv2+ & LGPLv2.1+
Upstream-Status: Pending
Signed-off-by: Tijo Thomas John <tijo.thomas@sky.uk>
###################################################################################################

---
 src/device.c | 63 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 63 insertions(+)

diff --git a/src/device.c b/src/device.c
index a209feb..1ff4d28 100644
--- a/src/device.c
+++ b/src/device.c
@@ -2893,6 +2893,60 @@ static void convert_info(struct btd_device *device, GKeyFile *key_file)
 	store_device_info(device);
 }
 
+/* [Sky] simple utility function to check if the device is one of the SkyQ
+ * rcu types.
+ *
+ * FIXME: I really don't like hard coding BDADDR's here, but due to an
+ * abundance of caution I only wanted to apply the hacks to SkyQ RCUs and
+ * not to generic BT devices that may be paired for different reasons.
+ *
+ */
+static bool is_sky_rcu(const struct btd_device *device)
+{
+	int i;
+	char addr[18];
+	const uint8_t oui[3] = {
+		device->bdaddr.b[5],
+		device->bdaddr.b[4],
+		device->bdaddr.b[3]
+	};
+
+	static const int sky_rcus_cnt = 6;
+	static const uint8_t sky_rcus[6][3] = {
+		{ 0x1C, 0xA2, 0xB1 },  // Ruwido EC050 & EC055
+		{ 0xD4, 0xB8, 0xFF },  // Omni EC101 & EC201
+		{ 0x48, 0xD0, 0xCF },  // UEI EC080
+		{ 0x70, 0x91, 0xF3 },  // UEI EC102
+		{ 0x18, 0x46, 0x44 },  // Omni EC201
+		{ 0xE8, 0x0F, 0xC8 },  // UEI EC202
+		{ 0x20, 0x44, 0x41 },  // SkyQ LC103
+	};
+	static const char * sky_rcus_by_name[] = {
+		"Platco PR1",
+	};
+	int sky_rcus_by_name_cnt = sizeof(sky_rcus_by_name) / sizeof(const char *);
+
+	ba2str(&device->bdaddr, addr);
+	
+	DBG("Checking if %s is a SkyQ RCU", addr);
+
+	if (!device->le)
+		return false;
+
+	for (i = 0; i < sky_rcus_cnt; i++) {
+		if (memcmp(oui, &(sky_rcus[i]), 3) == 0)
+			return true;
+	}
+	for (i = 0; i < sky_rcus_by_name_cnt; i++) {
+		if (g_str_equal(device->name, sky_rcus_by_name[i])) {
+			DBG("Device name <%s> is a SkyQ RCU", device->name);
+			return true;
+		}
+	}
+
+	return false;
+}
+
 static void load_info(struct btd_device *device, const char *local,
 			const char *peer, GKeyFile *key_file)
 {
@@ -2993,6 +3047,28 @@ next:
 
 		/* Discovered services restored from storage */
 		device->bredr_state.svc_resolved = true;
+
+	} else if (is_sky_rcu(device)) {
+		/* [Sky] this is workaround for NGDEV-128254, where sometimes the list
+		 * of services for a remote device is not stored in the info file. This
+		 * means that btd_profile_foreach(...) does nothing which in turn means
+		 * that device_set_auto_connect(...) is not called as it doesn't think
+		 * the remote device is a HOG (HID input) device.
+		 *
+		 * So the above does a check to see if the device is one of the
+		 * supported Sky RCU types and manually adds the HOG profile.
+		 */
+		char addr[18];
+		ba2str(&device->bdaddr, addr);
+
+		error("Sky RCU device %s doesn't have any services set,"
+		      " manually adding HOG service", addr);
+
+		if (uuids)
+			g_strfreev(uuids);
+
+		uuids = g_strsplit("00001812-0000-1000-8000-00805f9b34fb", ";", -1);
+		load_services(device, uuids);
 	}
 
 	/* Load device id */
-- 
2.18.0

