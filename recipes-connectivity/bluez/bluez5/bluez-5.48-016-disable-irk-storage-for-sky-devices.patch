###################################################################################################
Date: Sat, 15 Dec 2018 14:38:19 +0000
From c57018e1678b0c695bfcc0639bdd0c965a64f648 Mon Sep 17 00:00:00 2001
From: Ben Gray <ben.gray@sky.uk>
Subject: [PATCH] This patch disables the storage of IRK values for SkyQ RCU devices.  
The advantage of this is that without IRKs the white list will be used for connections which is better.

Also none of the SkyQ RCU devices use privacy / random addresses.

[SkyRef: NGDEV-133507]
Source: SKY
Upstream-Status: Pending
Signed-off-by: Tijo Thomas John <tijo.thomas@sky.uk>
###################################################################################################

---
 src/adapter.c | 42 +++++++++++++++++++++++++++++++++++++++-
 1 file changed, 41 insertions(+), 1 deletion(-)
 mode change 100644 => 100755 src/adapter.c

diff --git a/src/adapter.c b/src/adapter.c
old mode 100644
new mode 100755
index 91fb6ec..ef2fe8f
--- a/src/adapter.c
+++ b/src/adapter.c
@@ -7343,6 +7343,47 @@ static void new_csrk_callback(uint16_t index, uint16_t length,
 	btd_device_set_temporary(device, false);
 }
 
+static bool sky_backlist_device_irk(const bdaddr_t *peer, uint8_t bdaddr_type)
+{
+	unsigned i;
+	char device_addr[18];
+	const uint32_t oui = ((uint32_t)(peer->b[5]) << 16) |
+	                     ((uint32_t)(peer->b[4]) << 8) |
+	                     ((uint32_t)(peer->b[3]) << 0);
+
+	/* [Sky] for SkyQ RCUs we don't want to store the IRK value because if
+	 * set in the kernel then it doesn't use the whitelist for fast connections,
+	 * instead does passive scanning.
+	 * The whitelist is much more efficent and all of the devices listed
+	 * use a fixed public address so there is no need to use the IRK.
+	 */
+	static const uint32_t blacklisted_device_oui[] = {
+		0x1ca2b1,   /* SkyQ EC05x  (ruwido) */
+		0xd4b8ff,   /* SkyQ EC101  (omni)   */
+		0x7091f3,   /* SkyQ EC102  (uei)    */
+		0x184644,   /* SkyQ EC201  (omni)   */
+		0xE80FC8,   /* SkyQ EC202  (uei)    */
+	};
+	static const unsigned blacklisted_device_oui_n = 
+		sizeof(blacklisted_device_oui) / sizeof(blacklisted_device_oui[0]);
+
+
+	/* backlist only applies to fixed public addresses */
+	if (bdaddr_type == BDADDR_LE_PUBLIC) {
+
+		/* check the blacklist */
+		for (i = 0; i < blacklisted_device_oui_n; i++) {
+			if (oui == blacklisted_device_oui[i]) {
+				ba2str(peer, device_addr);
+				DBG("[sky] blacklisted irk for device %s", device_addr);
+				return true;
+			}
+		}
+	}
+
+	return false;
+}
+
 static void store_irk(struct btd_adapter *adapter, const bdaddr_t *peer,
 				uint8_t bdaddr_type, const unsigned char *key)
 {
@@ -7424,7 +7463,8 @@ static void new_irk_callback(uint16_t index, uint16_t length,
 	if (!persistent)
 		return;
 
-	store_irk(adapter, &addr->bdaddr, addr->type, irk->val);
+	if (!sky_backlist_device_irk(&addr->bdaddr, addr->type))
+		store_irk(adapter, &addr->bdaddr, addr->type, irk->val);
 
 	btd_device_set_temporary(device, false);
 }
-- 
2.18.0

