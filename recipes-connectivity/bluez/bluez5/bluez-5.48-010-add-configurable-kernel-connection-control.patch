###################################################################################################
Date: Fri, 7 Dec 2018 14:46:43 +0000
From efb3c2dc66f461dbe507fa9725b3d60966e7581a Mon Sep 17 00:00:00 2001
From: Ben Gray <ben.gray@sky.uk>
Subject: [PATCH] Add config option to enable / disable kernel management of connections.

Added this patch as we may want to revert the kernel connection management which would make
the bluez implementation consistent across new and old kernels.

Source: SKY
License: GPLv2+ & LGPLv2.1+
Upstream-Status: Pending
Signed-off-by: Tijo Thomas John <tijo.thomas@sky.uk>
###################################################################################################

---
 src/adapter.c | 14 +++++++++-----
 src/hcid.h    |  2 ++
 src/main.c    | 26 ++++++++++++++++++++++++++
 src/main.conf |  8 ++++++++
 4 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/src/adapter.c b/src/adapter.c
index 8eca76d..913fde1 100644
--- a/src/adapter.c
+++ b/src/adapter.c
@@ -8609,13 +8609,17 @@ static void read_commands_complete(uint8_t status, uint16_t length,
 
 	opcode = rp->opcodes;
 
-	for (i = 0; i < num_commands; i++) {
-		uint16_t op = get_le16(opcode++);
+	if (main_opts.kern_conn_control) {
+		for (i = 0; i < num_commands; i++) {
+			uint16_t op = get_le16(opcode++);
 
-		if (op == MGMT_OP_ADD_DEVICE) {
-			DBG("enabling kernel-side connection control");
-			kernel_conn_control = true;
+			if (op == MGMT_OP_ADD_DEVICE) {
+				DBG("enabling kernel-side connection control");
+				kernel_conn_control = true;
+			}
 		}
+	} else {
+		kernel_conn_control = false;
 	}
 }
 
diff --git a/src/hcid.h b/src/hcid.h
index 62e2bd6..ea8d60c 100644
--- a/src/hcid.h
+++ b/src/hcid.h
@@ -54,6 +54,8 @@ struct main_opts {
 
 	bt_mode_t	mode;
 	bt_gatt_cache_t gatt_cache;
+
+	gboolean	kern_conn_control;
 };
 
 extern struct main_opts main_opts;
diff --git a/src/main.c b/src/main.c
index 8a4f0d8..ee0a74c 100644
--- a/src/main.c
+++ b/src/main.c
@@ -108,6 +108,11 @@ static const char *gatt_options[] = {
 	NULL
 };
 
+static const char *sky_options[] = {
+	"KernelConnectionControl",
+	NULL
+};
+
 static const struct group_table {
 	const char *name;
 	const char **options;
@@ -115,6 +120,7 @@ static const struct group_table {
 	{ "General",	supported_options },
 	{ "Policy",	policy_options },
 	{ "GATT",	gatt_options },
+	{ "sky",	sky_options },
 	{ }
 };
 
@@ -290,6 +296,21 @@ static int get_mode(const char *str)
 	return BT_MODE_DUAL;
 }
 
+static void parse_sky_config(GKeyFile *config)
+{
+	GError *err = NULL;
+	gboolean boolean;
+
+
+	boolean = g_key_file_get_boolean(config, "sky",
+						"KernelConnectionControl", &err);
+	if (err)
+		g_clear_error(&err);
+	else
+		main_opts.kern_conn_control = boolean;
+
+}
+
 static void parse_config(GKeyFile *config)
 {
 	GError *err = NULL;
@@ -436,6 +457,8 @@ static void parse_config(GKeyFile *config)
 	main_opts.gatt_cache = parse_gatt_cache(str);
 
 	g_free(str);
+
+	parse_sky_config(config);
 }
 
 static void init_defaults(void)
@@ -459,6 +482,9 @@ static void init_defaults(void)
 	main_opts.did_vendor = 0x1d6b;		/* Linux Foundation */
 	main_opts.did_product = 0x0246;		/* BlueZ */
 	main_opts.did_version = (major << 8 | minor);
+
+	/* Default settings for Sky extensions */
+	main_opts.kern_conn_control = TRUE;
 }
 
 static void log_handler(const gchar *log_domain, GLogLevelFlags log_level,
diff --git a/src/main.conf b/src/main.conf
index 21986b3..878592e 100644
--- a/src/main.conf
+++ b/src/main.conf
@@ -100,3 +100,11 @@
 # This includes adapters present on start as well as adapters that are plugged
 # in later on. Defaults to 'false'.
 #AutoEnable=false
+
+[sky]
+# KernelConnectionControl defines option to enable / disable the kernel side
+# connection management via the MGMT_OP_ADD_DEVICE / MGMT_OP_REMOVE_DEVICE
+# commands. This is a Sky.uk extension where we may want to manage the connection
+# ourselves. Defaults to 'true'.
+# KernelConnectionControl = true
+
-- 
2.18.0

