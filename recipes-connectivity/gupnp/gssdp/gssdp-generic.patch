Date: Apr 17 22:18:10 2014

From: ee84688c959914092a1bf0fe595a0a8079c0beda Apr 19 11:25:28 2014

Subject: [PATCH] gssdp,gupnp,gupnp-av: Add recipes

        Added a patch in gupnp to perform gssdp_resource_browser_rescan:
	Begins discovery if @resource_browser is active and no discovery is
	performed. Otherwise does nothing.

Source: COMCAST


Upstream-Status: Pending

Signed-off-by: Ridish <ridish.ra@lnttechservices.com>

---

diff -urN -x .svn gssdp-0.10.0.orig/libgssdp/gssdp-client.c gssdp-0.10.0/libgssdp/gssdp-client.c
--- gssdp-0.10.0.orig/libgssdp/gssdp-client.c	2011-04-05 15:30:13.000000000 +0000
+++ gssdp-0.10.0/libgssdp/gssdp-client.c	2014-04-13 03:08:59.868320002 +0000
@@ -88,6 +88,7 @@
 
         GSSDPSocketSource *request_socket;
         GSSDPSocketSource *multicast_socket;
+        GSSDPSocketSource *search_socket;
 
         gboolean           active;
 };
@@ -125,6 +126,11 @@
                                GIOCondition  condition,
                                gpointer      user_data);
 static gboolean
+search_socket_source_cb       (GIOChannel   *source,
+                               GIOCondition  condition,
+                               gpointer      user_data);
+
+static gboolean
 init_network_info             (GSSDPClient  *client);
 
 static void
@@ -187,10 +193,24 @@
                         (client->priv->multicast_socket,
                          (GSourceFunc) multicast_socket_source_cb,
                          client);
+        } else {
+                goto errors;
+        }
+
+        client->priv->search_socket =
+                gssdp_socket_source_new (GSSDP_SOCKET_SOURCE_TYPE_SEARCH,
+                                         gssdp_client_get_host_ip (client),
+                                         &error);
+        if (client->priv->search_socket != NULL) {
+                gssdp_socket_source_set_callback
+                        (client->priv->search_socket,
+                         (GSourceFunc) search_socket_source_cb,
+                         client);
         }
 
  errors:
-        if (!client->priv->request_socket || !client->priv->multicast_socket) {
+        if (!client->priv->request_socket || !client->priv->multicast_socket ||
+            !client->priv->search_socket) {
                 if (client->priv->error) {
                         g_propagate_error (client->priv->error, error);
                 }
@@ -202,6 +222,9 @@
 
         gssdp_socket_source_attach (client->priv->multicast_socket,
                                     client->priv->main_context);
+
+		gssdp_socket_source_attach (client->priv->search_socket,
+                                    client->priv->main_context);
 }
 
 static void
@@ -302,6 +325,11 @@
                 client->priv->multicast_socket = NULL;
         }
 
+		if (client->priv->search_socket) {
+                g_object_unref (client->priv->search_socket);
+                client->priv->search_socket = NULL;
+        }
+
         /* Unref the context */
         if (client->priv->main_context) {
                 g_main_context_unref (client->priv->main_context);
@@ -685,10 +713,11 @@
  * Sends @message to @dest_ip.
  **/
 void
-_gssdp_client_send_message (GSSDPClient *client,
-                            const char  *dest_ip,
-                            gushort      dest_port,
-                            const char  *message)
+_gssdp_client_send_message (GSSDPClient      *client,
+                            const char       *dest_ip,
+                            gushort           dest_port,
+                            const char       *message,
+                            _GSSDPMessageType type)
 {
         gssize res;
         GError *error = NULL;
@@ -711,9 +740,16 @@
         if (dest_port == 0)
                 dest_port = SSDP_PORT;
 
+        if (type == _GSSDP_DISCOVERY_REQUEST)
+                socket = gssdp_socket_source_get_socket
+                                        (client->priv->search_socket);
+        else
+                socket = gssdp_socket_source_get_socket
+                                        (client->priv->request_socket);
+
         inet_address = g_inet_address_new_from_string (dest_ip);
         address = g_inet_socket_address_new (inet_address, dest_port);
-        socket = gssdp_socket_source_get_socket (client->priv->request_socket);
+
         res = g_socket_send_to (socket,
                                 address,
                                 message,
@@ -997,6 +1033,18 @@
         return socket_source_cb (client->priv->multicast_socket, client);
 }
 
+static gboolean
+search_socket_source_cb (GIOChannel  *source,
+                         GIOCondition condition,
+                         gpointer     user_data)
+{
+        GSSDPClient *client;
+
+        client = GSSDP_CLIENT (user_data);
+
+        return socket_source_cb (client->priv->search_socket, client);
+}
+
 #ifdef G_OS_WIN32
 static gboolean
 is_primary_adapter (PIP_ADAPTER_ADDRESSES adapter)
diff -urN -x .svn gssdp-0.10.0.orig/libgssdp/gssdp-client-private.h gssdp-0.10.0/libgssdp/gssdp-client-private.h
--- gssdp-0.10.0.orig/libgssdp/gssdp-client-private.h	2010-02-09 16:19:48.000000000 +0000
+++ gssdp-0.10.0/libgssdp/gssdp-client-private.h	2014-04-13 03:08:59.864320002 +0000
@@ -33,10 +33,11 @@
 } _GSSDPMessageType;
 
 G_GNUC_INTERNAL void
-_gssdp_client_send_message (GSSDPClient *client,
-                            const char  *dest_ip,
-                            gushort      dest_port,
-                            const char  *message);
+_gssdp_client_send_message (GSSDPClient       *client,
+                            const char        *dest_ip,
+                            gushort            dest_port,
+                            const char        *message,
+                            _GSSDPMessageType  type);
 
 G_END_DECLS
 
diff -urN -x .svn gssdp-0.10.0.orig/libgssdp/gssdp-resource-browser.c gssdp-0.10.0/libgssdp/gssdp-resource-browser.c
--- gssdp-0.10.0.orig/libgssdp/gssdp-resource-browser.c	2011-03-08 15:18:20.000000000 +0000
+++ gssdp-0.10.0/libgssdp/gssdp-resource-browser.c	2014-04-13 03:08:59.868320002 +0000
@@ -34,12 +34,14 @@
 #include <libsoup/soup.h>
 #include <string.h>
 #include <stdio.h>
+#include <stdlib.h>
 
 #include "gssdp-resource-browser.h"
 #include "gssdp-client-private.h"
 #include "gssdp-protocol.h"
 #include "gssdp-marshal.h"
 
+#define RESCAN_TIMEOUT 5 /* 5 seconds */
 #define MAX_DISCOVERY_MESSAGES 3
 #define DISCOVERY_FREQUENCY    500 /* 500 ms */
 
@@ -63,6 +65,10 @@
                         
         GSource     *timeout_src;
         guint        num_discovery;
+        guint        version;
+
+        GSource     *refresh_cache_src;
+        GHashTable  *fresh_resources;
 };
 
 enum {
@@ -110,6 +116,8 @@
 start_discovery                  (GSSDPResourceBrowser *resource_browser);
 static void
 stop_discovery                   (GSSDPResourceBrowser *resource_browser);
+static gboolean
+refresh_cache                    (gpointer data);
 
 static void
 gssdp_resource_browser_init (GSSDPResourceBrowser *resource_browser)
@@ -453,15 +461,21 @@
         if (resource_browser->priv->target_regex)
                 g_regex_unref (resource_browser->priv->target_regex);
 
-        version_pattern = "[0-9]+";
+        version_pattern = "([0-9]+)";
         /* Make sure we have enough room for version pattern */
         pattern = g_strndup (target,
                              strlen (target) + strlen (version_pattern));
 
-        version = g_strrstr (pattern, ":") + 1;
+        version = g_strrstr (pattern, ":");
         if (version != NULL &&
-            g_regex_match_simple (version_pattern, version, 0, 0)) {
-                strcpy (version, version_pattern);
+            (g_strstr_len (pattern, -1, "uuid:") != pattern ||
+             version != g_strstr_len (pattern, -1, ":")) &&
+            g_regex_match_simple (version_pattern,
+                                  version + 1,
+                                  G_REGEX_ANCHORED,
+                                  G_REGEX_MATCH_ANCHORED)) {
+                resource_browser->priv->version = atoi (version + 1);
+                strcpy (version + 1, version_pattern);
         }
 
         error = NULL;
@@ -575,6 +589,30 @@
 }
 
 /**
+ * gssdp_resource_browser_rescan:
+ * @resource_browser: A #GSSDPResourceBrowser
+ *
+ * Begins discovery if @resource_browser is active and no discovery is
+ * performed. Otherwise does nothing.
+ *
+ * Return value: %TRUE if rescaning has been started.
+ **/
+gboolean
+gssdp_resource_browser_rescan (GSSDPResourceBrowser *resource_browser)
+{
+        g_return_val_if_fail (GSSDP_IS_RESOURCE_BROWSER (resource_browser), 0);
+
+        if (resource_browser->priv->active &&
+            resource_browser->priv->timeout_src == NULL &&
+            resource_browser->priv->refresh_cache_src == NULL) {
+                start_discovery (resource_browser);
+                return TRUE;
+        }
+
+        return FALSE;
+}
+
+/**
  * Resource expired: Remove
  **/
 static gboolean
@@ -583,6 +621,7 @@
         GSSDPResourceBrowser *resource_browser;
         Resource *resource;
         char *usn;
+        char *canonical_usn;
 
         resource = user_data;
         resource_browser = resource->resource_browser;
@@ -593,13 +632,24 @@
         usn = resource->usn;
         resource->usn = NULL;
 
-        g_hash_table_remove (resource->resource_browser->priv->resources, usn);
+        if (resource_browser->priv->version > 0) {
+                char *version;
+
+                version = g_strrstr (usn, ":");
+                canonical_usn = g_strndup (usn, version - usn);
+        } else {
+                canonical_usn = g_strdup (usn);
+        }
+
+        g_hash_table_remove (resource->resource_browser->priv->resources,
+                             canonical_usn);
 
         g_signal_emit (resource_browser,
                        signals[RESOURCE_UNAVAILABLE],
                        0,
                        usn);
         g_free (usn);
+        g_free (canonical_usn);
 
         return FALSE;
 }
@@ -614,14 +664,34 @@
         gboolean was_cached;
         guint timeout;
         GList *locations;
+		char *canonical_usn;
         GMainContext *context;
 
         usn = soup_message_headers_get_one (headers, "USN");
         if (!usn)
                 return; /* No USN specified */
 
+        if (resource_browser->priv->version > 0) {
+                char *version;
+
+                version = g_strrstr (usn, ":");
+                canonical_usn = g_strndup (usn, version - usn);
+        } else {
+                canonical_usn = g_strdup (usn);
+        }
+
         /* Get from cache, if possible */
-        resource = g_hash_table_lookup (resource_browser->priv->resources, usn);
+        resource = g_hash_table_lookup (resource_browser->priv->resources,
+                                        canonical_usn);
+        /* Put usn into fresh resources, so this resource will not be
+         * removed on cache refreshing. */
+        if (resource_browser->priv->fresh_resources != NULL) {
+                //char *usn_copy = g_strdup (canonical_usn);
+
+                g_hash_table_replace (resource_browser->priv->fresh_resources,
+                                     g_strdup (canonical_usn), g_strdup (canonical_usn));
+        }
+
         if (resource) {
                 /* Remove old timeout */
                 g_source_destroy (resource->timeout_src);
@@ -635,12 +705,18 @@
                 resource->usn              = g_strdup (usn);
                 
                 g_hash_table_insert (resource_browser->priv->resources,
-                                     resource->usn,
+                                     canonical_usn,
                                      resource);
                 
                 was_cached = FALSE;
+
+                /* hash-table takes ownership of this */
+                canonical_usn = NULL;
         }
 
+        if (canonical_usn != NULL)
+                g_free (canonical_usn);
+
         /* Calculate new timeout */
         header = soup_message_headers_get_one (headers, "Cache-Control");
         if (header) {
@@ -706,8 +782,8 @@
 
         resource->timeout_src = g_timeout_source_new_seconds (timeout);
 	g_source_set_callback (resource->timeout_src,
-                               resource_expire,
-			       resource, NULL);
+                           resource_expire,
+			       		   resource, NULL);
 
         context = gssdp_client_get_main_context
                 (resource_browser->priv->client);
@@ -771,33 +847,77 @@
                       SoupMessageHeaders   *headers)
 {
         const char *usn;
+        char *canonical_usn;
 
         usn = soup_message_headers_get_one (headers, "USN");
         if (!usn)
                 return; /* No USN specified */
 
+        if (resource_browser->priv->version > 0) {
+                char *version;
+
+                version = g_strrstr (usn, ":");
+                canonical_usn = g_strndup (usn, version - usn);
+        } else {
+                canonical_usn = g_strdup (usn);
+        }
+
         /* Only process if we were cached */
-        if (!g_hash_table_lookup (resource_browser->priv->resources, usn))
-                return;
+        if (!g_hash_table_lookup (resource_browser->priv->resources,
+                                  canonical_usn))
+                goto out;
 
-        g_hash_table_remove (resource_browser->priv->resources, usn);
+        g_hash_table_remove (resource_browser->priv->resources,
+                             canonical_usn);
 
         g_signal_emit (resource_browser,
                        signals[RESOURCE_UNAVAILABLE],
                        0,
                        usn);
+
+out:
+        g_free (canonical_usn);
 }
 
 static gboolean
 check_target_compat (GSSDPResourceBrowser *resource_browser,
                      const char           *st)
 {
-        return strcmp (resource_browser->priv->target,
-                       GSSDP_ALL_RESOURCES) == 0 ||
-               g_regex_match (resource_browser->priv->target_regex,
-                              st,
-                              0,
-                              NULL);
+        GMatchInfo *info;
+        int         version;
+        char       *tmp;
+
+        if (strcmp (resource_browser->priv->target,
+                    GSSDP_ALL_RESOURCES) == 0)
+                return TRUE;
+
+        if (!g_regex_match (resource_browser->priv->target_regex,
+                            st,
+                            0,
+                            &info)) {
+                g_match_info_free (info);
+
+                return FALSE;
+        }
+
+        /* If there was no version to match, we're done */
+        if (resource_browser->priv->version == 0) {
+                g_match_info_free (info);
+
+                return TRUE;
+        }
+
+        if (g_match_info_get_match_count (info) != 2) {
+                g_match_info_free (info);
+
+                return FALSE;
+        }
+
+        version = atoi ((tmp = g_match_info_fetch (info, 1)));
+        g_free (tmp);
+        g_match_info_free (info);
+
+        return version >= resource_browser->priv->version;
 }
 
 static void
@@ -932,7 +1052,8 @@
         _gssdp_client_send_message (resource_browser->priv->client,
                                     NULL,
                                     0,
-                                    message);
+                                    message,
+                                    _GSSDP_DISCOVERY_REQUEST);
 
         g_free (message);
 }
@@ -940,6 +1061,7 @@
 static gboolean
 discovery_timeout (gpointer data)
 {
+		GMainContext *context;
         GSSDPResourceBrowser *resource_browser;
 
         resource_browser = GSSDP_RESOURCE_BROWSER (data);
@@ -951,10 +1073,22 @@
         if (resource_browser->priv->num_discovery >= MAX_DISCOVERY_MESSAGES) {
 		resource_browser->priv->timeout_src = NULL;
                 resource_browser->priv->num_discovery = 0;
+              /* Setup cache refreshing */
+                resource_browser->priv->refresh_cache_src =
+                                  g_timeout_source_new_seconds (RESCAN_TIMEOUT);
+                g_source_set_callback
+                                     (resource_browser->priv->refresh_cache_src,
+                                      refresh_cache,
+                                      resource_browser,
+                                      NULL);
+				context = gssdp_client_get_main_context(resource_browser->priv->client);
+                g_source_attach (resource_browser->priv->refresh_cache_src,
+                                 context);
+                g_source_unref (resource_browser->priv->refresh_cache_src);
 
                 return FALSE;
         } else
-                return TRUE;
+            return TRUE;
 }
 
 /* Starts sending discovery requests */
@@ -979,15 +1113,68 @@
 	g_source_attach (resource_browser->priv->timeout_src, context);
 
         g_source_unref (resource_browser->priv->timeout_src);
+
+        /* Setup a set of responsive resources for cache refreshing */
+        resource_browser->priv->fresh_resources = g_hash_table_new_full
+                                        (g_str_hash,
+                                         g_str_equal,
+                                         g_free,
+                                         NULL);
 }
 
 /* Stops the sending of discovery messages */
 static void
 stop_discovery (GSSDPResourceBrowser *resource_browser)
 {
-	if (resource_browser->priv->timeout_src) {
-		g_source_destroy (resource_browser->priv->timeout_src);
-		resource_browser->priv->timeout_src = NULL;
-		resource_browser->priv->num_discovery = 0;
-	}
+        if (resource_browser->priv->timeout_src) {
+                g_source_destroy (resource_browser->priv->timeout_src);
+                resource_browser->priv->timeout_src = NULL;
+                resource_browser->priv->num_discovery = 0;
+        }
+        if (resource_browser->priv->refresh_cache_src) {
+                g_source_destroy (resource_browser->priv->refresh_cache_src);
+                resource_browser->priv->refresh_cache_src = NULL;
+        }
+        if (resource_browser->priv->fresh_resources) {
+                g_hash_table_unref (resource_browser->priv->fresh_resources);
+                resource_browser->priv->fresh_resources = NULL;
+        }
+}
+
+static gboolean
+refresh_cache_helper (gpointer key, gpointer value, gpointer data)
+{
+        Resource *resource;
+        GHashTable *fresh_resources;
+
+        resource = value;
+        fresh_resources = data;
+
+        if (g_hash_table_lookup_extended (fresh_resources, key, NULL, NULL))
+                return FALSE;
+        else {
+                g_signal_emit (resource->resource_browser,
+                               signals[RESOURCE_UNAVAILABLE],
+                               0,
+                               resource->usn);
+
+                return TRUE;
+        }
+}
+
+/* Removes non-responsive resources */
+static gboolean
+refresh_cache (gpointer data)
+{
+        GSSDPResourceBrowser *resource_browser;
+
+        resource_browser = GSSDP_RESOURCE_BROWSER (data);
+        g_hash_table_foreach_remove (resource_browser->priv->resources,
+                                     refresh_cache_helper,
+                                     resource_browser->priv->fresh_resources);
+        g_hash_table_unref (resource_browser->priv->fresh_resources);
+        resource_browser->priv->fresh_resources = NULL;
+        resource_browser->priv->refresh_cache_src = NULL;
+
+        return FALSE;
 }
diff -urN -x .svn gssdp-0.10.0.orig/libgssdp/gssdp-resource-browser.h gssdp-0.10.0/libgssdp/gssdp-resource-browser.h
--- gssdp-0.10.0.orig/libgssdp/gssdp-resource-browser.h	2010-02-09 16:19:48.000000000 +0000
+++ gssdp-0.10.0/libgssdp/gssdp-resource-browser.h	2014-04-13 03:08:59.868320002 +0000
@@ -111,6 +111,9 @@
 gboolean
 gssdp_resource_browser_get_active (GSSDPResourceBrowser *resource_browser);
 
+gboolean
+gssdp_resource_browser_rescan     (GSSDPResourceBrowser *resource_browser);
+
 G_END_DECLS
 
 #endif /* __GSSDP_RESOURCE_BROWSER_H__ */
diff -urN -x .svn gssdp-0.10.0.orig/libgssdp/gssdp-resource-group.c gssdp-0.10.0/libgssdp/gssdp-resource-group.c
--- gssdp-0.10.0.orig/libgssdp/gssdp-resource-group.c	2011-03-09 14:03:19.000000000 +0000
+++ gssdp-0.10.0/libgssdp/gssdp-resource-group.c	2014-04-13 03:08:59.864320002 +0000
@@ -891,7 +891,8 @@
         _gssdp_client_send_message (client,
                                     response->dest_ip,
                                     response->dest_port,
-                                    message);
+                                    message,
+                                    _GSSDP_DISCOVERY_RESPONSE);
 
         g_free (message);
         g_free (date_str);
@@ -945,7 +946,8 @@
                 _gssdp_client_send_message (client,
                                             NULL,
                                             0,
-                                            message);
+                                            message,
+                                            _GSSDP_DISCOVERY_RESPONSE);
                 g_free (message);
 
                 return TRUE;
diff -urN -x .svn gssdp-0.10.0.orig/libgssdp/gssdp-socket-source.c gssdp-0.10.0/libgssdp/gssdp-socket-source.c
--- gssdp-0.10.0.orig/libgssdp/gssdp-socket-source.c	2010-12-01 15:07:59.000000000 +0000
+++ gssdp-0.10.0/libgssdp/gssdp-socket-source.c	2014-04-13 03:08:59.864320002 +0000
@@ -246,8 +246,13 @@
                                                           SSDP_PORT);
 #endif
         } else {
+                guint port = SSDP_PORT;
+
+                /* Chose random port For the socket source used by M-SEARCH */
+                if (self->priv->type == GSSDP_SOCKET_SOURCE_TYPE_SEARCH)
+                        port = 0;
                 bind_address = g_inet_socket_address_new (iface_address,
-                                                          SSDP_PORT);
+                                                          port);
         }
 
 #ifdef G_OS_WIN32
@@ -408,7 +413,7 @@
                          "Type",
                          "Type of socket-source (Multicast/Unicast)",
                          GSSDP_SOCKET_SOURCE_TYPE_REQUEST,
-                         GSSDP_SOCKET_SOURCE_TYPE_MULTICAST,
+                         GSSDP_SOCKET_SOURCE_TYPE_SEARCH,
                          GSSDP_SOCKET_SOURCE_TYPE_REQUEST,
                          G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY |
                          G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK |
diff -urN -x .svn gssdp-0.10.0.orig/libgssdp/gssdp-socket-source.h gssdp-0.10.0/libgssdp/gssdp-socket-source.h
--- gssdp-0.10.0.orig/libgssdp/gssdp-socket-source.h	2010-12-01 15:07:59.000000000 +0000
+++ gssdp-0.10.0/libgssdp/gssdp-socket-source.h	2014-04-13 03:08:59.864320002 +0000
@@ -55,7 +55,8 @@
 
 typedef enum {
         GSSDP_SOCKET_SOURCE_TYPE_REQUEST,
-        GSSDP_SOCKET_SOURCE_TYPE_MULTICAST
+        GSSDP_SOCKET_SOURCE_TYPE_MULTICAST,
+        GSSDP_SOCKET_SOURCE_TYPE_SEARCH
 } GSSDPSocketSourceType;
 
 
diff -urN -x .svn gssdp-0.10.0.orig/rdkcomponentversion.txt gssdp-0.10.0/rdkcomponentversion.txt
--- gssdp-0.10.0.orig/rdkcomponentversion.txt	1970-01-01 00:00:00.000000000 +0000
+++ gssdp-0.10.0/rdkcomponentversion.txt	2014-04-13 03:08:59.896320002 +0000
@@ -0,0 +1 @@
+0.10.0
diff -urN -x .svn gssdp-0.10.0.orig/RDK_README gssdp-0.10.0/RDK_README
--- gssdp-0.10.0.orig/RDK_README        1970-01-01 00:00:00.000000000 +0000
+++ gssdp-0.10.0/RDK_README     2018-06-08 10:13:36.383746436 +0000
@@ -0,0 +1,16 @@
+
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Library General Public
+ License as published by the Free Software Foundation; either
+ version 2 of the License, or (at your option) any later version.
+
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Library General Public License for more details.
+
+ You should have received a copy of the GNU Library General Public
+ License along with this library; if not, write to the
+ Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ Boston, MA 02110-1301, USA.
+


