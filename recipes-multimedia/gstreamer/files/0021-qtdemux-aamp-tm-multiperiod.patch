Date: Tue Apr 09 18:40:51 2019

From: 896d1f105fa0962400f107f50ef0571fb56d0a25 Wed May 08 21:02:49 2019

Subject: [PATCH] BCOM-3327 - [DASH] Support iframe trickmode for multi period assets.

	Support smooth PTS restamping across period boundaries
	by handling discontinuity by a new custom event.

Source: COMCAST

License: LGPL-2.1-or-later

Upstream-Status: Pending

Signed-off-by: Christo Joseph <Christo_Joseph@comcast.com>
---

diff -Naur gst-plugins-good-1.10.4_orig/gst/isomp4/qtdemux.c gst-plugins-good-1.10.4_mod/gst/isomp4/qtdemux.c
--- gst-plugins-good-1.10.4_orig/gst/isomp4/qtdemux.c	2019-04-10 12:04:03.237304983 +0530
+++ gst-plugins-good-1.10.4_mod/gst/isomp4/qtdemux.c	2019-04-11 16:51:24.624480061 +0530
@@ -649,6 +649,8 @@
   qtdemux->aamp_override_enabled = FALSE;
   qtdemux->aamp_player_enabled = FALSE;
   qtdemux->aamp_rate = 1.0;
+  qtdemux->aamp_last_pts = GST_CLOCK_TIME_NONE;
+  qtdemux->aamp_pts_offset = 0;
 }
 
 static void
@@ -2310,6 +2312,8 @@
         if (gst_structure_has_name(structure, "aamp_override"))
         {
             demux->aamp_base_pts = GST_CLOCK_TIME_NONE;
+            demux->aamp_last_pts = GST_CLOCK_TIME_NONE;
+            demux->aamp_pts_offset = 0;
             demux->aamp_rate = g_value_get_float(gst_structure_get_value(structure, "rate"));
             demux->aamp_override_enabled = g_value_get_boolean(gst_structure_get_value(structure, "enable"));
             demux->aamp_player_enabled = g_value_get_boolean(gst_structure_get_value(structure, "aampplayer"));
@@ -2334,6 +2338,17 @@
             gst_event_unref (event);
             goto drop;
         }
+        else if (gst_structure_has_name(structure, "aamp-tm-disc"))
+        {
+          demux->aamp_base_pts = GST_CLOCK_TIME_NONE;
+          if (GST_CLOCK_TIME_NONE != demux->aamp_last_pts)
+          {
+            guint fps = g_value_get_uint(gst_structure_get_value(structure, "fps"));
+            demux->aamp_pts_offset = demux->aamp_last_pts + (1000*GST_MSECOND/fps);
+          }
+          gst_event_unref (event);
+          goto drop;
+        }
         break;
     }
     default:
@@ -5554,14 +5569,17 @@
         {
           qtdemux->aamp_base_pts = qtdemux->aamp_base_pts_override;
         }
-        g_print("%s:%d - aamp %f first pts %"G_GUINT64_FORMAT" ms\n",
-        __FUNCTION__, __LINE__, rate, GST_TIME_AS_MSECONDS(pts));
-        gst_segment_init(&segment, GST_FORMAT_TIME);
-        segment.start = 0;
-        GstEvent* event = gst_event_new_segment(&segment);
-        if (!gst_pad_push_event(stream->pad, event))
+        g_print("%s:%d - aamp rate %f first pts %" G_GUINT64_FORMAT " ms aamp_pts_offset %" G_GUINT64_FORMAT " ms\n",
+        __FUNCTION__, __LINE__, rate, GST_TIME_AS_MSECONDS(pts), GST_TIME_AS_MSECONDS(qtdemux->aamp_pts_offset));
+        if (G_LIKELY (0 == qtdemux->aamp_pts_offset))
         {
-          g_print("%s: gst_pad_push_event segment error\n", __FUNCTION__);
+          gst_segment_init(&segment, GST_FORMAT_TIME);
+          segment.start = 0;
+          GstEvent* event = gst_event_new_segment(&segment);
+          if (!gst_pad_push_event(stream->pad, event))
+          {
+            g_print("%s: gst_pad_push_event segment error\n", __FUNCTION__);
+          }
         }
       }
       if ( rate > 0 )
@@ -5571,19 +5589,20 @@
             gst_buffer_unref(buf);
             goto exit;
           }
-          GST_BUFFER_DTS (buf) = ( dts - qtdemux->aamp_base_pts)/rate;
-          GST_BUFFER_PTS (buf) = ( pts - qtdemux->aamp_base_pts)/rate;
+          GST_BUFFER_DTS (buf) = qtdemux->aamp_pts_offset + ( dts - qtdemux->aamp_base_pts)/rate;
+          GST_BUFFER_PTS (buf) = qtdemux->aamp_pts_offset + ( pts - qtdemux->aamp_base_pts)/rate;
           GST_DEBUG_OBJECT (qtdemux, "aamp_trickmode %f orig pts %"G_GUINT64_FORMAT" restamped pts %"G_GUINT64_FORMAT" ms\n",
                   rate, GST_TIME_AS_MSECONDS(pts), GST_TIME_AS_MSECONDS(GST_BUFFER_PTS (buf)));
       }
       else
       {
           rate = -rate;
-          GST_BUFFER_DTS (buf) = ( qtdemux->aamp_base_pts - dts)/rate;
-          GST_BUFFER_PTS (buf) = ( qtdemux->aamp_base_pts - pts)/rate;
+          GST_BUFFER_DTS (buf) = qtdemux->aamp_pts_offset + ( qtdemux->aamp_base_pts - dts)/rate;
+          GST_BUFFER_PTS (buf) = qtdemux->aamp_pts_offset + ( qtdemux->aamp_base_pts - pts)/rate;
           GST_DEBUG_OBJECT (qtdemux, "aamp_trickmode %f orig pts %"G_GUINT64_FORMAT" restamped pts %"G_GUINT64_FORMAT" ms\n",
                   -rate, GST_TIME_AS_MSECONDS(pts), GST_TIME_AS_MSECONDS(GST_BUFFER_PTS (buf)));
       }
+      qtdemux->aamp_last_pts = GST_BUFFER_PTS (buf);
   }
   GST_BUFFER_DURATION (buf) = duration;
   GST_BUFFER_OFFSET (buf) = -1;
diff -Naur gst-plugins-good-1.10.4_orig/gst/isomp4/qtdemux.h gst-plugins-good-1.10.4_mod/gst/isomp4/qtdemux.h
--- gst-plugins-good-1.10.4_orig/gst/isomp4/qtdemux.h	2019-04-10 12:04:03.237304983 +0530
+++ gst-plugins-good-1.10.4_mod/gst/isomp4/qtdemux.h	2019-04-11 16:51:24.624480061 +0530
@@ -239,6 +239,8 @@
   gdouble aamp_rate;
   gboolean aamp_override_enabled;
   gboolean aamp_player_enabled;
+  GstClockTime aamp_last_pts;
+  GstClockTime aamp_pts_offset;
 };
 
 struct _GstQTDemuxClass {
