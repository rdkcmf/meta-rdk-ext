From 7fc2b27b8d0a78a3c27d7ac543243bce395f0ff8 Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
License: GPLV2
Date: Mon, 18 Mar 2019 09:41:30 -0400
Subject: [PATCH] XRE key mapping
Source: COMCAST
Upstream-Status: None
Signed-off-by: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>

Reverse some XRE specific key combinations to key codes.
Protect event arrays in order to fix possible race and memory corruption
---
 src/westeros/WesterosViewbackendInput.cpp | 91 +++++++++++++++++++++++++++++--
 src/westeros/WesterosViewbackendInput.h   |  2 +
 2 files changed, 87 insertions(+), 6 deletions(-)

diff --git a/src/westeros/WesterosViewbackendInput.cpp b/src/westeros/WesterosViewbackendInput.cpp
index b42ad17..c055b31 100644
--- a/src/westeros/WesterosViewbackendInput.cpp
+++ b/src/westeros/WesterosViewbackendInput.cpp
@@ -8,6 +8,7 @@
 #include <sys/mman.h>
 #include <unistd.h>
 #include <wpe/wpe.h>
+#include <memory>
 
 namespace Westeros {
 
@@ -124,6 +125,7 @@ struct KeyEventData
     uint32_t key;
     uint32_t state;
     uint32_t time;
+    uint32_t modifiers;
 };
 
 void WesterosViewbackendInput::handleKeyEvent(void* userData, uint32_t key, uint32_t state, uint32_t time)
@@ -132,8 +134,11 @@ void WesterosViewbackendInput::handleKeyEvent(void* userData, uint32_t key, uint
     if (!me.m_viewbackend)
         return;
 
-    KeyEventData *eventData = new KeyEventData { userData, key, state, time };
+    KeyEventData *eventData = new KeyEventData { userData, key, state, time, me.m_handlerData.modifiers };
+
+    std::unique_lock<std::mutex> lock(me.m_evtMutex);
     g_ptr_array_add(me.m_keyEventDataArray, eventData);
+    lock.unlock();
 
     g_idle_add_full(G_PRIORITY_DEFAULT, [](gpointer data) -> gboolean
     {
@@ -142,19 +147,79 @@ void WesterosViewbackendInput::handleKeyEvent(void* userData, uint32_t key, uint
         auto& backend_input = *static_cast<WesterosViewbackendInput*>(e->userData);
         auto& handlerData = backend_input.m_handlerData;
 
+        std::unique_ptr<KeyEventData> event_data(e);
+
+        std::unique_lock<std::mutex> lock(backend_input.m_evtMutex);
+        g_ptr_array_remove_fast(backend_input.m_keyEventDataArray, data);
+        lock.unlock();
+
         uint32_t keysym = wpe_input_xkb_context_get_key_code(wpe_input_xkb_context_get_default(), e->key, e->state == WL_KEYBOARD_KEY_STATE_PRESSED);
         if (!keysym)
+            return G_SOURCE_REMOVE;
+
+        static bool ctrl_override = 0;
+        if ((keysym == WPE_KEY_Control_L || keysym == WPE_KEY_Control_R))
         {
-            delete e;
+            if (e->state == WL_KEYBOARD_KEY_STATE_PRESSED)
+                ctrl_override = true;
+            else
+                ctrl_override = false;
+            // IR Mgr sends some input from the remote as Ctrl + 'key' combination.
+            // Since some of these combinations are handled below we have to drop individual Ctrl events.
             return G_SOURCE_REMOVE;
         }
 
+        uint8_t modifiers = e->modifiers;
+        if ((modifiers == wpe_input_keyboard_modifier_control) || (ctrl_override && modifiers == 0))
+        {
+            bool should_update_key = true;
+            uint32_t hardware_key_code = 0;
+
+            if (keysym == WPE_KEY_l || keysym == WPE_KEY_L) {
+                keysym = WPE_KEY_BackSpace;
+                hardware_key_code = KEY_BACKSPACE;
+            }
+            else if (keysym == WPE_KEY_f || keysym == WPE_KEY_F) {
+                keysym = WPE_KEY_AudioForward;
+                hardware_key_code = KEY_FASTFORWARD;
+            }
+            else if (keysym == WPE_KEY_w || keysym == WPE_KEY_W) {
+                keysym = WPE_KEY_AudioRewind;
+                hardware_key_code = KEY_REWIND;
+            }
+            else if (keysym == WPE_KEY_p || keysym == WPE_KEY_P) {
+                keysym = WPE_KEY_AudioPlay;
+                hardware_key_code = KEY_PLAYPAUSE;
+            }
+            else if (keysym == WPE_KEY_0) {
+                keysym = WPE_KEY_Red;
+                hardware_key_code = KEY_RED;
+            }
+            else if (keysym == WPE_KEY_1) {
+                keysym = WPE_KEY_Green;
+                hardware_key_code = KEY_GREEN;
+            }
+            else if (keysym == WPE_KEY_2) {
+                keysym = WPE_KEY_Yellow;
+                hardware_key_code = KEY_YELLOW;
+            }
+            else if (keysym == WPE_KEY_3) {
+                keysym = WPE_KEY_Blue;
+                hardware_key_code = KEY_BLUE;
+            }
+            else {
+                should_update_key = false;
+            }
+
+            if (should_update_key) {
+                e->key = hardware_key_code + 8;
+                modifiers = 0;
+            }
+        }
+
         struct wpe_input_keyboard_event event
-                { e->time, keysym, e->key, !!e->state, handlerData.modifiers };
+                { e->time, keysym, e->key, !!e->state, modifiers };
         wpe_view_backend_dispatch_keyboard_event(backend_input.m_viewbackend, &event);
-
-        g_ptr_array_remove_fast(backend_input.m_keyEventDataArray, data);
-        delete e;
         return G_SOURCE_REMOVE;
     }, eventData, nullptr);
 }
@@ -201,7 +266,10 @@ void WesterosViewbackendInput::pointerHandleMotion( void *userData, uint32_t tim
         return;
 
     MotionEventData *eventData = new MotionEventData { userData, time, sx, sy };
+
+    std::unique_lock<std::mutex> lock(me.m_evtMutex);
     g_ptr_array_add(me.m_motionEventDataArray, eventData);
+    lock.unlock();
 
     g_idle_add_full(G_PRIORITY_DEFAULT, [](gpointer data) -> gboolean
     {
@@ -220,7 +288,9 @@ void WesterosViewbackendInput::pointerHandleMotion( void *userData, uint32_t tim
                 { wpe_input_pointer_event_type_motion, e->time, x, y, 0, 0 };
         wpe_view_backend_dispatch_pointer_event(backend_input.m_viewbackend, &event);
 
+        std::unique_lock<std::mutex> lock(backend_input.m_evtMutex);
         g_ptr_array_remove_fast(backend_input.m_motionEventDataArray, data);
+        lock.unlock();
         delete e;
         return G_SOURCE_REMOVE;
     }, eventData, nullptr);
@@ -242,7 +312,10 @@ void WesterosViewbackendInput::pointerHandleButton( void *userData, uint32_t tim
 
     button = (button >= BTN_MOUSE) ? (button - BTN_MOUSE + 1) : 0;
     ButtonEventData *eventData = new ButtonEventData { userData, time, button, state };
+
+    std::unique_lock<std::mutex> lock(me.m_evtMutex);
     g_ptr_array_add(me.m_buttonEventDataArray, eventData);
+    lock.unlock();
 
     g_idle_add_full(G_PRIORITY_DEFAULT, [](gpointer data) -> gboolean
     {
@@ -258,7 +331,9 @@ void WesterosViewbackendInput::pointerHandleButton( void *userData, uint32_t tim
                 { wpe_input_pointer_event_type_button, e->time, coords.first, coords.second, e->button, e->state };
         wpe_view_backend_dispatch_pointer_event(backend_input.m_viewbackend, &event);
 
+        std::unique_lock<std::mutex> lock(backend_input.m_evtMutex);
         g_ptr_array_remove_fast(backend_input.m_buttonEventDataArray, data);
+        lock.unlock();
         delete e;
         return G_SOURCE_REMOVE;
     }, eventData, nullptr);
@@ -279,7 +354,9 @@ void WesterosViewbackendInput::pointerHandleAxis( void *userData, uint32_t time,
         return;
 
     AxisEventData *eventData = new AxisEventData { userData, time, axis, value };
+    std::unique_lock<std::mutex> lock(me.m_evtMutex);
     g_ptr_array_add(me.m_axisEventDataArray, eventData);
+    lock.unlock();
 
     g_idle_add_full(G_PRIORITY_DEFAULT, [](gpointer data) -> gboolean
     {
@@ -294,7 +371,9 @@ void WesterosViewbackendInput::pointerHandleAxis( void *userData, uint32_t time,
         struct wpe_input_axis_event event{ wpe_input_axis_event_type_motion, e->time, coords.first, coords.second, e->axis, -wl_fixed_to_int(e->value) };
         wpe_view_backend_dispatch_axis_event(backend_input.m_viewbackend, &event);
 
+        std::unique_lock<std::mutex> lock(backend_input.m_evtMutex);
         g_ptr_array_remove_fast(backend_input.m_axisEventDataArray, data);
+        lock.unlock();
         delete e;
         return G_SOURCE_REMOVE;
     }, eventData, nullptr);
diff --git a/src/westeros/WesterosViewbackendInput.h b/src/westeros/WesterosViewbackendInput.h
index cf21aee..ce800b3 100644
--- a/src/westeros/WesterosViewbackendInput.h
+++ b/src/westeros/WesterosViewbackendInput.h
@@ -3,6 +3,7 @@
 
 #include <glib.h>
 #include <utility>
+#include <mutex>
 #include <wayland-client.h>
 #include <westeros-compositor.h>
 
@@ -55,6 +56,7 @@ public:
 private:
     void clearDataArrays();
 
+    std::mutex m_evtMutex;
     WstCompositor* m_compositor;
     struct wpe_view_backend* m_viewbackend;
     HandlerData m_handlerData;
-- 
2.7.4

