Copyright 2014 The Chromium Authors. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    * Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following disclaimer
in the documentation and/or other materials provided with the
distribution.
    * Neither the name of Google Inc. nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
ATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Date: Jun 16 10:03:05 2017
From: a0029cbc616edde276143f17a57d9f27e086a9b5 Jun 30 02:55:47 2017

Subject: [PATCH] XRE-11537 : [WPE] update opencdm component to use Metrological's repos

	switch to using Metro's opencdm repo. Remove "playready" packageconfig
	option from WPE, OCDM option will be used instead.
	
Source: COMCAST

Upstream-Status: Pending

Signed-off-by: Gurdal Oruklu <Gurdal_Oruklu2@cable.comcast.com>
---

diff --git a/src/browser/wpe/opencdm/open_cdm.cpp b/src/browser/wpe/opencdm/open_cdm.cpp
index d9b8b05..a5660d1 100644
--- a/src/browser/wpe/opencdm/open_cdm.cpp
+++ b/src/browser/wpe/opencdm/open_cdm.cpp
@@ -250,33 +250,37 @@ int OpenCdm::ReleaseMem() {
 int OpenCdm::Decrypt(unsigned char* encryptedData, uint32_t encryptedDataLength, unsigned char* ivData, uint32_t ivDataLength) {
   int ret = 1;
   uint32_t outSize;
-  CDM_DLOG() << "OpenCdm::Decrypt session_id : " << m_session_id.session_id << endl;
-  CDM_DLOG() << "OpenCdm::Decrypt session_id_len : " << m_session_id.session_id_len << endl;
-  CDM_DLOG() << "OpenCdm::Decrypt encryptedDataLength : " << encryptedDataLength << endl;
-  CDM_DLOG() << "OpenCdm::Decrypt ivDataLength : " << ivDataLength << endl;
+  //CDM_DLOG() << "OpenCdm::Decrypt session_id : " << m_session_id.session_id << endl;
+  //CDM_DLOG() << "OpenCdm::Decrypt session_id_len : " << m_session_id.session_id_len << endl;
+  //CDM_DLOG() << "OpenCdm::Decrypt encryptedDataLength : " << encryptedDataLength << endl;
+  //CDM_DLOG() << "OpenCdm::Decrypt ivDataLength : " << ivDataLength << endl;
   // mediaengine instantiation
+  std::unique_lock<std::mutex> lock(m_mtx_media_engine);
   if (!media_engine_) {
     // FIXME:(ska): handle mutiple sessions
     media_engine_ = OpenCdmMediaengineFactory::Create(m_key_system, m_session_id);
     CDM_DLOG() << "::" << endl;
     if (!media_engine_){
       CDM_DLOG() << "::" << endl;
+      lock.unlock();
       return ret;
     }
   }
-  CDM_DLOG() << "Returned back to OpenCdm::Decrypt";
+  //CDM_DLOG() << "OpenCdm::Decrypt called";
   DecryptResponse dr = media_engine_->Decrypt((const uint8_t*)ivData, ivDataLength,
       (const uint8_t*)encryptedData, encryptedDataLength, (uint8_t*)encryptedData, outSize);
 
-  CDM_DLOG() << "media_engine_->Decrypt done " << dr.platform_response;
+  lock.unlock();
+  //CDM_DLOG() << "media_engine_->Decrypt done " << dr.platform_response;
   return 0;
 }
 
 bool OpenCdm::IsTypeSupported(const std::string& keySystem, const std::string& mimeType) {
   MediaKeyTypeResponse ret;
 
+
   ret = platform_->IsTypeSupported(keySystem, mimeType);
-  CDM_DLOG() << "IsTypeSupported ";
+  CDM_DLOG() << "IsTypeSupported mimeType=" << mimeType;
 
   if (ret.platform_response ==  PLATFORM_CALL_SUCCESS )
     return (true);
@@ -307,13 +311,12 @@ void OpenCdm::ErrorCallback(OpenCdmPlatformSessionId platform_session_id,
 void OpenCdm::MessageCallback(OpenCdmPlatformSessionId platform_session_id,
     std::string& message, std::string destination_url) {
 
-  CDM_DLOG() << "OpenCdm::MessageCallback:";
-  fflush(stdout);
-  CDM_DLOG() << "Start MessageCallback";
-  for(int i = 0; i < message.length(); i++)
-    printf("%2x ",message[i]);
-  CDM_DLOG() << "End MessageCallback";
+  CDM_DLOG() << "OpenCdm::MessageCallback destination_url: " << destination_url;
+
+  CDM_DLOG() << "OpenCdm::MessageCallback size: " << message.length();
+
   std::unique_lock<std::mutex> lck(m_mtx);
+
   m_message = message;
   m_dest_url = destination_url;
   m_eState = KEY_SESSION_MESSAGE_RECEIVED;
diff --git a/src/browser/wpe/opencdm/open_cdm.h b/src/browser/wpe/opencdm/open_cdm.h
index 46d3a64..800c65f 100644
--- a/src/browser/wpe/opencdm/open_cdm.h
+++ b/src/browser/wpe/opencdm/open_cdm.h
@@ -75,6 +75,7 @@ private:
   OpenCdmPlatform* platform_;
   OpenCdmPlatformSessionId m_session_id;
 
+  std::mutex m_mtx_media_engine;
   std::string m_key_system;
   std::mutex  m_mtx;
   std::string m_message;
diff --git a/src/com/cdm/rpc/rpc_cdm_platform_handler.cc b/src/com/cdm/rpc/rpc_cdm_platform_handler.cc
index a0b8837..6b5bdc6 100644
--- a/src/com/cdm/rpc/rpc_cdm_platform_handler.cc
+++ b/src/com/cdm/rpc/rpc_cdm_platform_handler.cc
@@ -170,7 +170,8 @@ void RpcCdmPlatformHandler::OnMessage1Svc(rpc_cb_message *kmm, struct svc_req *)
   laURL = s.substr(0, s.find(delimiter));
 
   message = s.substr(s.find(delimiter) + delimiter.size(), s.size());
-
+  CDM_DLOG() << "LA_URL: " << laURL.c_str();
+  CDM_DLOG() << "KEY_MESSAGE received: " << message.c_str();
 
   //get open_media_keys instance to execute callbacks
   this->callback_receiver_->MessageCallback(session_id, message, laURL);
diff --git a/src/com/common/shmemsem/shmemsem_helper.cc b/src/com/common/shmemsem/shmemsem_helper.cc
index f9d697b..bec0d29 100644
--- a/src/com/common/shmemsem/shmemsem_helper.cc
+++ b/src/com/common/shmemsem/shmemsem_helper.cc
@@ -41,7 +41,7 @@ int AllocateSharedMemory(int n)
 void* MapSharedMemory(int id)
 {
     void* addr;
-    assert(id != 0); // Idiot-proof the call.
+    //assert(id != 0); // Idiot-proof the call.
     addr = shmat(id, NULL, 0);  // Attach the segment...
     shmctl(id, IPC_RMID, NULL); // ...and mark it destroyed.
     return addr;
@@ -57,7 +57,7 @@ void* MapSharedMemory(int id)
 void* MapExistingSharedMemory(int id, void* existingAddr)
 {
     void* addr;
-    assert(id != 0); // Idiot-proof the call.
+    //assert(id != 0); // Idiot-proof the call.
     addr = shmat(id, existingAddr, 0);  // Attach the segment...
     shmctl(id, IPC_RMID, NULL); // ...and mark it destroyed.
     return addr;
@@ -123,7 +123,7 @@ void LockSemaphore(int id, int i)
     struct sembuf sb;
     sb.sem_num = i;
     sb.sem_op = -1;
-    sb.sem_flg = SEM_UNDO;
+    sb.sem_flg = 0; //SEM_UNDO;
     semop(id, &sb, 1);
 }
 
@@ -138,6 +138,6 @@ void UnlockSemaphore(int id, int i)
     struct sembuf sb;
     sb.sem_num = i;
     sb.sem_op = 1;
-    sb.sem_flg = SEM_UNDO;
+    sb.sem_flg = 0; //SEM_UNDO;
     semop(id, &sb, 1);
 }
diff --git a/src/com/mediaengine/rpc/rpc_cdm_mediaengine_handler.cc b/src/com/mediaengine/rpc/rpc_cdm_mediaengine_handler.cc
index 50c258f..bec2913 100644
--- a/src/com/mediaengine/rpc/rpc_cdm_mediaengine_handler.cc
+++ b/src/com/mediaengine/rpc/rpc_cdm_mediaengine_handler.cc
@@ -124,14 +124,14 @@ DecryptResponse RpcCdmMediaengineHandler::Decrypt(const uint8_t *pbIv,
                                                   const uint8_t *pbData,
                                                   uint32_t cbData, uint8_t *out,
                                                   uint32_t &out_size) {
-  CDM_DLOG() << "RpcCdmMediaengineHandler::Decrypt: ";
+  //CDM_DLOG() << "RpcCdmMediaengineHandler::Decrypt: ";
   DecryptResponse response;
   response.platform_response = PLATFORM_CALL_SUCCESS;
   response.sys_err = 0;
   // TODO(sph): real decryptresponse values need to
   // be written to sharedmem as well
   LockSemaphore(idXchngSem, SEM_XCHNG_PUSH);
-  CDM_DLOG() << "LOCKed push lock";
+  //CDM_DLOG() << "LOCKed push lock";
 
   cbIv = (cbIv != 8) ? 8 : cbIv;
   shMemInfo->idIvShMem = AllocateSharedMemory(cbIv);
@@ -150,29 +150,29 @@ DecryptResponse RpcCdmMediaengineHandler::Decrypt(const uint8_t *pbIv,
   memcpy(pSampleShMem, pbData, cbData);
   // delete[] pbData;
 
-  CDM_DLOG() << "memcpy pSampleShMem, pbData";
+  //CDM_DLOG() << "memcpy pSampleShMem, pbData";
   shMemInfo->idSubsampleDataShMem = 0;
   shMemInfo->subsampleDataSize = 0;
-  CDM_DLOG() << "data ready to decrypt";
+  //CDM_DLOG() << "data ready to decrypt";
   UnlockSemaphore(idXchngSem, SEM_XCHNG_DECRYPT);
-  CDM_DLOG() << "WAIT for pull lock";
+  //CDM_DLOG() << "WAIT for pull lock";
   LockSemaphore(idXchngSem, SEM_XCHNG_PULL);
-  CDM_DLOG() << "LOCKed pull lock";
+  //CDM_DLOG() << "LOCKed pull lock";
   // process clear data
 
   memcpy(out, pSampleShMem, cbData);
   out_size = cbData;
 
-  CDM_DLOG() << "RUN fired!";
+  //CDM_DLOG() << "RUN fired!";
   UnlockSemaphore(idXchngSem, SEM_XCHNG_PUSH);
-  CDM_DLOG() << "UNLOCKed push lock";
+  //CDM_DLOG() << "UNLOCKed push lock";
 
   // clean up current shared mems for sample data
   int err = DetachExistingSharedMemory(pIvShMem);
-  CDM_DLOG() << "detached iv shmem " << shMemInfo->idIvShMem << ": " << err;
+  //CDM_DLOG() << "detached iv shmem " << shMemInfo->idIvShMem << ": " << err;
   err = DetachExistingSharedMemory(pSampleShMem);
-  CDM_DLOG() << "detached sample shmem " << shMemInfo->idSampleShMem << ": "
-             << err;
+  //CDM_DLOG() << "detached sample shmem " << shMemInfo->idSampleShMem << ": "
+   //          << err;
   return response;
 }
 
diff --git a/src/common/cdm_logging.h b/src/common/cdm_logging.h
index 6b59272..53fed6f 100644
--- a/src/common/cdm_logging.h
+++ b/src/common/cdm_logging.h
@@ -5,7 +5,8 @@
 #include <iostream>
 namespace media {
 
-#define CDM_DLOG() std::cout << "\n" <<__FILE__<<":"<<  __func__ <<":"<< __LINE__ <<"::"
+//#define CDM_DLOG() std::cout << "\n" <<__FILE__<<":"<<  __func__ <<":"<< __LINE__ <<"::"
+#define CDM_DLOG() std::cout << "\n" <<  __func__ <<":"<< __LINE__ <<"::"
 }  // namespace media
 
 #endif  // MEDIA_CDM_CDM_LOGGING_H_
diff --git a/src/mediaengine/open_cdm_mediaengine_impl.cc b/src/mediaengine/open_cdm_mediaengine_impl.cc
index 4c63119..1d4cbc3 100644
--- a/src/mediaengine/open_cdm_mediaengine_impl.cc
+++ b/src/mediaengine/open_cdm_mediaengine_impl.cc
@@ -47,7 +47,7 @@ DecryptResponse OpenCdmMediaengineImpl::Decrypt(const uint8_t *pbIv,
                                                 const uint8_t *pbData,
                                                 uint32_t cbData, uint8_t *out,
                                                 uint32_t &out_size) {
-  CDM_DLOG() << "OpenCdmMediaengineImpl::Decrypt: ";
+  //CDM_DLOG() << "OpenCdmMediaengineImpl::Decrypt: ";
   DecryptResponse response;
 
   response = media_engine_com_->Decrypt(pbIv, cbIv, pbData, cbData, out,
