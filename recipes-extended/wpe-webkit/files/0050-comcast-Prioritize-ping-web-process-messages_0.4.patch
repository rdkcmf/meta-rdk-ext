From d3ac5d22ce8f7f1eff2060e4af279ce83083fea4 Mon Sep 17 00:00:00 2001
From: mgopalakirshnan <manigandan.gopalakrishnan@lnttechservices.com>
Date: Tue, 6 Feb 2018 13:38:27 +0000
Subject: [PATCH] comcast Prioritize ping web process messages

Signed-off-by: mgopalakirshnan <manigandan.gopalakrishnan@lnttechservices.com>
---
 Source/WebKit/Platform/IPC/Connection.cpp | 36 +++++++++++++++++++++++++++++++
 Source/WebKit/UIProcess/WebPageProxy.cpp  |  2 ++
 2 files changed, 38 insertions(+)

diff --git a/Source/WebKit/Platform/IPC/Connection.cpp b/Source/WebKit/Platform/IPC/Connection.cpp
index 85f26a2cb95..3e8b9ec5676 100644
--- a/Source/WebKit/Platform/IPC/Connection.cpp
+++ b/Source/WebKit/Platform/IPC/Connection.cpp
@@ -45,6 +45,13 @@
 
 namespace IPC {
 
+#if PLATFORM(WPE)
+template <typename T> static inline bool isPingMessage(T &message) {
+    return message.messageName() == "MainThreadPing" ||
+        message.messageName() == "DidReceiveMainThreadPing";
+}
+#endif
+
 struct Connection::ReplyHandler {
     RefPtr<FunctionDispatcher> dispatcher;
     Function<void (std::unique_ptr<Decoder>)> handler;
@@ -392,6 +399,15 @@ bool Connection::sendMessage(std::unique_ptr<Encoder> encoder, OptionSet<SendOpt
             || m_inDispatchMessageMarkedDispatchWhenWaitingForSyncReplyCount))
         encoder->setShouldDispatchMessageWhenWaitingForSyncReply(true);
 
+#if PLATFORM(WPE)
+    if (isPingMessage(*encoder))
+    {
+        std::lock_guard<Lock> lock(m_outgoingMessagesMutex);
+        m_outgoingMessages.prepend(WTFMove(encoder));
+    }
+    else
+#endif
+
     {
         std::lock_guard<Lock> lock(m_outgoingMessagesMutex);
         m_outgoingMessages.append(WTFMove(encoder));
@@ -886,6 +902,15 @@ void Connection::didFailToSendSyncMessage()
 
 void Connection::enqueueIncomingMessage(std::unique_ptr<Decoder> incomingMessage)
 {
+#if PLATFORM(WPE)
+    if (isPingMessage(*incomingMessage))
+    {
+        std::lock_guard<Lock> lock(m_incomingMessagesMutex);
+        m_incomingMessages.prepend(WTFMove(incomingMessage));
+    }
+    else
+#endif
+
     {
         std::lock_guard<Lock> lock(m_incomingMessagesMutex);
         m_incomingMessages.append(WTFMove(incomingMessage));
@@ -893,6 +918,17 @@ void Connection::enqueueIncomingMessage(std::unique_ptr<Decoder> incomingMessage
 
     RunLoop::main().dispatch([protectedThis = makeRef(*this)]() mutable {
         protectedThis->dispatchOneMessage();
+
+#if PLATFORM(WPE)
+        {
+            std::lock_guard<Lock> lock(protectedThis->m_incomingMessagesMutex);
+            if (protectedThis->m_incomingMessages.isEmpty())
+                return;
+            if (!isPingMessage(*protectedThis->m_incomingMessages.first()))
+                return;
+        }
+        protectedThis->dispatchOneMessage();
+#endif
     });
 }
 
diff --git a/Source/WebKit/UIProcess/WebPageProxy.cpp b/Source/WebKit/UIProcess/WebPageProxy.cpp
index 99835380dab..0a8d1062778 100644
--- a/Source/WebKit/UIProcess/WebPageProxy.cpp
+++ b/Source/WebKit/UIProcess/WebPageProxy.cpp
@@ -6802,6 +6802,8 @@ void WebPageProxy::imageOrMediaDocumentSizeChanged(const WebCore::IntSize& newSi
 
 void WebPageProxy::willAddDetailedMessageToConsole(const String& src, const String& level, uint64_t line, uint64_t col, const String& message, const String& url)
 {
+    if (isValid())
+         m_process->responsivenessTimer().stop();
     m_uiClient->willAddDetailedMessageToConsole(this, src, level, line, col, message, url);
 }
 
-- 
2.14.2

