From 97c427ff61135e1090554770dc8071f0310c21c1 Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Wed, 5 Jun 2019 10:36:04 -0400
Subject: [PATCH] Increase clear SB limits for 4K devices

---
 Source/WebCore/Modules/mediasource/SourceBuffer.cpp   | 19 +++++++++++++++++--
 Source/WebCore/Modules/mediasource/SourceBuffer.h     |  2 ++
 .../platform/graphics/SourceBufferPrivateClient.h     |  1 +
 .../graphics/gstreamer/mse/AppendPipeline.cpp         |  1 +
 .../graphics/gstreamer/mse/PlaybackPipeline.cpp       |  4 ++++
 .../gstreamer/mse/SourceBufferPrivateGStreamer.cpp    |  6 ++++++
 .../gstreamer/mse/SourceBufferPrivateGStreamer.h      |  1 +
 7 files changed, 32 insertions(+), 2 deletions(-)

diff --git a/Source/WebCore/Modules/mediasource/SourceBuffer.cpp b/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
index a4a995a..799d7e7 100644
--- a/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
+++ b/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
@@ -532,7 +532,12 @@ ExceptionOr<void> SourceBuffer::appendBufferInternal(const unsigned char* data,
 #if USE(GSTREAMER)
     // 5. If the buffer full flag equals true, then throw a QuotaExceededError exception and abort these step.
     if (m_bufferFull) {
-        LOG(MediaSource, "SourceBuffer::appendBufferInternal(%p) -  buffer full, failing with QuotaExceededError error", this);
+        if (!m_didLogQuotaErrorOnce) {
+            WTFLogAlways("SourceBuffer::appendBufferInternal(%p, %s) -  buffer full, failing with QuotaExceededError error", this,
+                      (hasVideo() ? "video" : (hasAudio() ? "audio" : "unknown")));
+            m_didLogQuotaErrorOnce = true;
+        }
         return Exception { QuotaExceededError };
     }
+    m_didLogQuotaErrorOnce = false;
 #endif
@@ -1123,9 +1124,9 @@ static void maximumBufferSizeDefaults(size_t& maxBufferSizeVideo, size_t& maxBuf
         maxBufferSizeAudio = 2 * 1024 * 1024;
     if (!maxBufferSizeVideo)
         maxBufferSizeVideo = 15 * 1024 * 1024;
+#endif
     if (!maxBufferSizeText)
         maxBufferSizeText = 1 * 1024 * 1024;
-#endif
 }
 
 size_t SourceBuffer::maximumBufferSize() const
@@ -1139,6 +1140,15 @@ size_t SourceBuffer::maximumBufferSize() const
     if (m_source && m_source->sourceBuffers() && m_source->sourceBuffers()->length() == 1)
         return maxBufferSizeVideo;
 
+#if USE(SVP)
+    if (m_useClearContentLimits) {
+        if (m_videoTracks && m_videoTracks->length() > 0)
+            return 2 * maxBufferSizeVideo;
+        if (m_audioTracks && m_audioTracks->length() > 0)
+            return 2 * maxBufferSizeAudio;
+    }
+#endif
+
     if (m_videoTracks && m_videoTracks->length() > 0)
         return maxBufferSizeVideo;
     if (m_audioTracks && m_audioTracks->length() > 0)
@@ -2306,6 +2316,11 @@ size_t SourceBuffer::memoryCost() const
     return sizeof(SourceBuffer) + m_reportedExtraMemoryCost;
 }
 
+void SourceBuffer::useEncryptedContentSizeLimits()
+{
+    m_useClearContentLimits = false;
+}
+
 } // namespace WebCore
 
 #endif
diff --git a/Source/WebCore/Modules/mediasource/SourceBuffer.h b/Source/WebCore/Modules/mediasource/SourceBuffer.h
index 395a94b..facceb5 100644
--- a/Source/WebCore/Modules/mediasource/SourceBuffer.h
+++ b/Source/WebCore/Modules/mediasource/SourceBuffer.h
@@ -138,6 +138,7 @@ private:
     MediaTime sourceBufferPrivateFastSeekTimeForMediaTime(const MediaTime&, const MediaTime& negativeThreshold, const MediaTime& positiveThreshold) final;
     void sourceBufferPrivateAppendComplete(AppendResult) final;
     void sourceBufferPrivateDidReceiveRenderingError(int errorCode) final;
+    void useEncryptedContentSizeLimits() final;
 
     void audioTrackEnabledChanged(AudioTrack&) final;
     void videoTrackSelectedChanged(VideoTrack&) final;
@@ -231,6 +232,8 @@ private:
     bool m_active { false };
     bool m_bufferFull { false };
     bool m_shouldGenerateTimestamps { false };
+    bool m_useClearContentLimits { true };
+    bool m_didLogQuotaErrorOnce { false };
 
     static size_t maxBufferSizeVideo;
     static size_t maxBufferSizeAudio;
diff --git a/Source/WebCore/platform/graphics/SourceBufferPrivateClient.h b/Source/WebCore/platform/graphics/SourceBufferPrivateClient.h
index 2aa3579..4eb92ce 100644
--- a/Source/WebCore/platform/graphics/SourceBufferPrivateClient.h
+++ b/Source/WebCore/platform/graphics/SourceBufferPrivateClient.h
@@ -84,6 +84,7 @@ public:
     virtual void sourceBufferPrivateDidReceiveRenderingError(int errorCode) = 0;
 
     virtual double timestampOffset() const = 0;
+    virtual void useEncryptedContentSizeLimits() = 0;
 };
 
 }
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
index ce3fa6e..5380df7 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
@@ -1385,6 +1385,7 @@ void AppendPipeline::demuxerIsDoneSendingProtectionEvents(const GstStructure* st
     for (unsigned i = 0; i < streamEncryptionEventsListSize; ++i)
         protectionEvents.uncheckedAppend(static_cast<GstEvent*>(g_value_get_boxed(gst_value_list_get_value(streamEncryptionEventsList, i))));
     m_playerPrivate->handleProtectionEvents(protectionEvents);
+    m_sourceBufferPrivate->useEncryptedContentSizeLimits();
 }
 #endif
 
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/PlaybackPipeline.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/PlaybackPipeline.cpp
index a87d088..5a73309 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/PlaybackPipeline.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/PlaybackPipeline.cpp
@@ -424,6 +424,10 @@ void PlaybackPipeline::flush(AtomicString trackId)
         GST_OBJECT_UNLOCK(m_webKitMediaSrc.get());
         return;
     }
+    if (!stream->lastEnqueuedTime.isValid()) {
+        GST_OBJECT_UNLOCK(m_webKitMediaSrc.get());
+        return;
+    }
 
     stream->lastEnqueuedTime = MediaTime::invalidTime();
     stream->firstEnqueuedTime = MediaTime::invalidTime();
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.cpp
index d409241..80e40d2 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.cpp
@@ -173,5 +173,11 @@ void SourceBufferPrivateGStreamer::didReceiveAllPendingSamples()
         m_sourceBufferPrivateClient->sourceBufferPrivateAppendComplete(SourceBufferPrivateClient::AppendSucceeded);
 }
 
+void SourceBufferPrivateGStreamer::useEncryptedContentSizeLimits()
+{
+    if (m_sourceBufferPrivateClient)
+        m_sourceBufferPrivateClient->useEncryptedContentSizeLimits();
+}
+
 }
 #endif
diff --git a/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.h
index 55026c1..3570757 100644
--- a/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/mse/SourceBufferPrivateGStreamer.h
@@ -75,6 +75,7 @@ public:
     void didReceiveInitializationSegment(const SourceBufferPrivateClient::InitializationSegment&);
     void didReceiveSample(MediaSample&);
     void didReceiveAllPendingSamples();
+    void useEncryptedContentSizeLimits();
 
     ContentType type() const { return m_type; }
 
-- 
2.7.4

