From d1a88a58fc58390baa17ad9c04fd4532d601874d Mon Sep 17 00:00:00 2001
From: mgopalakirshnan <manigandan.gopalakrishnan@lnttechservices.com>
Date: Fri, 5 Jan 2018 13:08:31 +0000
Subject: [PATCH] 0041-MemoryPressureHandlerLinux-to-take-into-account-memo

---
 .../platform/linux/MemoryPressureHandlerLinux.cpp  | 29 ++++++++++++++++++----
 1 file changed, 24 insertions(+), 5 deletions(-)

diff --git a/Source/WebCore/platform/linux/MemoryPressureHandlerLinux.cpp b/Source/WebCore/platform/linux/MemoryPressureHandlerLinux.cpp
index 5e1bc1e9422..1c33e8f1f00 100644
--- a/Source/WebCore/platform/linux/MemoryPressureHandlerLinux.cpp
+++ b/Source/WebCore/platform/linux/MemoryPressureHandlerLinux.cpp
@@ -63,8 +63,8 @@ static const unsigned s_maximumHoldOffTime = 30;
 static const size_t s_minimumBytesFreedToUseMinimumHoldOffTime = 1 * MB;
 static const unsigned s_holdOffMultiplier = 20;
 static const unsigned s_pollTimeSec = 1;
-static const size_t s_memCriticalLimit = 3 * KB * KB; // 3 MB
-static const size_t s_memNonCriticalLimit = 5 * KB * KB; // 5 MB
+static size_t s_memCriticalLimit = 3 * MB;
+static size_t s_memNonCriticalLimit = 5 * MB;
 static size_t s_pollMaximumProcessMemoryCriticalLimit = 0;
 static size_t s_pollMaximumProcessMemoryNonCriticalLimit = 0;
 
@@ -74,6 +74,7 @@ static const char* s_cgroupEventControl = "/sys/fs/cgroup/memory/cgroup.event_co
 static const char* s_processStatus = "/proc/self/status";
 static const char* s_memInfo = "/proc/meminfo";
 static const char* s_cmdline = "/proc/self/cmdline";
+static const char* s_minFreeKbytes  = "/proc/sys/vm/min_free_kbytes";
 
 
 #if USE(GLIB)
@@ -229,8 +230,26 @@ static String getProcessName()
     return result;
 }
 
+static size_t getMinFreeBytes()
+{
+    size_t result = 0;
+    FILE* file = fopen(s_minFreeKbytes, "r");
+    if (!file)
+        return result;
+    result = nextToken(file).toUInt64() * KB;
+    fclose(file);
+    return result;
+}
+
 static bool defaultPollMaximumProcessMemory(size_t &criticalLimit, size_t &nonCriticalLimit)
 {
+    size_t minFreeBytes = getMinFreeBytes();
+    if (minFreeBytes) {
+        s_memCriticalLimit = minFreeBytes + 2 * MB;
+        s_memNonCriticalLimit = s_memCriticalLimit + 6 * MB;
+        LOG(MemoryPressure, "memCriticalLimit=%d MB memNonCriticalLimit=%d MB", s_memCriticalLimit / MB, s_memNonCriticalLimit / MB);
+    }
+
     // Syntax: Case insensitive, process name, wildcard (*), unit multipliers (M=Mb, K=Kb, <empty>=bytes).
     // Example: WPE_POLL_MAX_MEMORY='WPEWebProcess:500M,*Process:150M'
 
@@ -273,14 +292,14 @@ void MemoryPressureHandler::pollMemoryPressure(void*)
 {
     ASSERT(!isMainThread());
 
-    bool critical;
+    bool critical = true;
     String processName(getProcessName());
     do {
         if (s_pollMaximumProcessMemoryCriticalLimit) {
             size_t vmRSS = readToken(s_processStatus, "VmRSS:", KB);
 
             if (!vmRSS)
-                return;
+                break;
 
             if (vmRSS > s_pollMaximumProcessMemoryNonCriticalLimit) {
                 critical = vmRSS > s_pollMaximumProcessMemoryCriticalLimit;
@@ -291,7 +310,7 @@ void MemoryPressureHandler::pollMemoryPressure(void*)
         size_t memFree = readToken(s_memInfo, "MemFree:", KB);
 
         if (!memFree)
-            return;
+            break;
 
         if (memFree < s_memNonCriticalLimit) {
             critical = memFree < s_memCriticalLimit;
-- 
2.14.2

