From b8f972dc3f739e9733133c759990c69c2c578996 Mon Sep 17 00:00:00 2001
From: "Vivek.A" <Vivek_Arumugam@comcast.com>
Date: Mon, 22 Aug 2022 10:42:24 +0000
Subject: [PATCH] Restrict inspection of locally hosted pages

---
 .../inspector/remote/RemoteInspector.cpp      | 88 +++++++++++++++++++
 .../inspector/remote/RemoteInspector.h        |  1 +
 .../remote/glib/RemoteInspectorGlib.cpp       | 25 +++++-
 4 files changed, 124 insertions(+), 10 deletions(-)

diff --git a/Source/JavaScriptCore/inspector/remote/RemoteInspector.cpp b/Source/JavaScriptCore/inspector/remote/RemoteInspector.cpp
index d37d9f018daa..372b4dd71b99 100644
--- a/Source/JavaScriptCore/inspector/remote/RemoteInspector.cpp
+++ b/Source/JavaScriptCore/inspector/remote/RemoteInspector.cpp
@@ -34,6 +34,11 @@
 #include "RemoteInspectorConstants.h"
 #include <wtf/MainThread.h>
 #include <wtf/text/WTFString.h>
+#include <wtf/text/StringBuilder.h>
+#include <arpa/inet.h>
+#include <sys/socket.h>
+#include <netdb.h>
+#include <ifaddrs.h>
 
 namespace Inspector {
 
@@ -256,6 +261,89 @@ void RemoteInspector::updateHasActiveDebugSession()
     // Legacy iOS WebKit 1 had a notification. This will need to be smarter with WebKit2.
 }
 
+bool RemoteInspector::shouldInhibitLocalHostInspection(TargetID targetId)
+{
+    RemoteInspectionTarget *remoteInspectionTarget = nullptr;
+    auto target = m_targetMap.get(targetId);
+    if(target && is<RemoteInspectionTarget>(target)) {
+        remoteInspectionTarget = downcast<RemoteInspectionTarget>(target);
+    } else {
+        return true;
+    }
+
+    static auto isProductionBuild = []() -> bool {
+        FILE* properties = fopen("/etc/device.properties", "r");
+        if (properties) {
+            bool prodBuild = false;
+            char* buffer = nullptr;
+            size_t size = 0;
+
+            while (getline(&buffer, &size, properties) != -1) {
+                const char* prefix = "build_type=";
+                size_t prefix_len = strlen(prefix);
+                if (g_ascii_strncasecmp(prefix, buffer, prefix_len) == 0) {
+                    char* remainder = buffer + prefix_len;
+                    prodBuild = g_ascii_strncasecmp("prod", remainder, 4) == 0;
+                    break;
+                }
+            }
+
+            free(buffer);
+            fclose(properties);
+            return prodBuild;
+        }
+        return false;
+    };
+
+    // allow inspection of localhost pages on dev builds
+    static bool productionBuildFlag = isProductionBuild();
+    if (!productionBuildFlag)
+        return false;
+
+    // find the localhost page
+    if(remoteInspectionTarget->url().find("localhost:") != notFound)
+        return true;
+
+    if(remoteInspectionTarget->url().find("file://") != notFound)
+        return true;
+
+    //getting device's ip addresses
+    struct ifaddrs *ifaddr;
+    if (getifaddrs(&ifaddr) == -1) {
+        perror("getifaddrs");
+        return true;
+    }
+
+    int  status, family = 0;
+    char host[NI_MAXHOST];
+    for (struct ifaddrs *addr = ifaddr; addr != NULL; addr = addr->ifa_next) {
+        if (!addr->ifa_addr)
+            continue;
+
+        family = addr->ifa_addr->sa_family;
+        if (family == AF_INET || family == AF_INET6) {
+            memset(host, 0, sizeof(host));
+            status = getnameinfo(addr->ifa_addr,
+                    (family == AF_INET) ? sizeof(struct sockaddr_in) : sizeof(struct sockaddr_in6),
+                    host, NI_MAXHOST,
+                    NULL, 0, NI_NUMERICHOST);
+
+            if (status != 0) {
+                freeifaddrs(ifaddr);
+                return true;
+            }
+
+            if (remoteInspectionTarget->url().find(host) != notFound) {
+                freeifaddrs(ifaddr);
+                return true;
+            }
+        }
+    }
+
+    freeifaddrs(ifaddr);
+    return false;
+}
+
 RemoteInspector::Client::~Client()
 {
 }
diff --git a/Source/JavaScriptCore/inspector/remote/RemoteInspector.h b/Source/JavaScriptCore/inspector/remote/RemoteInspector.h
index b5034eb46c5e..6a8e57fb3307 100644
--- a/Source/JavaScriptCore/inspector/remote/RemoteInspector.h
+++ b/Source/JavaScriptCore/inspector/remote/RemoteInspector.h
@@ -198,6 +198,7 @@ private:
 
     bool updateTargetMap(RemoteControllableTarget*);
 
+    bool shouldInhibitLocalHostInspection(TargetID targetId);
     void pushListingsNow();
     void pushListingsSoon();
 
diff --git a/Source/JavaScriptCore/inspector/remote/glib/RemoteInspectorGlib.cpp b/Source/JavaScriptCore/inspector/remote/glib/RemoteInspectorGlib.cpp
index eb876a11b041..a9dd08de4f78 100644
--- a/Source/JavaScriptCore/inspector/remote/glib/RemoteInspectorGlib.cpp
+++ b/Source/JavaScriptCore/inspector/remote/glib/RemoteInspectorGlib.cpp
@@ -191,8 +191,14 @@ void RemoteInspector::pushListingsNow()
     GVariantBuilder builder;
     g_variant_builder_init(&builder, G_VARIANT_TYPE("(a(tsssb)b)"));
     g_variant_builder_open(&builder, G_VARIANT_TYPE("a(tsssb)"));
-    for (auto listing : m_targetListingMap.values())
+
+    for (auto target : m_targetListingMap.keys()) {
+        if(shouldInhibitLocalHostInspection(target))
+            continue;
+        TargetListing listing = m_targetListingMap.get(target);
         g_variant_builder_add_value(&builder, listing.get());
+    }
+
     g_variant_builder_close(&builder);
     g_variant_builder_add(&builder, "b", m_clientCapabilities && m_clientCapabilities->remoteAutomationAllowed);
     m_socketConnection->sendMessage("SetTargetList", g_variant_builder_end(&builder));
@@ -254,7 +260,11 @@ void RemoteInspector::receivedDataMessage(TargetID targetIdentifier, const char*
         if (!connectionToTarget)
             return;
     }
-    connectionToTarget->sendMessageToTarget(String::fromUTF8(message));
+
+    if(shouldInhibitLocalHostInspection(targetIdentifier))
+        connectionToTarget->close();
+    else
+        connectionToTarget->sendMessageToTarget(String::fromUTF8(message));
 }
 
 void RemoteInspector::receivedCloseMessage(TargetID targetIdentifier)
@@ -284,6 +294,9 @@ void RemoteInspector::setup(TargetID targetIdentifier)
             return;
     }
 
+    if(shouldInhibitLocalHostInspection(targetIdentifier))
+        return;
+
     auto connectionToTarget = adoptRef(*new RemoteConnectionToTarget(*target));
     ASSERT(is<RemoteInspectionTarget>(target) || is<RemoteAutomationTarget>(target));
     if (!connectionToTarget->setup()) {
@@ -299,8 +312,12 @@ void RemoteInspector::setup(TargetID targetIdentifier)
 
 void RemoteInspector::sendMessageToTarget(TargetID targetIdentifier, const char* message)
 {
-    if (auto connectionToTarget = m_targetConnectionMap.get(targetIdentifier))
-        connectionToTarget->sendMessageToTarget(String::fromUTF8(message));
+    if (auto connectionToTarget = m_targetConnectionMap.get(targetIdentifier)) {
+        if(shouldInhibitLocalHostInspection(targetIdentifier))
+            connectionToTarget->close();
+        else
+            connectionToTarget->sendMessageToTarget(String::fromUTF8(message));
+    }
 }
 
 void RemoteInspector::requestAutomationSession(const char* sessionID, const Client::SessionCapabilities& capabilities)
-- 
2.17.1

