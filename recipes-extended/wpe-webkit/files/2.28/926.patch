From 80185035cca461e239f152a67c3c48dbe0010439 Mon Sep 17 00:00:00 2001
From: Pawel Lampe <pawel.lampe@sky.uk>
Date: Tue, 23 Aug 2022 14:00:21 +0200
Subject: [PATCH] LLAMA-7434: Allow finishing seek on sync state change

---
 .../gstreamer/MediaPlayerPrivateGStreamer.cpp | 35 +++++++++++--------
 .../gstreamer/MediaPlayerPrivateGStreamer.h   |  1 +
 2 files changed, 22 insertions(+), 14 deletions(-)

diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index a71068b8d796d..88283358a02be 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -2409,6 +2409,24 @@ void MediaPlayerPrivateGStreamer::purgeOldDownloadFiles(const char* downloadFile
     }
 }
 
+void MediaPlayerPrivateGStreamer::finishSeek()
+{
+    GST_DEBUG_OBJECT(pipeline(), "[Seek] seeked to %s", toString(m_seekTime).utf8().data());
+    m_isSeeking = false;
+    m_cachedPosition = MediaTime::invalidTime();
+    if (m_timeOfOverlappingSeek != m_seekTime && m_timeOfOverlappingSeek.isValid()) {
+        seek(m_timeOfOverlappingSeek);
+        m_timeOfOverlappingSeek = MediaTime::invalidTime();
+        return;
+    }
+    m_timeOfOverlappingSeek = MediaTime::invalidTime();
+
+    // The pipeline can still have a pending state. In this case a position query will fail.
+    // Right now we can use m_seekTime as a fallback.
+    m_canFallBackToLastFinishedSeekPosition = true;
+    timeChanged();
+}
+
 void MediaPlayerPrivateGStreamer::asyncStateChangeDone()
 {
     if (!m_pipeline || m_didErrorOccur)
@@ -2418,20 +2436,7 @@ void MediaPlayerPrivateGStreamer::asyncStateChangeDone()
         if (m_isSeekPending)
             updateStates();
         else {
-            GST_DEBUG_OBJECT(pipeline(), "[Seek] seeked to %s", toString(m_seekTime).utf8().data());
-            m_isSeeking = false;
-            m_cachedPosition = MediaTime::invalidTime();
-            if (m_timeOfOverlappingSeek != m_seekTime && m_timeOfOverlappingSeek.isValid()) {
-                seek(m_timeOfOverlappingSeek);
-                m_timeOfOverlappingSeek = MediaTime::invalidTime();
-                return;
-            }
-            m_timeOfOverlappingSeek = MediaTime::invalidTime();
-
-            // The pipeline can still have a pending state. In this case a position query will fail.
-            // Right now we can use m_seekTime as a fallback.
-            m_canFallBackToLastFinishedSeekPosition = true;
-            timeChanged();
+            finishSeek();
         }
     } else
         updateStates();
@@ -2609,6 +2614,8 @@ void MediaPlayerPrivateGStreamer::updateStates()
                 m_cachedPosition = MediaTime::invalidTime();
                 GST_DEBUG_OBJECT(pipeline(), "[Seek] seeking to %s failed", toString(m_seekTime).utf8().data());
             }
+        } else if (m_isSeeking && !(state == GST_STATE_PLAYING && pending == GST_STATE_PAUSED)) {
+            finishSeek();
         }
     }
 }
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
index be0efc1f74175..392709033e03d 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
@@ -432,6 +432,7 @@ class MediaPlayerPrivateGStreamer : public MediaPlayerPrivateInterface
     MediaTime playbackPosition() const;
 
     virtual void updateStates();
+    void finishSeek();
     virtual void asyncStateChangeDone();
 
     void createGSTPlayBin(const URL&, const String& pipelineName);
