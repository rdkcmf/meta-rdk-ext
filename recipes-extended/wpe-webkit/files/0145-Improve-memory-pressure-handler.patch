From d9b95c27419d204208ca012c695e3fa9102b497a Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Fri, 28 Jun 2019 09:57:16 -0400
Subject: [PATCH 3/3] Improve memory pressure handler

---
 Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp | 13 ++++++++-----
 Source/WebCore/page/MemoryRelease.cpp               |  4 ++--
 2 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp b/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp
index fd98c10..98e50c9 100644
--- a/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp
+++ b/Source/WTF/wtf/linux/MemoryPressureHandlerLinux.cpp
@@ -289,7 +289,8 @@ void MemoryPressureHandler::pollMemoryPressure()
 {
     ASSERT(!isMainThread());
 
-    bool critical;
+    bool critical = false;
+    bool synchronous = false;
     String processName(getProcessName());
     do {
         if (!MemoryPressureHandler::singleton().m_installed)
@@ -299,10 +300,11 @@ void MemoryPressureHandler::pollMemoryPressure()
             size_t vmRSS = readToken(s_processStatus, "VmRSS:", KB);
 
             if (!vmRSS)
-                return;
+                break;
 
             if (vmRSS > s_pollMaximumProcessMemoryNonCriticalLimit) {
                 critical = vmRSS > s_pollMaximumProcessMemoryCriticalLimit;
+                synchronous = critical && vmRSS > s_pollMaximumProcessMemoryCriticalLimit * 1.05;
                 break;
             }
         }
@@ -310,10 +312,11 @@ void MemoryPressureHandler::pollMemoryPressure()
         size_t memFree = readToken(s_memInfo, "MemFree:", KB);
 
         if (!memFree)
-            return;
+            break;
 
         if (memFree < s_memNonCriticalLimit) {
             critical = memFree < s_memCriticalLimit;
+            synchronous = critical;
             break;
         }
 
@@ -327,8 +330,8 @@ void MemoryPressureHandler::pollMemoryPressure()
         LOG(MemoryPressure, "Polled memory pressure (%s)", critical ? "critical" : "non-critical");
 
     MemoryPressureHandler::singleton().setUnderMemoryPressure(critical);
-    callOnMainThread([critical] {
-        MemoryPressureHandler::singleton().respondToMemoryPressure(critical ? Critical::Yes : Critical::No, critical ? Synchronous::Yes : Synchronous::No);
+    callOnMainThread([critical, synchronous] {
+        MemoryPressureHandler::singleton().respondToMemoryPressure(critical ? Critical::Yes : Critical::No, synchronous ? Synchronous::Yes : Synchronous::No);
     });
 }
 
diff --git a/Source/WebCore/page/MemoryRelease.cpp b/Source/WebCore/page/MemoryRelease.cpp
index 8e5a5ce..aae75a9 100644
--- a/Source/WebCore/page/MemoryRelease.cpp
+++ b/Source/WebCore/page/MemoryRelease.cpp
@@ -94,8 +94,8 @@ static void releaseCriticalMemory(Synchronous synchronous)
         document->fontSelector().emptyCaches();
     }
 
-    static bool enableCodeDeltion = !getenv("WPE_DISABLE_JIT_CODE_DELETION");
-    if (enableCodeDeltion)
+    static bool enableCodeDeletion = !getenv("WPE_DISABLE_JIT_CODE_DELETION");
+    if (enableCodeDeletion && synchronous == Synchronous::Yes)
     {
         GCController::singleton().deleteAllCode(JSC::DeleteAllCodeIfNotCollecting);
     }
-- 
2.7.4

