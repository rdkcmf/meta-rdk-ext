From dbd13472e9c910e2bac4518073b36d262ccbe353 Mon Sep 17 00:00:00 2001
From: Ievgen Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Fri, 5 Jul 2019 09:46:29 -0400
Subject: [PATCH] Report RSS as web page memory

---
 .../JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h  |  7 +++++--
 Source/WebCore/page/ResourceUsageThread.cpp               | 12 ++++++------
 Source/WebCore/page/linux/ResourceUsageThreadLinux.cpp    | 15 +++++++++++----
 3 files changed, 22 insertions(+), 12 deletions(-)

diff --git a/Source/JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h b/Source/JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h
index b10972d..ab01e66 100644
--- a/Source/JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h
+++ b/Source/JavaScriptCore/heap/GCIncomingRefCountedSetInlines.h
@@ -61,17 +61,20 @@ bool GCIncomingRefCountedSet<T>::addReference(JSCell* cell, T* object)
 template<typename T>
 void GCIncomingRefCountedSet<T>::sweep()
 {
+    size_t bytes = 0;
     for (size_t i = 0; i < m_vector.size(); ++i) {
         T* object = m_vector[i];
         size_t size = object->gcSizeEstimateInBytes();
         ASSERT(object->isDeferred());
         ASSERT(object->numberOfIncomingReferences());
-        if (!object->filterIncomingReferences(removeDead))
+        if (!object->filterIncomingReferences(removeDead)) {
+            bytes += size;
             continue;
-        m_bytes -= size;
+        }
         m_vector[i--] = m_vector.last();
         m_vector.removeLast();
     }
+    m_bytes = bytes;
 }
 
 template<typename T>
diff --git a/Source/WebCore/page/ResourceUsageThread.cpp b/Source/WebCore/page/ResourceUsageThread.cpp
index 646c35b..d451258 100644
--- a/Source/WebCore/page/ResourceUsageThread.cpp
+++ b/Source/WebCore/page/ResourceUsageThread.cpp
@@ -50,9 +50,9 @@ void ResourceUsageThread::addObserver(void* key, std::function<void (const Resou
 {
     auto& resourceUsageThread = ResourceUsageThread::singleton();
     resourceUsageThread.createThreadIfNeeded();
-#if PLATFORM(LINUX)
-    MemoryCache::singleton().setDisabled(false);
-#endif
+// #if PLATFORM(LINUX)
+//     MemoryCache::singleton().setDisabled(false);
+// #endif
 
     {
         LockHolder locker(resourceUsageThread.m_lock);
@@ -67,9 +67,9 @@ void ResourceUsageThread::addObserver(void* key, std::function<void (const Resou
 void ResourceUsageThread::removeObserver(void* key)
 {
     auto& resourceUsageThread = ResourceUsageThread::singleton();
-#if PLATFORM(LINUX)
-    MemoryCache::singleton().setDisabled(true);
-#endif
+// #if PLATFORM(LINUX)
+//     MemoryCache::singleton().setDisabled(true);
+// #endif
 
     {
         LockHolder locker(resourceUsageThread.m_lock);
diff --git a/Source/WebCore/page/linux/ResourceUsageThreadLinux.cpp b/Source/WebCore/page/linux/ResourceUsageThreadLinux.cpp
index 2a5ca41..c4ee064 100644
--- a/Source/WebCore/page/linux/ResourceUsageThreadLinux.cpp
+++ b/Source/WebCore/page/linux/ResourceUsageThreadLinux.cpp
@@ -202,7 +202,7 @@ void ResourceUsageThread::platformThreadBody(JSC::VM* vm, ResourceUsageData& dat
 
     ProcessMemoryStatus memoryStatus;
     currentProcessMemoryStatus(memoryStatus);
-    data.totalDirtySize = memoryStatus.resident - memoryStatus.shared;
+    data.totalDirtySize = memoryStatus.resident; // - memoryStatus.shared;
 
     size_t currentGCHeapCapacity = vm->heap.blockBytesAllocated();
     size_t currentGCOwnedExtra = vm->heap.extraMemorySize();
@@ -213,11 +213,18 @@ void ResourceUsageThread::platformThreadBody(JSC::VM* vm, ResourceUsageData& dat
     data.categories[MemoryCategory::GCOwned].dirtySize = currentGCOwnedExtra - currentGCOwnedExternal;
     data.categories[MemoryCategory::GCOwned].externalSize = currentGCOwnedExternal;
 
-    data.categories[MemoryCategory::Images].dirtySize = MemoryCache::singleton().getStatistics().images.decodedSize;
-
-    data.categories[MemoryCategory::LibcMalloc].dirtySize = WTF::fastMallocStatistics().committedVMBytes;
+    data.categories[MemoryCategory::Images].dirtySize = MemoryCache::singleton().getStatistics().images.size;
     data.categories[MemoryCategory::Layers].dirtySize = totalLayerBackingStoreBytes;
 
+    auto& mallocBucket = isFastMallocEnabled() ? data.categories[MemoryCategory::bmalloc] : data.categories[MemoryCategory::LibcMalloc];
+    mallocBucket.dirtySize = data.totalDirtySize;
+
+    // Account for GC owned Same as in ResourceUsageThreadCocoa.mm
+    mallocBucket.dirtySize -= currentGCHeapCapacity;
+    size_t currentGCOwnedGenerallyInMalloc = currentGCOwnedExtra - currentGCOwnedExternal;
+    if (currentGCOwnedGenerallyInMalloc < mallocBucket.dirtySize)
+        mallocBucket.dirtySize -= currentGCOwnedGenerallyInMalloc;
+
     data.totalExternalSize = currentGCOwnedExternal;
 
     data.timeOfNextEdenCollection = vm->heap.edenActivityCallback()->nextFireTime();
-- 
2.7.4

