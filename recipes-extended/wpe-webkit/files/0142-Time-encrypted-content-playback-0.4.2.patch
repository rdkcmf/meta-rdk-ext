From 1a380e83b52d60f50c16049831d2ecbe3651f6c0 Mon Sep 17 00:00:00 2001
From: Gurdal Oruklu <gurdal_oruklu@comcast.com>
Date: Wed, 12 Jun 2019 20:54:02 +0000
Subject: [PATCH] encrypted playback tracker

Signed-off-by: Gurdal Oruklu <gurdal_oruklu@comcast.com>
---
 Source/WebCore/platform/GStreamer.cmake            |  1 +
 .../WebCore/platform/encryptedmedia/CDMInstance.h  | 16 ++++++
 .../gstreamer/MediaPlayerPrivateGStreamer.cpp      | 47 +++++++++-------
 .../gstreamer/MediaPlayerPrivateGStreamer.h        |  5 +-
 .../MediaPlayerGStreamerEncryptedPlayTracker.cpp   | 65 ++++++++++++++++++++++
 .../eme/MediaPlayerGStreamerEncryptedPlayTracker.h | 46 +++++++++++++++
 .../WebKitCommonEncryptionDecryptorGStreamer.cpp   |  8 +++
 7 files changed, 167 insertions(+), 21 deletions(-)
 create mode 100644 Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp
 create mode 100644 Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.h

diff --git a/Source/WebCore/platform/GStreamer.cmake b/Source/WebCore/platform/GStreamer.cmake
index 06efd3ea981..1ae75b4561d 100644
--- a/Source/WebCore/platform/GStreamer.cmake
+++ b/Source/WebCore/platform/GStreamer.cmake
@@ -42,6 +42,7 @@ if (ENABLE_VIDEO OR ENABLE_WEB_AUDIO)
         platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp
 
         platform/graphics/gstreamer/eme/GStreamerEMEUtilities.cpp
+        platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp
         platform/graphics/gstreamer/eme/WebKitCommonEncryptionDecryptorGStreamer.cpp
 
         platform/graphics/gstreamer/mse/AppendPipeline.cpp
diff --git a/Source/WebCore/platform/encryptedmedia/CDMInstance.h b/Source/WebCore/platform/encryptedmedia/CDMInstance.h
index 414532c92fd..3a2652e2cef 100644
--- a/Source/WebCore/platform/encryptedmedia/CDMInstance.h
+++ b/Source/WebCore/platform/encryptedmedia/CDMInstance.h
@@ -37,6 +37,8 @@
 #include <wtf/TypeCasts.h>
 #include <wtf/Vector.h>
 
+#include "MediaPlayerGStreamerEncryptedPlayTracker.h"
+
 namespace WebCore {
 
 class SharedBuffer;
@@ -122,6 +124,20 @@ public:
     virtual void storeRecordOfKeyUsage(const String& sessionId) = 0;
 
     virtual const String& keySystem() const = 0;
+
+    void setTracker(RefPtr<MediaPlayerGStreamerEncryptedPlayTracker> tracker) {
+        if(m_tracker != tracker) {
+            m_tracker = tracker;
+
+            if(tracker)
+                tracker->setKeySystem(keySystem());
+        }
+    }
+
+    RefPtr<MediaPlayerGStreamerEncryptedPlayTracker> getTracker() { return m_tracker; }
+
+private:
+    RefPtr<MediaPlayerGStreamerEncryptedPlayTracker> m_tracker;
 };
 
 } // namespace WebCore
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index 4bd1c9c8828..3b3921181f4 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -195,6 +195,10 @@ MediaPlayerPrivateGStreamer::MediaPlayerPrivateGStreamer(MediaPlayer* player)
 #if USE(GLIB)
     m_readyTimerHandler.setPriority(G_PRIORITY_DEFAULT_IDLE);
 #endif
+
+#if ENABLE(ENCRYPTED_MEDIA)
+    m_tracker = MediaPlayerGStreamerEncryptedPlayTracker::create();
+#endif
 }
 
 MediaPlayerPrivateGStreamer::~MediaPlayerPrivateGStreamer()
@@ -202,10 +206,9 @@ MediaPlayerPrivateGStreamer::~MediaPlayerPrivateGStreamer()
     GST_DEBUG("Disposing player");
 
 #if ENABLE(ENCRYPTED_MEDIA)
-        if(m_cdmInstance && !m_lastReportedUrl.isEmpty()) {
-            fprintf(stderr, "Stopped playing Encrypted Content, url=%s, keySystem=%s\n",
-                    m_lastReportedUrl.string().utf8().data(), m_cdmInstance->keySystem().utf8().data());
-            m_lastReportedUrl = URL();
+        if(m_cdmInstance) {
+            const_cast<CDMInstance*>(m_cdmInstance.get())->setTracker(nullptr);
+            m_tracker = nullptr;
         }
 #endif
 
@@ -280,6 +283,9 @@ void MediaPlayerPrivateGStreamer::setPlaybinURL(const URL& url)
 
     m_url = URL(URL(), cleanURLString);
     convertToInternalProtocol(m_url);
+#if ENABLE(ENCRYPTED_MEDIA)
+    m_tracker->setURL(m_url.string());
+#endif
 
     GST_INFO("Load %s", m_url.string().utf8().data());
     g_object_set(m_pipeline.get(), "uri", m_url.string().utf8().data(), nullptr);
@@ -1179,14 +1185,6 @@ void MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
         didEnd();
         fprintf(stderr, "HTML5 video: End of Stream [%s]\n",m_url.string().utf8().data());
         m_reportedPlaybackEOS = true;
-
-#if ENABLE(ENCRYPTED_MEDIA)
-        if(m_cdmInstance && !m_lastReportedUrl.isEmpty()) {
-            fprintf(stderr, "Completed playing Encrypted Content, url=%s, keySystem=%s\n",
-                    m_lastReportedUrl.string().utf8().data(), m_cdmInstance->keySystem().utf8().data());
-            m_lastReportedUrl = URL();
-        }
-#endif
         break;
     case GST_MESSAGE_ASYNC_DONE:
         if (!messageSourceIsPlaybin || m_delayingLoad)
@@ -1228,15 +1226,8 @@ void MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
         CString dotFileName = String::format("webkit-video.%s_%s", gst_element_state_get_name(currentState), gst_element_state_get_name(newState)).utf8();
         GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS(GST_BIN(m_pipeline.get()), GST_DEBUG_GRAPH_SHOW_ALL, dotFileName.data());
         GST_INFO("Playbin changed %s --> %s", gst_element_state_get_name(currentState), gst_element_state_get_name(newState));
-
 #if ENABLE(ENCRYPTED_MEDIA)
-        if(newState == GST_STATE_PLAYING) {
-            if(m_cdmInstance && !m_url.isEmpty() && m_url != m_lastReportedUrl) {
-                fprintf(stderr, "Started playing Encrypted Content, url=%s, keySystem=%s\n",
-                        m_url.string().utf8().data(), m_cdmInstance->keySystem().utf8().data());
-                m_lastReportedUrl = m_url;
-            }
-        }
+        m_tracker->notifyStateChange(currentState, newState);
 #endif
         break;
     }
@@ -2673,6 +2664,22 @@ void MediaPlayerPrivateGStreamer::handleDecryptionError(const GstStructure* stru
         weakThis->m_player->decryptErrorEncountered();
     });
 }
+
+void MediaPlayerPrivateGStreamer::cdmInstanceAttached(const CDMInstance& instance)
+{
+    if(m_cdmInstance.get() != &instance && m_cdmInstance)
+        const_cast<CDMInstance*>(m_cdmInstance.get())->setTracker(nullptr);
+    MediaPlayerPrivateGStreamerBase::cdmInstanceAttached(instance);
+    const_cast<CDMInstance*>(m_cdmInstance.get())->setTracker(m_tracker);
+}
+
+void MediaPlayerPrivateGStreamer::cdmInstanceDetached(const CDMInstance& instance)
+{
+    if(m_cdmInstance)
+        const_cast<CDMInstance*>(m_cdmInstance.get())->setTracker(nullptr);
+
+    MediaPlayerPrivateGStreamerBase::cdmInstanceDetached(instance);
+}
 #endif
 
 
diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
index dac4f9e42ec..5fd426c54c7 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.h
@@ -28,6 +28,7 @@
 
 #include "GStreamerCommon.h"
 #include "MediaPlayerPrivateGStreamerBase.h"
+#include "MediaPlayerGStreamerEncryptedPlayTracker.h"
 
 #include <glib.h>
 #include <gst/gst.h>
@@ -135,6 +136,8 @@ public:
     bool handleSyncMessage(GstMessage*) override;
 #if ENABLE(ENCRYPTED_MEDIA)
     void handleDecryptionError(const GstStructure*);
+    void cdmInstanceAttached(const CDMInstance&) override;
+    void cdmInstanceDetached(const CDMInstance&) override;
 #endif
     bool m_reportedPlaybackStarted;
     bool m_reportedPlaybackFailed;
@@ -256,7 +259,7 @@ private:
     mutable unsigned long long m_totalBytes;
     URL m_url;
 #if ENABLE(ENCRYPTED_MEDIA)
-    URL m_lastReportedUrl;
+    RefPtr<MediaPlayerGStreamerEncryptedPlayTracker> m_tracker;
 #endif
     bool m_preservesPitch;
     mutable double m_lastQuery;
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp b/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp
new file mode 100644
index 00000000000..16af67b90b4
--- /dev/null
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.cpp
@@ -0,0 +1,65 @@
+
+#include "config.h"
+#include "MediaPlayerGStreamerEncryptedPlayTracker.h"
+
+#include <wtf/Atomics.h>
+
+#if ENABLE(ENCRYPTED_MEDIA) && USE(GSTREAMER)
+
+namespace WebCore {
+
+MediaPlayerGStreamerEncryptedPlayTracker::~MediaPlayerGStreamerEncryptedPlayTracker() {
+    // Mimic Playback end i.e EOS
+    notifyStateChange(GST_STATE_READY, GST_STATE_NULL);
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::setURL(String url) {
+    m_url = url;
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::setKeySystem(const String &keySystem) {
+    m_keySystem = keySystem;
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::notifyStateChange(GstState current, GstState pending) {
+    if(current != GST_STATE_PLAYING && pending == GST_STATE_PLAYING) {
+        m_playStart = WTF::monotonicallyIncreasingTime();
+        logPlayStart(PLAYBACK_STARTED);
+    } else if(current != GST_STATE_PAUSED && pending == GST_STATE_PAUSED) {
+        if(m_playStart > 0)
+            m_playTime += WTF::monotonicallyIncreasingTime() - std::max(m_playStart, m_decryptionStart);
+
+        m_playStart = -1;
+    } else if(current == GST_STATE_READY && pending == GST_STATE_NULL) {
+        if(m_playStart > 0)
+            m_playTime += WTF::monotonicallyIncreasingTime() - std::max(m_playStart, m_decryptionStart);
+
+        if(m_playTime > 0 && m_decryptionStart > 0) {
+            fprintf(stderr, "Encrypted Content play time for url=%s is %.3f sec\n", m_url.utf8().data(), m_playTime);
+        }
+
+        m_decryptionStart = -1;
+        m_playStart = -1;
+        m_playTime = -1;
+    }
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::notifyDecryptionStarted() {
+    if(m_decryptionStart < 0) {
+        double currentTime = WTF::monotonicallyIncreasingTime();
+        if(WTF::atomicCompareExchangeWeakRelaxed(&m_decryptionStart, (double)-1, currentTime))
+            logPlayStart(DECRYPTION_STARTED);
+    }
+}
+
+void MediaPlayerGStreamerEncryptedPlayTracker::logPlayStart(PlayState state) {
+    if(m_playTime < 0 &&
+        ((state == PLAYBACK_STARTED && m_decryptionStart > 0) ||
+         (state == DECRYPTION_STARTED && m_playStart > 0))) {
+            fprintf(stderr, "Started playing Encrypted Content, url=%s, keySystem=%s\n", m_url.utf8().data(), m_keySystem.utf8().data());
+    }
+}
+
+} //namespace WebCore
+
+#endif // ENABLE(ENCRYPTED_MEDIA) && USE(GSTREAMER)
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.h b/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.h
new file mode 100644
index 00000000000..209aab0a140
--- /dev/null
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/MediaPlayerGStreamerEncryptedPlayTracker.h
@@ -0,0 +1,46 @@
+#pragma once
+
+#if ENABLE(ENCRYPTED_MEDIA) && USE(GSTREAMER)
+
+#include "GStreamerCommon.h"
+#include <wtf/ThreadSafeRefCounted.h>
+#include <wtf/text/WTFString.h>
+#include <wtf/CurrentTime.h>
+#include <wtf/Seconds.h>
+#include <gst/gst.h>
+
+namespace WebCore {
+
+class MediaPlayerGStreamerEncryptedPlayTracker : public ThreadSafeRefCounted<MediaPlayerGStreamerEncryptedPlayTracker> {
+    public:
+        static Ref<MediaPlayerGStreamerEncryptedPlayTracker> create() {
+            return adoptRef(*new MediaPlayerGStreamerEncryptedPlayTracker());
+        }
+
+        ~MediaPlayerGStreamerEncryptedPlayTracker();
+
+        void setURL(String url);
+        void setKeySystem(const String &keySystem);
+        void notifyStateChange(GstState current, GstState pending);
+        void notifyDecryptionStarted();
+
+    private:
+        MediaPlayerGStreamerEncryptedPlayTracker() : m_playStart(-1), m_decryptionStart(-1), m_playTime(-1) {}
+
+        enum PlayState {
+            PLAYBACK_STARTED,
+            DECRYPTION_STARTED
+        };
+        void logPlayStart(PlayState state);
+        void logPlayEnd();
+
+        String m_url;
+        String m_keySystem;
+        double m_playStart;
+        double m_decryptionStart;
+        double m_playTime;
+};
+
+} //namespace WebCore
+
+#endif // ENABLE(ENCRYPTED_MEDIA) && USE(GSTREAMER)
diff --git a/Source/WebCore/platform/graphics/gstreamer/eme/WebKitCommonEncryptionDecryptorGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/eme/WebKitCommonEncryptionDecryptorGStreamer.cpp
index a98f85e53ba..9381488a085 100644
--- a/Source/WebCore/platform/graphics/gstreamer/eme/WebKitCommonEncryptionDecryptorGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/eme/WebKitCommonEncryptionDecryptorGStreamer.cpp
@@ -46,6 +46,7 @@ struct _WebKitMediaCommonEncryptionDecryptPrivate {
     uint32_t m_currentEvent { 0 };
     String m_initDataType;
     bool m_isFlushing { false };
+    bool m_notifiedDecryptStart { false };
 };
 
 static GstStateChangeReturn webKitMediaCommonEncryptionDecryptorChangeState(GstElement*, GstStateChange transition);
@@ -358,6 +359,13 @@ static GstFlowReturn webkitMediaCommonEncryptionDecryptTransformInPlace(GstBaseT
         return GST_FLOW_NOT_SUPPORTED;
     }
 
+    if(!priv->m_notifiedDecryptStart && priv->m_cdmInstance) {
+        priv->m_notifiedDecryptStart = true;
+        RefPtr<WebCore::MediaPlayerGStreamerEncryptedPlayTracker> tracker = priv->m_cdmInstance->getTracker();
+        if(tracker)
+            tracker->notifyDecryptionStarted();
+    }
+
     klass->releaseCipher(self);
     gst_buffer_remove_meta(buffer, reinterpret_cast<GstMeta*>(protectionMeta));
     return GST_FLOW_OK;
-- 
2.16.2

