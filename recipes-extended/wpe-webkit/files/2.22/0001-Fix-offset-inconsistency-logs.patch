From fa3a3131eb2b1eef0d2803a2a1aecca7aec63b9a Mon Sep 17 00:00:00 2001
From: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Tue, 27 Jul 2021 19:21:36 +0000
Subject: [PATCH 1/6] Fix offset inconsistency logs

---
 Source/JavaScriptCore/heap/SlotVisitor.cpp  | 17 ++++++++++++++++-
 Source/JavaScriptCore/runtime/Structure.cpp |  2 +-
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/Source/JavaScriptCore/heap/SlotVisitor.cpp b/Source/JavaScriptCore/heap/SlotVisitor.cpp
index e737f39450e9..1daf45d4892a 100644
--- a/Source/JavaScriptCore/heap/SlotVisitor.cpp
+++ b/Source/JavaScriptCore/heap/SlotVisitor.cpp
@@ -60,7 +60,7 @@ static void validate(JSCell* cell)
     // Both the cell's structure, and the cell's structure's structure should be the Structure Structure.
     // I hate this sentence.
     VM& vm = *cell->vm();
-    if (cell->structure()->structure()->JSCell::classInfo(vm) != cell->structure()->JSCell::classInfo(vm)) {
+    if (!cell->structure()->structure() || cell->structure()->structure()->JSCell::classInfo(vm) != cell->structure()->JSCell::classInfo(vm)) {
         const char* parentClassName = 0;
         const char* ourClassName = 0;
         if (cell->structure()->structure() && cell->structure()->structure()->JSCell::classInfo(vm))
@@ -75,6 +75,15 @@ static void validate(JSCell* cell)
     // Make sure we can walk the ClassInfo chain
     const ClassInfo* info = cell->classInfo(vm);
     do { } while ((info = info->parentClass));
+
+    if (!cell->structure(vm)) {
+        dataLogF("validate(): Cell %p has null structure, type %d. \n", cell, cell->type());
+        CRASH();
+    }
+    if (!cell->methodTable(vm)) {
+        dataLogF("validate(): Cell %p has null methodTable, type %d. \n", cell, cell->type());
+        CRASH();
+    }
 }
 #endif
 
@@ -379,6 +388,12 @@ ALWAYS_INLINE void SlotVisitor::visitChildren(const JSCell* cell)
         break;
         
     default:
+        if (!cell->structure(vm())) {
+            dataLogF("SlotVisitor::visitChildren(): Cell %p has null structure, type %d. \n", cell, cell->type());
+        }
+        if (!cell->methodTable(vm())) {
+            dataLogF("SlotVisitor::visitChildren(): Cell %p has null methodTable, type %d. \n", cell, cell->type());
+        }
         // FIXME: This could be so much better.
         // https://bugs.webkit.org/show_bug.cgi?id=162462
         cell->methodTable(vm())->visitChildren(const_cast<JSCell*>(cell), *this);
diff --git a/Source/JavaScriptCore/runtime/Structure.cpp b/Source/JavaScriptCore/runtime/Structure.cpp
index 58d83bce4afd..4216ef71cf1c 100644
--- a/Source/JavaScriptCore/runtime/Structure.cpp
+++ b/Source/JavaScriptCore/runtime/Structure.cpp
@@ -374,7 +374,7 @@ PropertyTable* Structure::materializePropertyTable(VM& vm, bool setPropertyTable
     InferredTypeTable* typeTable = m_inferredTypeTable.get();
 
     for (size_t i = structures.size(); i--;) {
-        structure = structures[i];
+        Structure* structure = structures[i];
         if (!structure->m_nameInPrevious)
             continue;
         PropertyMapEntry entry(structure->m_nameInPrevious.get(), structure->m_offset, structure->attributesInPrevious());
-- 
2.25.1

