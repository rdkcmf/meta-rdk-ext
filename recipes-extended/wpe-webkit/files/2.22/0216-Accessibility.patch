From 0cfa19a8b9e462e3eaacfe1cc4b7d7e0179d9266 Mon Sep 17 00:00:00 2001
From: "Vivek.A" <Vivek_Arumugam@comcast.com>
Date: Thu, 19 Nov 2020 13:32:54 +0000
Subject: [PATCH 2/3] accessibility changes

Change-Id: I149b1e59541f60c24b99145aedfc4e3e13e40241
---
 Source/WebCore/CMakeLists.txt                 |  1 +
 Source/WebCore/PlatformWPE.cmake              |  2 ++
 Source/WebCore/SourcesWPE.txt                 | 20 +++++++++--
 .../WebCore/accessibility/AXObjectCache.cpp   | 17 +++++++--
 Source/WebCore/accessibility/AXObjectCache.h  |  5 ++-
 .../accessibility/AccessibilityNodeObject.cpp |  8 +++++
 .../accessibility/AccessibilityObject.h       | 12 +++----
 .../accessibility/atk/AXObjectCacheAtk.cpp    |  4 +++
 .../atk/WebKitAccessibleInterfaceAction.cpp   |  4 +--
 .../atk/WebKitAccessibleWrapperAtk.cpp        |  4 +--
 Source/WebCore/html/HTMLMediaElement.cpp      |  7 +++-
 Source/WebCore/html/HTMLMediaElement.h        |  1 +
 .../WebCore/inspector/InspectorController.cpp |  4 +++
 Source/WebCore/inspector/InspectorOverlay.cpp |  2 +-
 .../inspector/agents/InspectorDOMAgent.cpp    |  4 +--
 Source/WebCore/page/Settings.yaml             |  3 ++
 Source/WebKit/PlatformWPE.cmake               | 11 ++++++
 Source/WebKit/Shared/WebPreferences.yaml      |  4 +++
 Source/WebKit/SourcesWPE.txt                  |  1 +
 .../WebKit/UIProcess/API/C/WKPreferences.cpp  | 10 ++++++
 .../WebKit/UIProcess/API/C/WKPreferencesRef.h |  4 +++
 .../WebCoreSupport/WebFrameLoaderClient.cpp   |  2 +-
 Source/WebKit/WebProcess/WebPage/WebPage.cpp  | 36 ++++++++++++++++++-
 Source/WebKit/WebProcess/WebPage/WebPage.h    |  7 ++--
 .../WebProcess/WebPage/wpe/WebPageWPE.cpp     | 22 ++++++++++++
 Source/cmake/OptionsWPE.cmake                 |  8 +++++
 26 files changed, 176 insertions(+), 27 deletions(-)

diff --git a/Source/WebCore/CMakeLists.txt b/Source/WebCore/CMakeLists.txt
index 82127f6492e0..7d659403e92f 100644
--- a/Source/WebCore/CMakeLists.txt
+++ b/Source/WebCore/CMakeLists.txt
@@ -1121,6 +1121,7 @@ set(WebCore_LIBRARIES
     ${SQLITE_LIBRARIES}
     ${ZLIB_LIBRARIES}
     PAL${DEBUG_SUFFIX}
+    rdkat
 )
 
 if (ENABLE_LEGACY_ENCRYPTED_MEDIA)
diff --git a/Source/WebCore/PlatformWPE.cmake b/Source/WebCore/PlatformWPE.cmake
index fc52baaa1164..2ad8e39428b4 100644
--- a/Source/WebCore/PlatformWPE.cmake
+++ b/Source/WebCore/PlatformWPE.cmake
@@ -61,6 +61,7 @@ list(APPEND WebCore_LIBRARIES
     ${OPENCDM_LIBRARIES}
     ${UPOWERGLIB_LIBRARIES}
     ${WPE_LIBRARIES}
+    ${ATK_LIBRARIES}
 )
 
 list(APPEND WebCore_SYSTEM_INCLUDE_DIRECTORIES
@@ -74,4 +75,5 @@ list(APPEND WebCore_SYSTEM_INCLUDE_DIRECTORIES
     ${OPENCDM_INCLUDE_DIRS}
     ${UPOWERGLIB_INCLUDE_DIRS}
     ${WPE_INCLUDE_DIRS}
+    ${ATK_INCLUDE_DIRS}
 )
diff --git a/Source/WebCore/SourcesWPE.txt b/Source/WebCore/SourcesWPE.txt
index 2d611256f491..642536d22788 100644
--- a/Source/WebCore/SourcesWPE.txt
+++ b/Source/WebCore/SourcesWPE.txt
@@ -21,11 +21,27 @@
 // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 // THE POSSIBILITY OF SUCH DAMAGE.
 
-accessibility/wpe/AXObjectCacheWPE.cpp
-accessibility/wpe/AccessibilityObjectWPE.cpp
 
 editing/wpe/EditorWPE.cpp
 
+accessibility/atk/AXObjectCacheAtk.cpp
+accessibility/atk/AccessibilityObjectAtk.cpp
+accessibility/atk/WebKitAccessibleHyperlink.cpp
+accessibility/atk/WebKitAccessibleInterfaceAction.cpp
+accessibility/atk/WebKitAccessibleInterfaceComponent.cpp
+accessibility/atk/WebKitAccessibleInterfaceDocument.cpp
+accessibility/atk/WebKitAccessibleInterfaceEditableText.cpp
+accessibility/atk/WebKitAccessibleInterfaceHyperlinkImpl.cpp
+accessibility/atk/WebKitAccessibleInterfaceHypertext.cpp
+accessibility/atk/WebKitAccessibleInterfaceImage.cpp
+accessibility/atk/WebKitAccessibleInterfaceSelection.cpp
+accessibility/atk/WebKitAccessibleInterfaceTable.cpp
+accessibility/atk/WebKitAccessibleInterfaceTableCell.cpp
+accessibility/atk/WebKitAccessibleInterfaceText.cpp
+accessibility/atk/WebKitAccessibleInterfaceValue.cpp
+accessibility/atk/WebKitAccessibleUtil.cpp
+accessibility/atk/WebKitAccessibleWrapperAtk.cpp
+
 loader/soup/ResourceLoaderSoup.cpp
 
 page/linux/ResourceUsageOverlayLinux.cpp
diff --git a/Source/WebCore/accessibility/AXObjectCache.cpp b/Source/WebCore/accessibility/AXObjectCache.cpp
index c000a0a04342..eb75f069a859 100644
--- a/Source/WebCore/accessibility/AXObjectCache.cpp
+++ b/Source/WebCore/accessibility/AXObjectCache.cpp
@@ -183,6 +183,7 @@ void AccessibilityReplacedText::postTextStateChangeNotification(AXObjectCache* c
 
 bool AXObjectCache::gAccessibilityEnabled = false;
 bool AXObjectCache::gAccessibilityEnhancedUserInterfaceEnabled = false;
+bool AXObjectCache::gAccessibilityEnabledByInspector = false;
 
 void AXObjectCache::enableAccessibility()
 {
@@ -194,6 +195,16 @@ void AXObjectCache::disableAccessibility()
     gAccessibilityEnabled = false;
 }
 
+void AXObjectCache::enableAccessibilityFromInspector()
+{
+    gAccessibilityEnabledByInspector = true;
+}
+
+void AXObjectCache::restoreAccessibilityFromInspector()
+{
+    gAccessibilityEnabledByInspector = false;
+}
+
 void AXObjectCache::setEnhancedUserInterfaceAccessibility(bool flag)
 {
     gAccessibilityEnhancedUserInterfaceEnabled = flag;
@@ -342,7 +353,7 @@ AccessibilityObject* AXObjectCache::focusedImageMapUIElement(HTMLAreaElement* ar
     
 AccessibilityObject* AXObjectCache::focusedUIElementForPage(const Page* page)
 {
-    if (!gAccessibilityEnabled)
+    if (!accessibilityEnabled())
         return nullptr;
 
     // get the focused node in the page
@@ -645,7 +656,7 @@ AccessibilityObject* AXObjectCache::getOrCreate(RenderObject* renderer)
     
 AccessibilityObject* AXObjectCache::rootObject()
 {
-    if (!gAccessibilityEnabled)
+    if (!accessibilityEnabled())
         return nullptr;
 
     return getOrCreate(m_document.view());
@@ -653,7 +664,7 @@ AccessibilityObject* AXObjectCache::rootObject()
 
 AccessibilityObject* AXObjectCache::rootObjectForFrame(Frame* frame)
 {
-    if (!gAccessibilityEnabled)
+    if (!accessibilityEnabled())
         return nullptr;
 
     if (!frame)
diff --git a/Source/WebCore/accessibility/AXObjectCache.h b/Source/WebCore/accessibility/AXObjectCache.h
index 3e4c6146d9ba..7be93e5ceb0f 100644
--- a/Source/WebCore/accessibility/AXObjectCache.h
+++ b/Source/WebCore/accessibility/AXObjectCache.h
@@ -184,10 +184,12 @@ public:
     WEBCORE_EXPORT static void enableAccessibility();
     WEBCORE_EXPORT static void disableAccessibility();
 
+    WEBCORE_EXPORT static void enableAccessibilityFromInspector();
+    WEBCORE_EXPORT static void restoreAccessibilityFromInspector();
     // Enhanced user interface accessibility can be toggled by the assistive technology.
     WEBCORE_EXPORT static void setEnhancedUserInterfaceAccessibility(bool flag);
     
-    static bool accessibilityEnabled() { return gAccessibilityEnabled; }
+    static bool accessibilityEnabled() { return gAccessibilityEnabled || gAccessibilityEnabledByInspector; }
     static bool accessibilityEnhancedUserInterfaceEnabled() { return gAccessibilityEnhancedUserInterfaceEnabled; }
 #else
     static void enableAccessibility() { }
@@ -429,6 +431,7 @@ private:
     std::unique_ptr<AXComputedObjectAttributeCache> m_computedObjectAttributeCache;
     WEBCORE_EXPORT static bool gAccessibilityEnabled;
     WEBCORE_EXPORT static bool gAccessibilityEnhancedUserInterfaceEnabled;
+    WEBCORE_EXPORT static bool gAccessibilityEnabledByInspector;
 
     HashSet<AXID> m_idsInUse;
 
diff --git a/Source/WebCore/accessibility/AccessibilityNodeObject.cpp b/Source/WebCore/accessibility/AccessibilityNodeObject.cpp
index df257d5c88df..c6b3e3bf504c 100644
--- a/Source/WebCore/accessibility/AccessibilityNodeObject.cpp
+++ b/Source/WebCore/accessibility/AccessibilityNodeObject.cpp
@@ -1405,6 +1405,10 @@ void AccessibilityNodeObject::visibleText(Vector<AccessibilityText>& textOrder)
     case AccessibilityRole::RadioButton:
     case AccessibilityRole::Switch:
     case AccessibilityRole::Tab:
+    case AccessibilityRole::Div:
+    case AccessibilityRole::Cell:
+    case AccessibilityRole::GridCell:
+    case AccessibilityRole::Caption:
         useTextUnderElement = true;
         break;
     default:
@@ -1769,6 +1773,10 @@ String AccessibilityNodeObject::textUnderElement(AccessibilityTextUnderElementMo
     for (AccessibilityObject* child = firstChild(); child; child = child->nextSibling()) {
         if (mode.ignoredChildNode && child->node() == mode.ignoredChildNode)
             continue;
+
+        //to skip invisible node
+        if(child->isHidden())
+            continue;
         
         bool shouldDeriveNameFromAuthor = (mode.childrenInclusion == AccessibilityTextUnderElementMode::TextUnderElementModeIncludeNameFromContentsChildren && !child->accessibleNameDerivesFromContent());
         if (shouldDeriveNameFromAuthor) {
diff --git a/Source/WebCore/accessibility/AccessibilityObject.h b/Source/WebCore/accessibility/AccessibilityObject.h
index 39335075f68c..255148d5b5c5 100644
--- a/Source/WebCore/accessibility/AccessibilityObject.h
+++ b/Source/WebCore/accessibility/AccessibilityObject.h
@@ -64,11 +64,9 @@ OBJC_CLASS WebAccessibilityObjectWrapper;
 
 typedef WebAccessibilityObjectWrapper AccessibilityObjectWrapper;
 
-#elif PLATFORM(GTK)
+#elif (PLATFORM(GTK) || PLATFORM(WPE)) && HAVE(ACCESSIBILITY)
 typedef struct _AtkObject AtkObject;
 typedef struct _AtkObject AccessibilityObjectWrapper;
-#elif PLATFORM(WPE)
-class AccessibilityObjectWrapper : public RefCounted<AccessibilityObjectWrapper> { };
 #else
 class AccessibilityObjectWrapper;
 #endif
@@ -1092,7 +1090,7 @@ public:
     bool isHidden() const { return isAXHidden() || isDOMHidden(); }
     
 #if HAVE(ACCESSIBILITY)
-#if PLATFORM(GTK)
+#if (PLATFORM(GTK) || PLATFORM(WPE))
     AccessibilityObjectWrapper* wrapper() const;
     void setWrapper(AccessibilityObjectWrapper*);
 #else
@@ -1183,7 +1181,7 @@ protected:
 
     AccessibilityObject* radioGroupAncestor() const;
 
-#if PLATFORM(GTK) && HAVE(ACCESSIBILITY)
+#if (PLATFORM(GTK) || PLATFORM(WPE)) && HAVE(ACCESSIBILITY)
     bool allowsTextRanges() const;
     unsigned getLengthForTextRange() const;
 #else
@@ -1195,10 +1193,8 @@ protected:
     RetainPtr<WebAccessibilityObjectWrapper> m_wrapper;
 #elif PLATFORM(WIN)
     COMPtr<AccessibilityObjectWrapper> m_wrapper;
-#elif PLATFORM(GTK)
+#elif (PLATFORM(GTK) || PLATFORM(WPE)) && HAVE(ACCESSIBILITY)
     AtkObject* m_wrapper { nullptr };
-#elif PLATFORM(WPE)
-    RefPtr<AccessibilityObjectWrapper> m_wrapper;
 #endif
 };
 
diff --git a/Source/WebCore/accessibility/atk/AXObjectCacheAtk.cpp b/Source/WebCore/accessibility/atk/AXObjectCacheAtk.cpp
index 6ff644cf5f0d..36a1550d72a8 100644
--- a/Source/WebCore/accessibility/atk/AXObjectCacheAtk.cpp
+++ b/Source/WebCore/accessibility/atk/AXObjectCacheAtk.cpp
@@ -284,6 +284,10 @@ void AXObjectCache::postPlatformNotification(AccessibilityObject* coreObject, AX
         if (AccessibilityObject* descendant = coreObject->activeDescendant())
             platformHandleFocusedUIElementChanged(nullptr, descendant->node());
         break;
+    case AXTextChanged:
+        if (coreObject->isFocused())
+            atk_object_notify_state_change(axObject, ATK_STATE_FOCUSED, true);
+        break;
 
     default:
         break;
diff --git a/Source/WebCore/accessibility/atk/WebKitAccessibleInterfaceAction.cpp b/Source/WebCore/accessibility/atk/WebKitAccessibleInterfaceAction.cpp
index c79bdc4d66c0..82e84693c602 100644
--- a/Source/WebCore/accessibility/atk/WebKitAccessibleInterfaceAction.cpp
+++ b/Source/WebCore/accessibility/atk/WebKitAccessibleInterfaceAction.cpp
@@ -41,13 +41,13 @@
 
 using namespace WebCore;
 
-static AccessibilityObject* core(AtkAction* action)
+/*static AccessibilityObject* core(AtkAction* action)
 {
     if (!WEBKIT_IS_ACCESSIBLE(action))
         return 0;
 
     return webkitAccessibleGetAccessibilityObject(WEBKIT_ACCESSIBLE(action));
-}
+}*/
 
 static gboolean webkitAccessibleActionDoAction(AtkAction* action, gint index)
 {
diff --git a/Source/WebCore/accessibility/atk/WebKitAccessibleWrapperAtk.cpp b/Source/WebCore/accessibility/atk/WebKitAccessibleWrapperAtk.cpp
index 4da6f76b6b70..5933ba4f6ebe 100644
--- a/Source/WebCore/accessibility/atk/WebKitAccessibleWrapperAtk.cpp
+++ b/Source/WebCore/accessibility/atk/WebKitAccessibleWrapperAtk.cpp
@@ -980,8 +980,8 @@ static void setAtkStateSetFromCoreObject(AccessibilityObject* coreObject, AtkSta
     else if (coreObject->orientation() == AccessibilityOrientation::Vertical)
         atk_state_set_add_state(stateSet, ATK_STATE_VERTICAL);
 
-    if (coreObject->hasPopup())
-        atk_state_set_add_state(stateSet, ATK_STATE_HAS_POPUP);
+    //if (coreObject->hasPopup())
+    //    atk_state_set_add_state(stateSet, ATK_STATE_HAS_POPUP);
 
     if (coreObject->isIndeterminate())
         atk_state_set_add_state(stateSet, ATK_STATE_INDETERMINATE);
diff --git a/Source/WebCore/html/HTMLMediaElement.cpp b/Source/WebCore/html/HTMLMediaElement.cpp
index 726839f03fcc..7af27841a820 100644
--- a/Source/WebCore/html/HTMLMediaElement.cpp
+++ b/Source/WebCore/html/HTMLMediaElement.cpp
@@ -3718,6 +3718,7 @@ ExceptionOr<void> HTMLMediaElement::setVolume(double volume)
         removeBehaviorsRestrictionsAfterFirstUserGesture(MediaElementSession::AllRestrictions & ~MediaElementSession::RequireUserGestureToControlControlsManager);
 
     m_volume = volume;
+    m_referenceVolume = m_volume;
     m_volumeInitialized = true;
     updateVolume();
     scheduleEvent(eventNames().volumechangeEvent);
@@ -4890,6 +4891,9 @@ void HTMLMediaElement::mediaPlayerVolumeChanged(MediaPlayer*)
         double vol = m_player->volume();
         if (vol != m_volume) {
             m_volume = vol;
+            Page* page = document().page();
+            if(!page || page->mediaVolume() == 1)
+                m_referenceVolume = vol;
             updateVolume();
             scheduleEvent(eventNames().volumechangeEvent);
         }
@@ -5293,6 +5297,7 @@ void HTMLMediaElement::updateVolume()
     float volume = m_player->volume();
     if (m_volume != volume) {
         m_volume = volume;
+        m_referenceVolume = volume;
         scheduleEvent(eventNames().volumechangeEvent);
     }
 #else
@@ -5313,7 +5318,7 @@ void HTMLMediaElement::updateVolume()
 #endif
 
         m_player->setMuted(shouldMute);
-        m_player->setVolume(m_volume * volumeMultiplier);
+        m_player->setVolume(m_referenceVolume * volumeMultiplier);
     }
 
 #if ENABLE(MEDIA_SESSION)
diff --git a/Source/WebCore/html/HTMLMediaElement.h b/Source/WebCore/html/HTMLMediaElement.h
index 92ef568bebd5..fd46e2e1389a 100644
--- a/Source/WebCore/html/HTMLMediaElement.h
+++ b/Source/WebCore/html/HTMLMediaElement.h
@@ -979,6 +979,7 @@ private:
     SeekType m_pendingSeekType { NoSeek };
 
     double m_volume { 1 };
+    double m_referenceVolume { 1 };
     bool m_volumeInitialized { false };
     MediaTime m_lastSeekTime;
     
diff --git a/Source/WebCore/inspector/InspectorController.cpp b/Source/WebCore/inspector/InspectorController.cpp
index c514967aacc1..17557b44a86e 100644
--- a/Source/WebCore/inspector/InspectorController.cpp
+++ b/Source/WebCore/inspector/InspectorController.cpp
@@ -78,6 +78,7 @@
 #include <JavaScriptCore/InspectorScriptProfilerAgent.h>
 #include <JavaScriptCore/JSLock.h>
 #include <wtf/Stopwatch.h>
+#include <accessibility/AXObjectCache.h>
 
 #if ENABLE(REMOTE_INSPECTOR)
 #include "PageDebuggable.h"
@@ -289,6 +290,9 @@ void InspectorController::disconnectFrontend(FrontendChannel* frontendChannel)
     m_isAutomaticInspection = false;
     m_pauseAfterInitialization = false;
 
+    //restoring Accessibility enable flag
+    WebCore::AXObjectCache::restoreAccessibilityFromInspector();
+
     InspectorInstrumentation::frontendDeleted();
 
     bool disconnectedLastFrontend = !m_frontendRouter->hasFrontends();
diff --git a/Source/WebCore/inspector/InspectorOverlay.cpp b/Source/WebCore/inspector/InspectorOverlay.cpp
index c5b9aa5564a2..8fb718b03caf 100644
--- a/Source/WebCore/inspector/InspectorOverlay.cpp
+++ b/Source/WebCore/inspector/InspectorOverlay.cpp
@@ -621,7 +621,7 @@ static RefPtr<Inspector::Protocol::OverlayTypes::ElementData> buildObjectForElem
 
     // Need to enable AX to get the computed role.
     if (!WebCore::AXObjectCache::accessibilityEnabled())
-        WebCore::AXObjectCache::enableAccessibility();
+        WebCore::AXObjectCache::enableAccessibilityFromInspector();
 
     if (AXObjectCache* axObjectCache = node->document().axObjectCache()) {
         if (AccessibilityObject* axObject = axObjectCache->getOrCreate(node))
diff --git a/Source/WebCore/inspector/agents/InspectorDOMAgent.cpp b/Source/WebCore/inspector/agents/InspectorDOMAgent.cpp
index ee2c0d5bea51..c6e18df87cf6 100644
--- a/Source/WebCore/inspector/agents/InspectorDOMAgent.cpp
+++ b/Source/WebCore/inspector/agents/InspectorDOMAgent.cpp
@@ -1559,7 +1559,7 @@ Ref<Inspector::Protocol::DOM::Node> InspectorDOMAgent::buildObjectForNode(Node*
 
     // Need to enable AX to get the computed role.
     if (!WebCore::AXObjectCache::accessibilityEnabled())
-        WebCore::AXObjectCache::enableAccessibility();
+        WebCore::AXObjectCache::enableAccessibilityFromInspector();
 
     if (AXObjectCache* axObjectCache = node->document().axObjectCache()) {
         if (AccessibilityObject* axObject = axObjectCache->getOrCreate(node))
@@ -1711,7 +1711,7 @@ RefPtr<Inspector::Protocol::DOM::AccessibilityProperties> InspectorDOMAgent::bui
         return nullptr;
 
     if (!WebCore::AXObjectCache::accessibilityEnabled())
-        WebCore::AXObjectCache::enableAccessibility();
+        WebCore::AXObjectCache::enableAccessibilityFromInspector();
 
     Node* activeDescendantNode = nullptr;
     bool busy = false;
diff --git a/Source/WebCore/page/Settings.yaml b/Source/WebCore/page/Settings.yaml
index 06e1014f1d83..027965d5b0ab 100644
--- a/Source/WebCore/page/Settings.yaml
+++ b/Source/WebCore/page/Settings.yaml
@@ -769,3 +769,6 @@ nonCompositedWebGLEnabled:
 localStorageQuota:
   type: unsigned
   initial: 5*1024*1024
+AccessibilityEnabled:
+  type: bool
+  initial: false
diff --git a/Source/WebKit/PlatformWPE.cmake b/Source/WebKit/PlatformWPE.cmake
index fdf753a8b981..5b85346cded2 100644
--- a/Source/WebKit/PlatformWPE.cmake
+++ b/Source/WebKit/PlatformWPE.cmake
@@ -314,6 +314,17 @@ if (ENABLE_BREAKPAD)
     )
 endif ()
 
+if (ENABLE_ACCESSIBILITY)
+    list(APPEND WebKit_SOURCES
+        WebProcess/WebPage/atk/WebPageAccessibilityObjectAtk.cpp
+        )
+
+    list(APPEND WebKit_INCLUDE_DIRECTORIES
+        "${WEBKIT_DIR}/WebProcess/WebPage/atk"
+        ${ATK_INCLUDE_DIRS}
+        )
+endif ()
+
 add_custom_command(
     OUTPUT ${DERIVED_SOURCES_WEBINSPECTORUI_DIR}/WebKit2InspectorGResourceBundle.c
     DEPENDS ${WEBKIT_DIR}/UIProcess/API/wpe/WebKit2InspectorGResourceBundle.xml
diff --git a/Source/WebKit/Shared/WebPreferences.yaml b/Source/WebKit/Shared/WebPreferences.yaml
index 93ce301d28d7..99ae040d1e9c 100644
--- a/Source/WebKit/Shared/WebPreferences.yaml
+++ b/Source/WebKit/Shared/WebPreferences.yaml
@@ -1360,3 +1360,7 @@ AllowScriptsToCloseWindows:
 ScrollToFocusedElementEnabled:
   type: bool
   defaultValue: false
+
+AccessibilityEnabled:
+  type: bool
+  defaultValue: false
diff --git a/Source/WebKit/SourcesWPE.txt b/Source/WebKit/SourcesWPE.txt
index 1d8233d87f30..a793514b5575 100644
--- a/Source/WebKit/SourcesWPE.txt
+++ b/Source/WebKit/SourcesWPE.txt
@@ -259,6 +259,7 @@ WebProcess/WebPage/wpe/AcceleratedSurfaceWPE.cpp @no-unify
 WebProcess/WebPage/wpe/CompositingManager.cpp
 WebProcess/WebPage/wpe/WebInspectorUIWPE.cpp
 WebProcess/WebPage/wpe/WebPageWPE.cpp
+WebProcess/WebPage/atk/WebPageAccessibilityObjectAtk.cpp
 
 WebProcess/soup/WebKitSoupRequestInputStream.cpp
 WebProcess/soup/WebProcessSoup.cpp
diff --git a/Source/WebKit/UIProcess/API/C/WKPreferences.cpp b/Source/WebKit/UIProcess/API/C/WKPreferences.cpp
index a37a6cf3c30e..4e0e9cdbede6 100644
--- a/Source/WebKit/UIProcess/API/C/WKPreferences.cpp
+++ b/Source/WebKit/UIProcess/API/C/WKPreferences.cpp
@@ -2117,3 +2117,13 @@ bool WKPreferencesGetNonCompositedWebGLEnabled(WKPreferencesRef preferencesRef)
 {
     return toImpl(preferencesRef)->nonCompositedWebGLEnabled();
 }
+
+void WKPreferencesSetAccessibilityEnabled(WKPreferencesRef preferencesRef, bool accessibilityEnabled)
+{
+    toImpl(preferencesRef)->setAccessibilityEnabled(accessibilityEnabled);
+}
+
+bool WKPreferencesGetAccessibilityEnabled(WKPreferencesRef preferencesRef)
+{
+    return toImpl(preferencesRef)->accessibilityEnabled();
+}
diff --git a/Source/WebKit/UIProcess/API/C/WKPreferencesRef.h b/Source/WebKit/UIProcess/API/C/WKPreferencesRef.h
index fae6deb72cce..a981c5f17632 100644
--- a/Source/WebKit/UIProcess/API/C/WKPreferencesRef.h
+++ b/Source/WebKit/UIProcess/API/C/WKPreferencesRef.h
@@ -383,6 +383,10 @@ WK_EXPORT bool WKPreferencesGetWebGLEnabled(WKPreferencesRef);
 WK_EXPORT void WKPreferencesSetMediaContentTypesRequiringHardwareSupport(WKPreferencesRef, WKStringRef);
 WK_EXPORT WKStringRef WKPreferencesCopyMediaContentTypesRequiringHardwareSupport(WKPreferencesRef);
 
+// Defaults to false.
+WK_EXPORT void WKPreferencesSetAccessibilityEnabled(WKPreferencesRef preferences, bool accessibilityEnabled);
+WK_EXPORT bool WKPreferencesGetAccessibilityEnabled(WKPreferencesRef preferences);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/Source/WebKit/WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp b/Source/WebKit/WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp
index f879deb9227e..3748fc2c6222 100644
--- a/Source/WebKit/WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp
+++ b/Source/WebKit/WebProcess/WebCoreSupport/WebFrameLoaderClient.cpp
@@ -1687,7 +1687,7 @@ void WebFrameLoaderClient::dispatchDidClearWindowObjectInWorld(DOMWrapperWorld&
     if (automationSessionProxy && world.isNormal())
         automationSessionProxy->didClearWindowObjectForFrame(*m_frame);
 
-#if HAVE(ACCESSIBILITY) && PLATFORM(GTK)
+#if HAVE(ACCESSIBILITY) && (PLATFORM(GTK) || PLATFORM(WPE))
     // Ensure the accessibility hierarchy is updated.
     webPage->updateAccessibilityTree();
 #endif
diff --git a/Source/WebKit/WebProcess/WebPage/WebPage.cpp b/Source/WebKit/WebProcess/WebPage/WebPage.cpp
index c9d3f4e72a09..dc83679e7f51 100644
--- a/Source/WebKit/WebProcess/WebPage/WebPage.cpp
+++ b/Source/WebKit/WebProcess/WebPage/WebPage.cpp
@@ -281,6 +281,8 @@
 #include <WebCore/AuthenticatorManager.h>
 #endif
 
+#include <rdkat.h>
+
 namespace WebKit {
 using namespace JSC;
 using namespace WebCore;
@@ -289,9 +291,18 @@ static const Seconds pageScrollHysteresisDuration { 300_ms };
 static const Seconds initialLayerVolatilityTimerInterval { 20_ms };
 static const Seconds maximumLayerVolatilityTimerInterval { 2_s };
 
+// Enable RDKAT Processing for WebKitBrowserPlugin
+static bool pluginAXEnabled = !!getenv("ENABLE_WEBKITBROWSER_PLUGIN_ACCESSIBILITY");
+
 #define RELEASE_LOG_IF_ALLOWED(...) RELEASE_LOG_IF(isAlwaysOnLoggingAllowed(), Layers, __VA_ARGS__)
 #define RELEASE_LOG_ERROR_IF_ALLOWED(...) RELEASE_LOG_ERROR_IF(isAlwaysOnLoggingAllowed(), Layers, __VA_ARGS__)
 
+WTF::WeakPtr<WebPage> g_pageHandle;
+static void SetMediaVolume(void *data, float volume) {
+    if(data && g_pageHandle && data == g_pageHandle.get())
+        g_pageHandle->setMediaVolume(volume);
+}
+
 class SendStopResponsivenessTimer {
 public:
     ~SendStopResponsivenessTimer()
@@ -362,7 +373,7 @@ WebPage::WebPage(uint64_t pageID, WebPageCreationParameters&& parameters)
     , m_layerHostingMode(parameters.layerHostingMode)
 #if PLATFORM(COCOA)
     , m_viewGestureGeometryCollector(makeUniqueRef<ViewGestureGeometryCollector>(*this))
-#elif HAVE(ACCESSIBILITY) && PLATFORM(GTK)
+#elif HAVE(ACCESSIBILITY) && (PLATFORM(GTK) || PLATFORM(WPE))
     , m_accessibilityObject(nullptr)
 #endif
     , m_setCanStartMediaTimer(RunLoop::main(), this, &WebPage::setCanStartMediaTimerFired)
@@ -405,6 +416,8 @@ WebPage::WebPage(uint64_t pageID, WebPageCreationParameters&& parameters)
 {
     ASSERT(m_pageID);
 
+    RDK_AT::Initialize();
+
     m_pageGroup = WebProcess::singleton().webPageGroup(parameters.pageGroupData);
 
 #if PLATFORM(IOS)
@@ -3202,6 +3215,19 @@ void WebPage::updatePreferences(const WebPreferencesStore& store)
         updateThrottleState();
     }
 
+    bool axEnabled = pluginAXEnabled || store.getBoolValueForKey(WebPreferencesKey::accessibilityEnabledKey());
+    if(m_accessibilityEnabled != axEnabled) {
+        m_accessibilityEnabled = axEnabled;
+
+        if(axEnabled) {
+            WebCore::AXObjectCache::enableAccessibility();
+        } else {
+            WebCore::AXObjectCache::disableAccessibility();
+            if(m_page && m_page->mainFrame().document())
+                m_page->mainFrame().document()->clearAXObjectCache();
+        }
+    }
+
 #if PLATFORM(COCOA)
     m_pdfPluginEnabled = store.getBoolValueForKey(WebPreferencesKey::pdfPluginEnabledKey());
 #endif
@@ -5309,6 +5335,14 @@ void WebPage::didCommitLoad(WebFrame* frame)
     if (!frame->isMainFrame())
         return;
 
+    g_pageHandle = makeWeakPtr(*this);
+    bool axEnabled = pluginAXEnabled;
+    axEnabled |= m_accessibilityEnabled && WebCore::AXObjectCache::accessibilityEnabled();
+    WTFLogAlways("%s RDKAT processing for WPE", axEnabled ? "Enable" : "Disable");
+
+    RDK_AT::EnableProcessing(axEnabled);
+    RDK_AT::SetVolumeControlCallback(SetMediaVolume, axEnabled ? this : nullptr);
+
     // If previous URL is invalid, then it's not a real page that's being navigated away from.
     // Most likely, this is actually the first load to be committed in this page.
     if (frame->coreFrame()->loader().previousURL().isValid())
diff --git a/Source/WebKit/WebProcess/WebPage/WebPage.h b/Source/WebKit/WebProcess/WebPage/WebPage.h
index bc79b70cd702..045e11e36773 100644
--- a/Source/WebKit/WebProcess/WebPage/WebPage.h
+++ b/Source/WebKit/WebProcess/WebPage/WebPage.h
@@ -77,7 +77,7 @@
 #include <wtf/WallTime.h>
 #include <wtf/text/WTFString.h>
 
-#if HAVE(ACCESSIBILITY) && PLATFORM(GTK)
+#if HAVE(ACCESSIBILITY) && (PLATFORM(GTK) || PLATFORM(WPE))
 #include "WebPageAccessibilityObject.h"
 #include <wtf/glib/GRefPtr.h>
 #endif
@@ -768,7 +768,7 @@ public:
     void replaceSelectionWithPasteboardData(const Vector<String>& types, const IPC::DataReference&);
 #endif
 
-#if HAVE(ACCESSIBILITY) && PLATFORM(GTK)
+#if HAVE(ACCESSIBILITY) && (PLATFORM(GTK) || PLATFORM(WPE))
     void updateAccessibilityTree();
 #endif
 
@@ -1502,7 +1502,7 @@ private:
     RetainPtr<NSDictionary> m_dataDetectionContext;
 #endif
 
-#if HAVE(ACCESSIBILITY) && PLATFORM(GTK)
+#if HAVE(ACCESSIBILITY) && (PLATFORM(GTK) || PLATFORM(WPE))
     GRefPtr<WebPageAccessibilityObject> m_accessibilityObject;
 #endif
 
@@ -1703,6 +1703,7 @@ private:
     bool m_shouldDispatchFakeMouseMoveEvents { true };
     bool m_isEditorStateMissingPostLayoutData { false };
     bool m_isSelectingTextWhileInsertingAsynchronously { false };
+    bool m_accessibilityEnabled { false };
 
     enum class EditorStateIsContentEditable { No, Yes, Unset };
     mutable EditorStateIsContentEditable m_lastEditorStateWasContentEditable { EditorStateIsContentEditable::Unset };
diff --git a/Source/WebKit/WebProcess/WebPage/wpe/WebPageWPE.cpp b/Source/WebKit/WebProcess/WebPage/wpe/WebPageWPE.cpp
index c497f14d3a0c..98294626e365 100644
--- a/Source/WebKit/WebProcess/WebPage/wpe/WebPageWPE.cpp
+++ b/Source/WebKit/WebProcess/WebPage/wpe/WebPageWPE.cpp
@@ -30,6 +30,7 @@
 #include "WebPreferencesKeys.h"
 #include "WebPreferencesStore.h"
 #include "WindowsKeyboardCodes.h"
+#include "AXObjectCache.h"
 #include <WebCore/NotImplemented.h>
 #include <WebCore/Settings.h>
 #include <WebCore/SharedBuffer.h>
@@ -39,8 +40,29 @@ using namespace WebCore;
 
 void WebPage::platformInitialize()
 {
+#if HAVE(ACCESSIBILITY)
+    // Create the accessible object (the plug) that will serve as the
+    // entry point to the Web process, and send a message to the UI
+    // process to connect the two worlds through the accessibility
+    // object there specifically placed for that purpose (the socket).
+    if(m_accessibilityEnabled) {
+        m_accessibilityObject = adoptGRef(webPageAccessibilityObjectNew(this));
+        GUniquePtr<gchar> plugID(atk_plug_get_id(ATK_PLUG(m_accessibilityObject.get())));
+        // send(Messages::WebPageProxy::BindAccessibilityTree(String(plugID.get())));
+     }
+#endif
 }
 
+#if HAVE(ACCESSIBILITY)
+void WebPage::updateAccessibilityTree()
+{
+    if (!m_accessibilityObject || !AXObjectCache::accessibilityEnabled())
+        return;
+
+    webPageAccessibilityObjectRefresh(m_accessibilityObject.get());
+}
+#endif
+
 void WebPage::platformDetach()
 {
 }
diff --git a/Source/cmake/OptionsWPE.cmake b/Source/cmake/OptionsWPE.cmake
index 23d877be521a..1744374384e2 100644
--- a/Source/cmake/OptionsWPE.cmake
+++ b/Source/cmake/OptionsWPE.cmake
@@ -47,6 +47,7 @@ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBGL2 PRIVATE ${ENABLE_EXPERIMENTAL_FEA
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_STREAM PRIVATE ${ENABLE_EXPERIMENTAL_FEATURES})
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_RTC PRIVATE ${ENABLE_EXPERIMENTAL_FEATURES})
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEMORY_SAMPLER PUBLIC ON)
+WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ACCESSIBILITY PUBLIC ON)
 
 # Public options specific to the WPE port. Do not add any options here unless
 # there is a strong reason we should support changing the value of the option,
@@ -82,6 +83,13 @@ include(GStreamerDependencies)
 
 WEBKIT_OPTION_END()
 
+if (ENABLE_ACCESSIBILITY)
+    add_definitions(-DHAVE_ACCESSIBILITY=1)
+    find_package(ATK 2.10.0 REQUIRED)
+else ()
+    add_definitions(-DHAVE_ACCESSIBILITY=0)
+endif ()
+
 find_package(Cairo 1.10.2 REQUIRED)
 find_package(Fontconfig 2.8.0 REQUIRED)
 find_package(Freetype2 2.4.2 REQUIRED)
-- 
2.24.0

