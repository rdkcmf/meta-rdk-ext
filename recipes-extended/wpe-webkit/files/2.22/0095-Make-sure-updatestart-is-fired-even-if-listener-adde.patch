From 0558b13880dee982e8c78db30249f7ff546b233a Mon Sep 17 00:00:00 2001
From: Ievgen Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Sun, 26 Apr 2020 12:11:16 -0400
Subject: [PATCH 84/93] Make sure 'updatestart' is fired even if listener added
 after SourceBuffer.append()
Source: COMCAST
Upstream-Status: None
Signed-off-by: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>

---
 .../encryptedmedia/MediaKeySession.cpp        |  1 +
 .../Modules/mediasource/SourceBuffer.cpp      | 26 +++++++++++++------
 2 files changed, 19 insertions(+), 8 deletions(-)

Index: git/Source/WebCore/Modules/encryptedmedia/MediaKeySession.cpp
===================================================================
--- git.orig/Source/WebCore/Modules/encryptedmedia/MediaKeySession.cpp
+++ git/Source/WebCore/Modules/encryptedmedia/MediaKeySession.cpp
@@ -615,6 +615,7 @@ void MediaKeySession::enqueueMessage(Med
     // 2. Queue a task to create an event named message that does not bubble and is not cancellable using the MediaKeyMessageEvent
     //    interface with its type attribute set to message and its isTrusted attribute initialized to true, and dispatch it at the
     //    session.
+    LOG(EME, "EME - enqueueMessage type=%d", messageType);
     auto messageEvent = MediaKeyMessageEvent::create(eventNames().messageEvent, {messageType, message.tryCreateArrayBuffer()}, Event::IsTrusted::Yes);
     m_eventQueue.enqueueEvent(WTFMove(messageEvent));
 }
Index: git/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
===================================================================
--- git.orig/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
+++ git/Source/WebCore/Modules/mediasource/SourceBuffer.cpp
@@ -565,6 +565,8 @@ ExceptionOr<void> SourceBuffer::appendBu
     if (isRemoved() || m_updating)
         return Exception { InvalidStateError };
 
+    LOG(Media, "SourceBuffer::appendBufferInternal(%p) - append size = %u, buffered = %s", this, size, toString(m_buffered->ranges()).utf8().data());
+
     // 3. If the readyState attribute of the parent media source is in the "ended" state then run the following steps:
     // 3.1. Set the readyState attribute of the parent media source to "open"
     // 3.2. Queue a task to fire a simple event named sourceopen at the parent media source .
@@ -591,20 +593,28 @@ ExceptionOr<void> SourceBuffer::appendBu
     m_updating = true;
 
     // 5. Queue a task to fire a simple event named updatestart at this SourceBuffer object.
+    bool canFireMicrotask = false;
     if (hasEventListeners(eventNames().updatestartEvent))
         scheduleEvent(eventNames().updatestartEvent);
+    else
+        canFireMicrotask = true;
 
     // 6. Asynchronously run the buffer append algorithm.
     m_appendBufferTimer.startOneShot(0_s);
 
-    // Add microtask to start append right after leaving current script context. Keep the timer active to check if append was aborted.
-    auto microtask = std::make_unique<ActiveDOMCallbackMicrotask>(MicrotaskQueue::mainThreadQueue(), *scriptExecutionContext(), [protectedThis = makeRef(*this)]() mutable {
-        if (!protectedThis->m_asyncEventQueue.hasPendingEventsListeners() && protectedThis->m_appendBufferTimer.isActive()) {
-            protectedThis->m_appendBufferTimer.stop();
-            protectedThis->appendBufferTimerFired();
-        }
-    });
-    MicrotaskQueue::mainThreadQueue().append(WTFMove(microtask));
+    if (canFireMicrotask) {
+        // Add microtask to start append right after leaving current script context. Keep the timer active to check if append was aborted.
+        auto microtask = std::make_unique<ActiveDOMCallbackMicrotask>(MicrotaskQueue::mainThreadQueue(), *scriptExecutionContext(), [this, protectedThis = makeRef(*this)]() mutable {
+            // check if page added updatestart event listener
+            if (hasEventListeners(eventNames().updatestartEvent))
+                scheduleEvent(eventNames().updatestartEvent);
+            else if (!m_asyncEventQueue.hasPendingEventsListeners() && m_appendBufferTimer.isActive()) {
+                m_appendBufferTimer.stop();
+                appendBufferTimerFired();
+            }
+        });
+        MicrotaskQueue::mainThreadQueue().append(WTFMove(microtask));
+    }
 
     reportExtraMemoryAllocated();
 
