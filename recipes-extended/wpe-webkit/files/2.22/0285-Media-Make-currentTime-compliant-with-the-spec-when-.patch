From 47073c4eefc32b1abbb580176e58ef1f20371722 Mon Sep 17 00:00:00 2001
From: Damian Zgoda <damian.zgoda@sky.uk>
Date: Wed, 8 Sep 2021 07:37:10 +0000
Subject: [PATCH] [Media] Make currentTime compliant with the spec when
 readyState is HAVE_NOTHING

---
 Source/WebCore/html/HTMLMediaElement.cpp | 18 ++++++++++++++++++
 Source/WebCore/html/HTMLMediaElement.h   |  1 +
 2 files changed, 19 insertions(+)

diff --git a/Source/WebCore/html/HTMLMediaElement.cpp b/Source/WebCore/html/HTMLMediaElement.cpp
index 75ddb0a..8708178 100644
--- a/Source/WebCore/html/HTMLMediaElement.cpp
+++ b/Source/WebCore/html/HTMLMediaElement.cpp
@@ -2551,6 +2551,15 @@ void HTMLMediaElement::setReadyState(MediaPlayer::ReadyState state)
         scheduleEvent(eventNames().durationchangeEvent);
         scheduleResizeEvent();
         scheduleEvent(eventNames().loadedmetadataEvent);
+
+        if (m_defaultPlaybackStartPosition > MediaTime::zeroTime()) {
+            // We reset it before to cause currentMediaTime() to return the actual current time (not
+            // defaultPlaybackPosition) and avoid the seek code to think that the seek was already done.
+            MediaTime seekTarget = m_defaultPlaybackStartPosition;
+            m_defaultPlaybackStartPosition = MediaTime::zeroTime();
+            seekInternal(seekTarget);
+        }
+
 #if ENABLE(WIRELESS_PLAYBACK_TARGET)
         if (hasEventListeners(eventNames().webkitplaybacktargetavailabilitychangedEvent))
             enqueuePlaybackTargetAvailabilityChangedEvent();
@@ -3224,6 +3233,9 @@ MediaTime HTMLMediaElement::currentMediaTime() const
     if (!m_player)
         return MediaTime::zeroTime();
 
+    if (m_defaultPlaybackStartPosition != MediaTime::zeroTime())
+        return m_defaultPlaybackStartPosition;
+
     if (m_seeking) {
         INFO_LOG(LOGIDENTIFIER, "seeking, returning", m_lastSeekTime);
         return m_lastSeekTime;
@@ -3296,6 +3308,12 @@ ExceptionOr<void> HTMLMediaElement::setCurrentTimeForBindings(double time)
 {
     if (m_mediaController)
         return Exception { InvalidStateError };
+
+    if (m_readyState == HAVE_NOTHING || !m_player) {
+        m_defaultPlaybackStartPosition = MediaTime::createWithDouble(time);
+        return { };
+    }
+
     seek(MediaTime::createWithDouble(time));
     return { };
 }
diff --git a/Source/WebCore/html/HTMLMediaElement.h b/Source/WebCore/html/HTMLMediaElement.h
index fd46e2e..6e0d225 100644
--- a/Source/WebCore/html/HTMLMediaElement.h
+++ b/Source/WebCore/html/HTMLMediaElement.h
@@ -1033,6 +1033,7 @@ private:
     unsigned m_droppedVideoFrames { 0 };
 #endif
 
+    MediaTime m_defaultPlaybackStartPosition = MediaTime::zeroTime();
     mutable MediaTime m_cachedTime;
     mutable MonotonicTime m_clockTimeAtLastCachedTimeUpdate;
     mutable MonotonicTime m_minimumClockTimeToUpdateCachedTime;
-- 
1.9.1

