From c081c454cc04f46279c26be80ce0c552a5d7360b Mon Sep 17 00:00:00 2001
From: Balaji Selvam <balaji_selvam@comcast.com>
Date: Fri, 8 May 2020 08:26:18 +0000
Subject: [PATCH 11/11] 
 0178-XRE-14630-App-throwing-Error-when-an-error-occurred.patch
Source: COMCAST
License: LICENSE-LGPL-2.1
Upstream-Status: Pending
Signed-off-by: Balaji Selvam <balaji_selvam@comcast.com>

---
 .../holepunch/MediaPlayerPrivateHolePunch.cpp | 23 +++++++++++++++++++
 .../holepunch/MediaPlayerPrivateHolePunch.h   | 10 +++++---
 2 files changed, 30 insertions(+), 3 deletions(-)

diff --git a/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.cpp b/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.cpp
index 53895846c626..ff504889cb6c 100644
--- a/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.cpp
+++ b/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.cpp
@@ -33,6 +33,7 @@ static const FloatSize s_holePunchDefaultFrameSize(1280, 720);
 MediaPlayerPrivateHolePunch::MediaPlayerPrivateHolePunch(MediaPlayer* player)
     : m_player(player)
     , m_readyTimer(RunLoop::main(), this, &MediaPlayerPrivateHolePunch::notifyReadyState)
+    , m_networkState(MediaPlayer::Empty)
 #if USE(NICOSIA)
     , m_nicosiaLayer(Nicosia::ContentLayer::create(Nicosia::ContentLayerTextureMapperImpl::createFactory(*this)))
 #else
@@ -151,5 +152,27 @@ void MediaPlayerPrivateHolePunch::notifyReadyState()
     // Notify the ready state so the GraphicsLayer gets created.
     m_player->readyStateChanged();
 }
+
+MediaPlayer::NetworkState MediaPlayerPrivateHolePunch::networkState() const
+{
+    return m_networkState;
+}
+
+void MediaPlayerPrivateHolePunch::setNetworkState(MediaPlayer::NetworkState networkState)
+{
+    m_networkState = networkState;
+    m_player->networkStateChanged();
+}
+
+void MediaPlayerPrivateHolePunch::load(const String& loadUrl)
+{
+    if (m_player) {
+        auto mimeType = m_player->contentMIMEType();
+        if (mimeType.isEmpty() || !(mimeTypeCache().contains(mimeType))) {
+            setNetworkState(MediaPlayer::FormatError);
+        }
+    }
+}
+
 }
 #endif // USE(EXTERNAL_HOLEPUNCH)
diff --git a/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.h b/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.h
index f0d04d4c63d9..77e0d2993292 100644
--- a/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.h
+++ b/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.h
@@ -51,7 +51,7 @@ public:
 
     static void registerMediaEngine(MediaEngineRegistrar);
 
-    void load(const String&) final { };
+    void load(const String&) final;
 #if ENABLE(MEDIA_SOURCE)
     void load(const String&, MediaSourcePrivateClient*) final { };
 #endif
@@ -76,7 +76,7 @@ public:
 
     bool paused() const final { return false; };
 
-    MediaPlayer::NetworkState networkState() const final { return MediaPlayer::Empty; };
+    MediaPlayer::NetworkState networkState() const final;
     MediaPlayer::ReadyState readyState() const final { return MediaPlayer::HaveMetadata; };
 
     std::unique_ptr<PlatformTimeRanges> buffered() const final { return std::make_unique<PlatformTimeRanges>(); };
@@ -93,19 +93,23 @@ public:
 
     void pushNextHolePunchBuffer();
     void swapBuffersIfNeeded() final;
+    void setNetworkState(MediaPlayer::NetworkState);
 #if !USE(NICOSIA)
     RefPtr<TextureMapperPlatformLayerProxy> proxy() const final;
 #endif
 
+protected:
+    MediaPlayer* m_player;
+
 private:
     static void getSupportedTypes(HashSet<String, ASCIICaseInsensitiveHash>&);
     static MediaPlayer::SupportsType supportsType(const MediaEngineSupportParameters&);
 
     void notifyReadyState();
 
-    MediaPlayer* m_player;
     IntSize m_size;
     RunLoop::Timer<MediaPlayerPrivateHolePunch> m_readyTimer;
+    MediaPlayer::NetworkState m_networkState;
 #if USE(TEXTURE_MAPPER_GL)
 #if USE(NICOSIA)
     Ref<Nicosia::ContentLayer> m_nicosiaLayer;
-- 
2.24.0

