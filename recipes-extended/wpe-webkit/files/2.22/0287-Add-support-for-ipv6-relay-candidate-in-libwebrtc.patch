From 79a1d06ac4611bc8482e49a79931116877429eba Mon Sep 17 00:00:00 2001
From: Krishna Priya Kanagaraj <Krishnapriya_kanagaraj@comcast.com>
Date: Tue, 21 Sep 2021 07:07:58 +0000
Subject: [PATCH] Add support for ipv6 relay candidate in libwebrtc

Reason for change: Adding support to genrate the IPV6 relay candidates
Signed-off-by:Krishna Priya Kanagaraj <Krishnapriya_kanagaraj@comcast.com>
Test Procedure: Validate the XHOME streaming.Check whether IPV6 localrelay candidates are generated
Risks: None
---
 .../libwebrtc/Source/webrtc/p2p/base/stun.cc  |  5 ++
 .../libwebrtc/Source/webrtc/p2p/base/stun.h   | 14 ++++
 .../Source/webrtc/p2p/base/turnport.cc        | 72 +++++++++++++++++--
 .../Source/webrtc/p2p/base/turnport.h         |  3 +
 4 files changed, 88 insertions(+), 6 deletions(-)

diff --git a/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun.cc b/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun.cc
index cc9fb4e4c090..b3e53b79e951 100644
--- a/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun.cc
+++ b/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun.cc
@@ -1080,6 +1080,11 @@ StunAttributeValueType TurnMessage::GetAttributeValueType(int type) const {
       return STUN_VALUE_BYTE_STRING;
     case STUN_ATTR_RESERVATION_TOKEN:
       return STUN_VALUE_BYTE_STRING;
+// Below patch is to add the support for ipv6 relay candidate
+// The REQUESTED-ADDRESS-FAMILY attribute is used by clients to request
+// the allocation of a specific address type from a server.
+    case STUN_ATTR_REQUESTED_ADDRESS_FAMILY:
+      return STUN_VALUE_UINT32;
     default:
       return StunMessage::GetAttributeValueType(type);
   }
diff --git a/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun.h b/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun.h
index dfb56e0c0ece..c74e4e2de18d 100644
--- a/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun.h
+++ b/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/stun.h
@@ -75,6 +75,16 @@ enum StunAddressFamily {
   STUN_ADDRESS_IPV6 = 2
 };
 
+// Below patch is to add the support for ipv6 relay candidate
+// The REQUESTED-ADDRESS-FAMILY attribute is used by clients to request
+// the allocation of a specific address type from a server.
+// There are two values defined for this field and
+// specified in [RFC5389], Section 15.1: 0x01 for IPv4 addresses and 0x02 for IPv6 addresses.
+enum RequestedFamilyAtrributeValues {
+  STUN_ATTR_IPV4_FAMILY              = 0x01,
+  STUN_ATTR_IPV6_FAMILY              = 0x02,
+};
+
 // These are the types of STUN error codes defined in RFC 5389.
 enum StunErrorCode {
   STUN_ERROR_TRY_ALTERNATE = 300,
@@ -559,6 +569,10 @@ enum TurnAttributeType {
   // TODO(mallinath) - Uncomment after RelayAttributes are renamed.
   // STUN_ATTR_DATA                     = 0x0013,  // ByteString
   STUN_ATTR_XOR_RELAYED_ADDRESS = 0x0016,  // XorAddress
+// Below patch is to add the support for ipv6 relay candidate
+// The REQUESTED-ADDRESS-FAMILY attribute is used by clients to request
+// the allocation of a specific address type from a server.  
+  STUN_ATTR_REQUESTED_ADDRESS_FAMILY    = 0x0017,  // IPv6 RFC 6156
   STUN_ATTR_EVEN_PORT = 0x0018,            // ByteString, 1 byte.
   STUN_ATTR_REQUESTED_TRANSPORT = 0x0019,  // UInt32
   STUN_ATTR_DONT_FRAGMENT = 0x001A,        // No content, Length = 0
diff --git a/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turnport.cc b/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turnport.cc
index 97541f60c02d..3bc6e804c900 100644
--- a/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turnport.cc
+++ b/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turnport.cc
@@ -69,6 +69,8 @@ class TurnAllocateRequest : public StunRequest {
   void OnResponse(StunMessage* response) override;
   void OnErrorResponse(StunMessage* response) override;
   void OnTimeout() override;
+// Below patch is to add the support for ipv6 relay candidate
+  void SetRequestPreference(bool ipv6);
 
  private:
   // Handles authentication challenge from the server.
@@ -77,6 +79,8 @@ class TurnAllocateRequest : public StunRequest {
   void OnUnknownAttribute(StunMessage* response);
 
   TurnPort* port_;
+// Below patch is to add the support for ipv6 relay candidate
+  bool ipv6_preference;
 };
 
 class TurnRefreshRequest : public StunRequest {
@@ -219,6 +223,8 @@ TurnPort::TurnPort(rtc::Thread* thread,
       turn_customizer_(customizer) {
   request_manager_.SignalSendPacket.connect(this, &TurnPort::OnSendStunPacket);
   request_manager_.set_origin(origin);
+// Below patch is to add the support for ipv6 relay candidate
+  send_ipv6_request = false;
 }
 
 TurnPort::TurnPort(rtc::Thread* thread,
@@ -261,6 +267,9 @@ TurnPort::TurnPort(rtc::Thread* thread,
       turn_customizer_(customizer) {
   request_manager_.SignalSendPacket.connect(this, &TurnPort::OnSendStunPacket);
   request_manager_.set_origin(origin);
+// Below patch is to add the support for ipv6 relay candidate
+  send_ipv6_request = false;
+  
 }
 
 TurnPort::~TurnPort() {
@@ -346,7 +355,10 @@ void TurnPort::PrepareAddress() {
     if (server_address_.proto == PROTO_UDP) {
       // If its UDP, send AllocateRequest now.
       // For TCP and TLS AllcateRequest will be sent by OnSocketConnect.
-      SendRequest(new TurnAllocateRequest(this), 0);
+      // Below patch is to add the support for ipv6 relay candidate
+      TurnAllocateRequest * newRequest = new TurnAllocateRequest(this);
+      newRequest->SetRequestPreference(this->send_ipv6_request);
+      SendRequest(newRequest, 0);
     }
   }
 }
@@ -472,7 +484,10 @@ void TurnPort::OnSocketConnect(rtc::AsyncPacketSocket* socket) {
 
   RTC_LOG(LS_INFO) << "TurnPort connected to "
                    << socket->GetRemoteAddress().ToString() << " using tcp.";
-  SendRequest(new TurnAllocateRequest(this), 0);
+// Below patch is to add the support for ipv6 relay candidate
+  TurnAllocateRequest * newRequest = new TurnAllocateRequest(this);
+  newRequest->SetRequestPreference(this->send_ipv6_request);
+  SendRequest(newRequest, 0);
 }
 
 void TurnPort::OnSocketClose(rtc::AsyncPacketSocket* socket, int error) {
@@ -834,7 +849,19 @@ void TurnPort::OnAllocateSuccess(const rtc::SocketAddress& address,
              ProtoToString(server_address_.proto),  // The first hop protocol.
              "",  // TCP canddiate type, empty for turn candidates.
              RELAY_PORT_TYPE, GetRelayPreference(server_address_.proto),
-             server_priority_, ReconstructedServerUrl(), true);
+	     server_priority_, ReconstructedServerUrl(), send_ipv6_request);
+
+// Below patch is to add the support for ipv6 relay candidate
+// If we have received a allocate success, try to do the same to do a V6 allocation
+  if (send_ipv6_request == false)
+  {
+    RTC_LOG(LS_INFO) << "Allocating a new V6 socket after "
+      << "OnAllocateSuccess, retry = ";
+    send_ipv6_request = true;
+    this->set_realm(""); // Clear the realm so that hash can be computed
+    this->hash_.clear();
+    PrepareAddress();
+  }  
 }
 
 void TurnPort::OnAllocateError() {
@@ -906,7 +933,10 @@ void TurnPort::OnMessage(rtc::Message* message) {
       if (server_address().proto == PROTO_UDP) {
         // Send another allocate request to alternate server, with the received
         // realm and nonce values.
-        SendRequest(new TurnAllocateRequest(this), 0);
+	// Below patch is to add the support for ipv6 relay candidate
+        TurnAllocateRequest * newRequest = new TurnAllocateRequest(this);
+        newRequest->SetRequestPreference(this->send_ipv6_request);
+        SendRequest(newRequest, 0);
       } else {
         // Since it's TCP, we have to delete the connected socket and reconnect
         // with the alternate server. PrepareAddress will send stun binding once
@@ -1273,7 +1303,14 @@ bool TurnPort::TurnCustomizerAllowChannelData(const void* data,
 }
 
 TurnAllocateRequest::TurnAllocateRequest(TurnPort* port)
-    : StunRequest(new TurnMessage()), port_(port) {}
+    : StunRequest(new TurnMessage()), port_(port),
+      ipv6_preference(false) {}
+
+// Below patch is to add the support for ipv6 relay candidate
+void TurnAllocateRequest::SetRequestPreference(bool ipv6)
+{
+  ipv6_preference = ipv6;
+}
 
 void TurnAllocateRequest::Prepare(StunMessage* request) {
   // Create the request as indicated in RFC 5766, Section 6.1.
@@ -1282,6 +1319,25 @@ void TurnAllocateRequest::Prepare(StunMessage* request) {
       StunAttribute::CreateUInt32(STUN_ATTR_REQUESTED_TRANSPORT);
   transport_attr->SetValue(IPPROTO_UDP << 24);
   request->AddAttribute(std::move(transport_attr));
+
+  // Below patch is to add the support for ipv6 relay candidate
+  // The REQUESTED-ADDRESS-FAMILY attribute is used by clients to request
+  // the allocation of a specific address type from a server.
+  // There are two values defined for this field and
+  // specified in [RFC5389], Section 15.1: 0x01 for IPv4 addresses and 0x02 for IPv6 addresses.
+  auto family_attr = StunAttribute::CreateUInt32(STUN_ATTR_REQUESTED_ADDRESS_FAMILY);
+
+  // Check if the server address is IPv6
+  if (ipv6_preference)
+  {
+    family_attr->SetValue((STUN_ATTR_IPV6_FAMILY) << 24);
+  }
+  else
+  {
+    family_attr->SetValue((STUN_ATTR_IPV4_FAMILY) << 24);
+  }
+  request->AddAttribute(std::move(family_attr));
+
   if (!port_->hash().empty()) {
     port_->AddRequestAuthInfo(request);
   }
@@ -1406,7 +1462,11 @@ void TurnAllocateRequest::OnAuthChallenge(StunMessage* response, int code) {
   port_->set_nonce(nonce_attr->GetString());
 
   // Send another allocate request, with the received realm and nonce values.
-  port_->SendRequest(new TurnAllocateRequest(port_), 0);
+  // Below patch is to add the support for ipv6 relay candidate
+  //port_->SendRequest(new TurnAllocateRequest(port_), 0);
+  TurnAllocateRequest * newRequest = new TurnAllocateRequest(port_);
+  newRequest->SetRequestPreference(port_->send_ipv6_request);
+  port_->SendRequest(newRequest, 0);
 }
 
 void TurnAllocateRequest::OnTryAlternate(StunMessage* response, int code) {
diff --git a/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turnport.h b/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turnport.h
index 11b58d4f6c99..04658fb31854 100644
--- a/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turnport.h
+++ b/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/turnport.h
@@ -324,6 +324,9 @@ class TurnPort : public Port {
   std::string nonce_;       // From 401/438 response message.
   std::string hash_;        // Digest of username:realm:password
 
+// Below patch is to add the support for ipv6 relay candidate
+  bool send_ipv6_request;
+
   int next_channel_number_;
   EntryList entries_;
 
-- 
2.17.1

