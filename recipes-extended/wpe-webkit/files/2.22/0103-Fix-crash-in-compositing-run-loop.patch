From 5c56840210f008fb37e882383281e1c8e9765336 Mon Sep 17 00:00:00 2001
From: Ievgen Mutavchi <Ievgen_Mutavchi@comcast.com>
Date: Sun, 26 Apr 2020 13:26:32 -0400
Subject: [PATCH 92/93] Fix crash in compositing run loop
Source: COMCAST
Upstream-Status: None
Signed-off-by: Eugene Mutavchi <Ievgen_Mutavchi@comcast.com>

---
 .../threadedcompositor/CompositingRunLoop.cpp | 33 ++++++++++++++-----
 .../threadedcompositor/CompositingRunLoop.h   |  1 +
 2 files changed, 25 insertions(+), 9 deletions(-)

Index: git/Source/WebKit/Shared/CoordinatedGraphics/threadedcompositor/CompositingRunLoop.cpp
===================================================================
--- git.orig/Source/WebKit/Shared/CoordinatedGraphics/threadedcompositor/CompositingRunLoop.cpp
+++ git/Source/WebKit/Shared/CoordinatedGraphics/threadedcompositor/CompositingRunLoop.cpp
@@ -50,19 +50,20 @@ public:
         return workQueuePool;
     }
 
-    void dispatch(void* context, Function<void ()>&& function)
+    void dispatch(uint32_t context, Function<void ()>&& function)
     {
         ASSERT(RunLoop::isMain());
         getOrCreateWorkQueueForContext(context).dispatch(WTFMove(function));
     }
 
-    RunLoop& runLoop(void* context)
+    RunLoop& runLoop(uint32_t context)
     {
         return getOrCreateWorkQueueForContext(context).runLoop();
     }
 
-    void invalidate(void* context)
+    void invalidate(uint32_t context)
     {
+        LockHolder locker(m_lock);
         auto workQueue = m_workQueueMap.take(context);
         ASSERT(workQueue);
         if (m_workQueueMap.isEmpty()) {
@@ -79,8 +80,9 @@ private:
         m_threadCountLimit = 1;
     }
 
-    WorkQueue& getOrCreateWorkQueueForContext(void* context)
+    WorkQueue& getOrCreateWorkQueueForContext(uint32_t context)
     {
+        LockHolder locker(m_lock);
         auto addResult = m_workQueueMap.add(context, nullptr);
         if (addResult.isNewEntry) {
             // FIXME: This is OK for now, and it works for a single-thread limit. But for configurations where more (but not unlimited)
@@ -99,14 +101,27 @@ private:
         return *addResult.iterator->value;
     }
 
-    HashMap<void*, RefPtr<WorkQueue>> m_workQueueMap;
+    HashMap<uint32_t, RefPtr<WorkQueue>> m_workQueueMap;
     RefPtr<WorkQueue> m_sharedWorkQueue;
     unsigned m_threadCount { 0 };
     unsigned m_threadCountLimit;
+    Lock m_lock;
 };
 
+static uint32_t generateNextId()
+{
+    static Atomic<uint32_t> s_id;
+    for (;;) {
+        unsigned currentId = s_id.load();
+        unsigned newId = currentId + 1;
+        if (s_id.compareExchangeWeak(currentId, newId))
+            return newId;
+    }
+}
+
 CompositingRunLoop::CompositingRunLoop(Function<void ()>&& updateFunction)
-    : m_updateTimer(WorkQueuePool::singleton().runLoop(this), this, &CompositingRunLoop::updateTimerFired)
+    : m_contextId(generateNextId())
+    , m_updateTimer(WorkQueuePool::singleton().runLoop(m_contextId), this, &CompositingRunLoop::updateTimerFired)
     , m_updateFunction(WTFMove(updateFunction))
 {
 #if USE(GLIB_EVENT_LOOP)
@@ -121,20 +136,20 @@ CompositingRunLoop::~CompositingRunLoop(
     // Make sure the WorkQueue is deleted after the CompositingRunLoop, because m_updateTimer has a reference
     // of the WorkQueue run loop. Passing this is not a problem because the pointer will only be used as a
     // HashMap key by WorkQueuePool.
-    RunLoop::main().dispatch([context = this] { WorkQueuePool::singleton().invalidate(context); });
+    RunLoop::main().dispatch([contextId = m_contextId] { WorkQueuePool::singleton().invalidate(contextId); });
 }
 
 void CompositingRunLoop::performTask(Function<void ()>&& function)
 {
     ASSERT(RunLoop::isMain());
-    WorkQueuePool::singleton().dispatch(this, WTFMove(function));
+    WorkQueuePool::singleton().dispatch(m_contextId, WTFMove(function));
 }
 
 void CompositingRunLoop::performTaskSync(Function<void ()>&& function)
 {
     ASSERT(RunLoop::isMain());
     LockHolder locker(m_dispatchSyncConditionMutex);
-    WorkQueuePool::singleton().dispatch(this, [this, function = WTFMove(function)] {
+    WorkQueuePool::singleton().dispatch(m_contextId, [this, function = WTFMove(function)] {
         function();
         LockHolder locker(m_dispatchSyncConditionMutex);
         m_dispatchSyncCondition.notifyOne();
Index: git/Source/WebKit/Shared/CoordinatedGraphics/threadedcompositor/CompositingRunLoop.h
===================================================================
--- git.orig/Source/WebKit/Shared/CoordinatedGraphics/threadedcompositor/CompositingRunLoop.h
+++ git/Source/WebKit/Shared/CoordinatedGraphics/threadedcompositor/CompositingRunLoop.h
@@ -71,6 +71,7 @@ private:
 
     void updateTimerFired();
 
+    uint32_t m_contextId { 0 };
     RunLoop::Timer<CompositingRunLoop> m_updateTimer;
     Function<void ()> m_updateFunction;
     Lock m_dispatchSyncConditionMutex;
