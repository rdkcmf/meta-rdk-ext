From f545ca17e96d76655193ac966ec8486135f71cde Mon Sep 17 00:00:00 2001
From: "philn@webkit.org"
 <philn@webkit.org@268f45cc-cd09-0410-ab3c-d52691b4dbfc>
Date: Thu, 25 Apr 2019 07:47:25 +0000
Subject: [PATCH 15/15] [REGRESSION(r243197)][GStreamer]
 http/tests/media/clearkey/collect-webkit-media-session.html hits an ASSERT
 https://bugs.webkit.org/show_bug.cgi?id=197230

Reviewed by Xabier Rodriguez-Calvar.

Perform the resource loader disposal and destruction from the main
thread. Also ensure there's no circular reference between the
CachedResourceStreamingClient and WebKitWebSrc when disposing of
the private WebKitWebSrc storage.

* platform/graphics/gstreamer/MainThreadNotifier.h:
* platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
(_WebKitWebSrcPrivate::~_WebKitWebSrcPrivate):
(webkit_web_src_class_init):
(webKitWebSrcDispose):
(webKitWebSrcCloseSession):
(webKitWebSrcFinalize): Deleted.

git-svn-id: http://svn.webkit.org/repository/webkit/trunk@244640 268f45cc-cd09-0410-ab3c-d52691b4dbfc
---
 .../graphics/gstreamer/MainThreadNotifier.h   | 25 ++++++++++++
 .../gstreamer/WebKitWebSourceGStreamer.cpp    | 40 ++++++++++++-------
 2 files changed, 50 insertions(+), 15 deletions(-)

diff --git a/Source/WebCore/platform/graphics/gstreamer/MainThreadNotifier.h b/Source/WebCore/platform/graphics/gstreamer/MainThreadNotifier.h
index 3f6515a3c80b..ed7e9c8dba93 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MainThreadNotifier.h
+++ b/Source/WebCore/platform/graphics/gstreamer/MainThreadNotifier.h
@@ -35,6 +35,13 @@ public:
         return adoptRef(*new MainThreadNotifier());
     }
 
+    ~MainThreadNotifier()
+    {
+        ASSERT(!m_isValid.load());
+    }
+
+    bool isValid() const { return m_isValid.load(); }
+
     template<typename F>
     void notify(T notificationType, F&& callbackFunctor, bool preserveOrdering = false)
     {
@@ -56,6 +63,24 @@ public:
         });
     }
 
+    template<typename F>
+    void notifyAndWait(T notificationType, F&& callbackFunctor)
+    {
+        Lock mutex;
+        Condition condition;
+
+        notify(notificationType, [functor = WTFMove(callbackFunctor), &condition, &mutex] {
+            functor();
+            LockHolder holder(mutex);
+            condition.notifyOne();
+        });
+
+        if (!isMainThread()) {
+            LockHolder holder(mutex);
+            condition.wait(mutex);
+        }
+    }
+
     void cancelPendingNotifications(unsigned mask = 0)
     {
         ASSERT(m_isValid.load());
diff --git a/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp
index a85d2c4f49aa..67cba82ea8db 100644
--- a/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp
@@ -50,6 +50,9 @@ class CachedResourceStreamingClient final : public PlatformMediaResourceClient {
 public:
     CachedResourceStreamingClient(WebKitWebSrc*, ResourceRequest&&);
     virtual ~CachedResourceStreamingClient();
+
+    void setSourceElement(WebKitWebSrc* src) { m_src = GST_ELEMENT_CAST(src); }
+
 private:
     void checkUpdateBlocksize(uint64_t bytesRead);
 
@@ -78,13 +81,33 @@ enum MainThreadSourceNotification {
     Stop = 1 << 1,
     NeedData = 1 << 2,
     EnoughData = 1 << 3,
-    Seek = 1 << 4
+    Seek = 1 << 4,
+    Dispose = 1 << 5
 };
 
 #define WEBKIT_WEB_SRC_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), WEBKIT_TYPE_WEB_SRC, WebKitWebSrcPrivate))
 struct _WebKitWebSrcPrivate {
     GstAppSrc* appsrc;
     GstPad* srcpad;
+
+    ~_WebKitWebSrcPrivate()
+    {
+        if (notifier && notifier->isValid()) {
+            notifier->notifyAndWait(MainThreadSourceNotification::Dispose, [&] {
+                if (resource) {
+                    auto* client = static_cast<CachedResourceStreamingClient*>(resource->client());
+                    if (client)
+                        client->setSourceElement(nullptr);
+
+                    resource->setClient(nullptr);
+                }
+                loader = nullptr;
+            });
+            notifier->invalidate();
+            notifier = nullptr;
+        }
+    }
+
     CString originalURI;
     CString redirectedURI;
     bool keepAlive;
@@ -136,7 +159,6 @@ GST_DEBUG_CATEGORY_STATIC(webkit_web_src_debug);
 static void webKitWebSrcUriHandlerInit(gpointer gIface, gpointer ifaceData);
 
 static void webKitWebSrcDispose(GObject*);
-static void webKitWebSrcFinalize(GObject*);
 static void webKitWebSrcSetProperty(GObject*, guint propertyID, const GValue*, GParamSpec*);
 static void webKitWebSrcGetProperty(GObject*, guint propertyID, GValue*, GParamSpec*);
 static GstStateChangeReturn webKitWebSrcChangeState(GstElement*, GstStateChange);
@@ -176,7 +198,6 @@ static void webkit_web_src_class_init(WebKitWebSrcClass* klass)
     GstElementClass* eklass = GST_ELEMENT_CLASS(klass);
 
     oklass->dispose = webKitWebSrcDispose;
-    oklass->finalize = webKitWebSrcFinalize;
     oklass->set_property = webKitWebSrcSetProperty;
     oklass->get_property = webKitWebSrcGetProperty;
 
@@ -275,23 +296,12 @@ static void webkit_web_src_init(WebKitWebSrc* src)
 }
 
 static void webKitWebSrcDispose(GObject* object)
-{
-    WebKitWebSrcPrivate* priv = WEBKIT_WEB_SRC(object)->priv;
-    if (priv->notifier) {
-        priv->notifier->invalidate();
-        priv->notifier = nullptr;
-    }
-
-    GST_CALL_PARENT(G_OBJECT_CLASS, dispose, (object));
-}
-
-static void webKitWebSrcFinalize(GObject* object)
 {
     WebKitWebSrcPrivate* priv = WEBKIT_WEB_SRC(object)->priv;
 
     priv->~WebKitWebSrcPrivate();
 
-    GST_CALL_PARENT(G_OBJECT_CLASS, finalize, (object));
+    GST_CALL_PARENT(G_OBJECT_CLASS, dispose, (object));
 }
 
 static void webKitWebSrcSetProperty(GObject* object, guint propID, const GValue* value, GParamSpec* pspec)
-- 
2.24.0

