From a2b6c36ce3f05fcbdafe48843f8a18e79566940e Mon Sep 17 00:00:00 2001
From: Siva Sankar Raja <sivasankar_raja@comcast.com>
Source: COMCAST
Upstream-Status: Pending
Signed-off-by: Siva Sankar Raja <sivasankar_raja@comcast.com>
Date: Fri, 5 Jul 2019 17:44:28 +0000
Subject: [PATCH] Dynamic insertion of decryptor element

---
 .../graphics/gstreamer/mse/AppendPipeline.cpp      |   2 +-
 .../graphics/gstreamer/mse/PlaybackPipeline.cpp    |   5 +
 .../gstreamer/mse/WebKitMediaSourceGStreamer.cpp   | 146 +++++++++++++++++++++
 .../mse/WebKitMediaSourceGStreamerPrivate.h        |   7 +
 4 files changed, 159 insertions(+), 1 deletion(-)

Index: git/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
===================================================================
--- git.orig/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
+++ git/Source/WebCore/platform/graphics/gstreamer/mse/AppendPipeline.cpp
@@ -172,7 +172,7 @@ public:
             }
 
             // If the first sample (DTS=0) doesn't start with PTS=0, compute a negative offset.
-            if (!GST_BUFFER_DTS(buffer) && GST_BUFFER_PTS(buffer) && !m_ptsOffset.isValid()) {
+            if (!GST_BUFFER_DTS(buffer) && GST_BUFFER_PTS(buffer) /*&& !m_ptsOffset.isValid()*/) {
                 m_ptsOffset = MediaTime(GST_BUFFER_DTS(buffer), GST_SECOND) - MediaTime(GST_BUFFER_PTS(buffer), GST_SECOND);
                 GST_TRACE("Setting an offset of %s\n", m_ptsOffset.toString().utf8().data());
             }
Index: git/Source/WebCore/platform/graphics/gstreamer/mse/PlaybackPipeline.cpp
===================================================================
--- git.orig/Source/WebCore/platform/graphics/gstreamer/mse/PlaybackPipeline.cpp
+++ git/Source/WebCore/platform/graphics/gstreamer/mse/PlaybackPipeline.cpp
@@ -120,6 +120,11 @@ MediaSourcePrivate::AddStatus PlaybackPi
 
     // No track has been attached yet.
     stream->type = Invalid;
+#if ENABLE(ENCRYPTED_MEDIA)
+    stream->decryptor = nullptr;
+    stream->decryptorAttached = false;
+    stream->decryptorProbeId = 0;
+#endif
     stream->caps = nullptr;
     stream->audioTrack = nullptr;
     stream->videoTrack = nullptr;
Index: git/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
===================================================================
--- git.orig/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
+++ git/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamer.cpp
@@ -471,6 +471,139 @@ void webKitMediaSrcUpdatePresentationSiz
     GST_OBJECT_UNLOCK(stream->parent);
 }
 
+#if ENABLE(ENCRYPTED_MEDIA)
+GstElement* createDecryptor(const char* requestedProtectionSystemUuid)
+{
+    GstElement* decryptor = nullptr;
+    GList* decryptors = gst_element_factory_list_get_elements(GST_ELEMENT_FACTORY_TYPE_DECRYPTOR, GST_RANK_MARGINAL);
+
+    for (GList* walk = decryptors; !decryptor && walk; walk = g_list_next(walk)) {
+        GstElementFactory* factory = reinterpret_cast<GstElementFactory*>(walk->data);
+
+        for (const GList* current = gst_element_factory_get_static_pad_templates(factory); current && !decryptor; current = g_list_next(current)) {
+            GstStaticPadTemplate* staticPadTemplate = static_cast<GstStaticPadTemplate*>(current->data);
+            GRefPtr<GstCaps> caps = adoptGRef(gst_static_pad_template_get_caps(staticPadTemplate));
+            unsigned length = gst_caps_get_size(caps.get());
+
+            GST_TRACE("factory %s caps has size %u", GST_OBJECT_NAME(factory), length);
+            for (unsigned i = 0; !decryptor && i < length; ++i) {
+                GstStructure* structure = gst_caps_get_structure(caps.get(), i);
+                GST_TRACE("checking structure %s", gst_structure_get_name(structure));
+                if (gst_structure_has_field_typed(structure, GST_PROTECTION_SYSTEM_ID_CAPS_FIELD, G_TYPE_STRING)) {
+                    const char* protectionSystemUuid = gst_structure_get_string(structure, GST_PROTECTION_SYSTEM_ID_CAPS_FIELD);
+                    GST_TRACE("structure %s has protection system %s", gst_structure_get_name(structure), protectionSystemUuid);
+                    if (!g_ascii_strcasecmp(requestedProtectionSystemUuid, protectionSystemUuid)) {
+                        GST_DEBUG("found decryptor %s for %s", GST_OBJECT_NAME(factory), requestedProtectionSystemUuid);
+                        decryptor = gst_element_factory_create(factory, nullptr);
+                        break;
+                    }
+                }
+            }
+        }
+    }
+    gst_plugin_feature_list_free(decryptors);
+    GST_TRACE("returning decryptor %p", decryptor);
+    return decryptor;
+}
+
+GstPadProbeReturn onAppSrcPadEvent(GstPad* pad, GstPadProbeInfo* info, gpointer data)
+{
+    if (!(GST_PAD_PROBE_INFO_TYPE (info) & GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM))
+    {
+        return GST_PAD_PROBE_OK;
+    }
+
+    GstEvent *event = GST_PAD_PROBE_INFO_EVENT (info);
+
+    if (GST_EVENT_TYPE (event) != GST_EVENT_CAPS)
+    {
+        if (GST_EVENT_TYPE (event) == GST_EVENT_EOS) {
+            Stream* stream = reinterpret_cast<Stream*>(data);
+            stream->decryptorProbeId = 0;
+            return GST_PAD_PROBE_REMOVE;
+        }
+        return GST_PAD_PROBE_OK;
+    }
+
+    GstCaps* caps = nullptr;
+    gst_event_parse_caps(event, &caps);
+
+    if (caps != nullptr)
+    {
+        unsigned padId = static_cast<unsigned>(GPOINTER_TO_INT(g_object_get_data(G_OBJECT(pad), "padId")));
+        GUniquePtr<gchar> padName(g_strdup_printf("src_%u", padId));
+
+        Stream* stream = reinterpret_cast<Stream*>(data);
+        GstElement* decryptor = stream->decryptor.get();
+        bool decryptorAttached = decryptor && stream->decryptorAttached;
+
+        if(!decryptorAttached && WebCore::areEncryptedCaps(caps))
+        {
+            if(!decryptor)
+            {
+                GstStructure* structure = gst_caps_get_structure(caps, 0);
+                stream->decryptor = createDecryptor(gst_structure_get_string(structure, "protection-system"));
+                decryptor = stream->decryptor.get();
+                if (!decryptor)
+                {
+                    GST_ERROR("Failed to create decryptor");
+                    stream->decryptorProbeId = 0;
+                    return GST_PAD_PROBE_REMOVE;
+                }
+
+                gst_bin_add(GST_BIN(stream->parent), decryptor);
+            }
+
+            GST_DEBUG("padname: %s Got CAPS=%" GST_PTR_FORMAT ", Add decryptor %" GST_PTR_FORMAT, padName.get(), caps, decryptor);
+
+            gst_element_sync_state_with_parent(decryptor);
+
+            GRefPtr<GstPad> decryptorSinkPad = adoptGRef(gst_element_get_static_pad(decryptor, "sink"));
+            GRefPtr<GstPad> decryptorSrcPad = adoptGRef(gst_element_get_static_pad(decryptor, "src"));
+            GstPad *srcPad = pad;
+            GRefPtr<GstPad> peerPad = adoptGRef(gst_pad_get_peer(srcPad));
+            GstPadLinkReturn rc;
+
+            if (!gst_pad_unlink(srcPad, peerPad.get()))
+                GST_ERROR("Failed to unlink '%s' src pad", padName.get());
+            else if (GST_PAD_LINK_OK != (rc = gst_pad_link(srcPad, decryptorSinkPad.get())))
+                GST_ERROR("Failed to link pad to decryptorSinkPad, rc = %d", rc);
+            else if (GST_PAD_LINK_OK != (rc = gst_pad_link(decryptorSrcPad.get(), peerPad.get())))
+                GST_ERROR("Failed to link decryptorSrcPad to app sink, rc = %d", rc);
+
+            stream->decryptorAttached = true;
+        }
+        else if (decryptorAttached && !WebCore::areEncryptedCaps(caps))
+        {
+            GST_DEBUG("padname: %s Got CAPS=%" GST_PTR_FORMAT ", Remove decryptor %" GST_PTR_FORMAT, padName.get(), caps, decryptor);
+
+            GRefPtr<GstPad> decryptorSinkPad = adoptGRef(gst_element_get_static_pad(decryptor, "sink"));
+            GRefPtr<GstPad> decryptorSrcPad = adoptGRef(gst_element_get_static_pad(decryptor, "src"));
+            GRefPtr<GstPad> peerPad = adoptGRef(gst_pad_get_peer(decryptorSrcPad.get()));
+            GstPad *srcPad = pad;
+            GstPadLinkReturn rc;
+
+            if (!gst_pad_unlink(decryptorSrcPad.get(), peerPad.get()))
+                GST_ERROR("Failed to unlink decryptorSrcPad");
+            else if (!gst_pad_unlink(srcPad, decryptorSinkPad.get()))
+                GST_ERROR("Failed to unlink decryptorSinkPad");
+            else if (GST_PAD_LINK_OK != (rc = gst_pad_link(srcPad, peerPad.get())))
+                GST_ERROR("Failed to link '%s' to peer pad, rc = %d", padName.get(), rc);
+
+            stream->decryptorAttached = false;
+        }
+        else
+        {
+            GST_DEBUG("padname: %s Got CAPS %" GST_PTR_FORMAT ", decryptorAttached = %s, caps are encrypted= %s",
+                    padName.get(), caps, decryptorAttached ? "yes" : "no",
+                    WebCore::areEncryptedCaps(caps) ? "yes" : "no");
+        }
+    }
+
+    return GST_PAD_PROBE_OK;
+}
+#endif
+
 void webKitMediaSrcLinkStreamToSrcPad(GstPad* sourcePad, Stream* stream)
 {
     unsigned padId = static_cast<unsigned>(GPOINTER_TO_INT(g_object_get_data(G_OBJECT(sourcePad), "padId")));
@@ -486,6 +619,10 @@ void webKitMediaSrcLinkStreamToSrcPad(Gs
 
     gst_pad_set_active(ghostpad, TRUE);
     gst_element_add_pad(GST_ELEMENT(stream->parent), ghostpad);
+
+#if ENABLE(ENCRYPTED_MEDIA)
+    stream->decryptorProbeId = gst_pad_add_probe(sourcePad, GST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM, onAppSrcPadEvent, stream, nullptr);
+#endif
 }
 
 void webKitMediaSrcLinkSourcePad(GstPad* sourcePad, GstCaps* caps, Stream* stream)
@@ -509,6 +646,14 @@ void webKitMediaSrcLinkSourcePad(GstPad*
 
 void webKitMediaSrcFreeStream(WebKitMediaSrc* source, Stream* stream)
 {
+#if ENABLE(ENCRYPTED_MEDIA)
+    if (stream->appsrc && stream->decryptorProbeId) {
+        GRefPtr<GstPad> appsrcPad = adoptGRef(gst_element_get_static_pad(stream->appsrc, "src"));
+        gst_pad_remove_probe(appsrcPad.get(), stream->decryptorProbeId);
+        stream->decryptorProbeId = 0;
+    }
+#endif
+
     if (GST_IS_APP_SRC(stream->appsrc)) {
         // Don't trigger callbacks from this appsrc to avoid using the stream anymore.
         gst_app_src_set_callbacks(GST_APP_SRC(stream->appsrc), &disabledAppsrcCallbacks, nullptr, nullptr);
@@ -565,6 +710,10 @@ void webKitMediaSrcFreeStream(WebKitMedi
 
         source->priv->streamCondition.notifyOne();
     }
+#if ENABLE(ENCRYPTED_MEDIA)
+    if (stream->decryptor)
+        stream->decryptor = nullptr;
+#endif
 
     GST_DEBUG("Releasing stream: %p", stream);
     delete stream;
Index: git/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamerPrivate.h
===================================================================
--- git.orig/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamerPrivate.h
+++ git/Source/WebCore/platform/graphics/gstreamer/mse/WebKitMediaSourceGStreamerPrivate.h
@@ -58,6 +58,13 @@ struct _Stream {
 
     // Fields filled when the track is attached.
     WebCore::MediaSourceStreamTypeGStreamer type;
+
+#if ENABLE(ENCRYPTED_MEDIA)
+    GRefPtr<GstElement> decryptor;
+    bool decryptorAttached;
+    gulong decryptorProbeId;
+#endif
+
     GRefPtr<GstCaps> caps;
 
     // Only audio, video or nothing at a given time.
