From 44aa763243a8f610ebe70e55dfe6718a46726c5a Mon Sep 17 00:00:00 2001
From: "mark.lam@apple.com"
 <mark.lam@apple.com@268f45cc-cd09-0410-ab3c-d52691b4dbfc>
Date: Tue, 5 Feb 2019 23:34:05 +0000
Subject: [PATCH 09/15] Fix DFG's doesGC() for a few more nodes.
 https://bugs.webkit.org/show_bug.cgi?id=194307 <rdar://problem/47832956>

Reviewed by Yusuke Suzuki.

Fix doesGC() for the following nodes:

    NumberToStringWithValidRadixConstant:
        Calls operationInt32ToStringWithValidRadix(), which calls int32ToString(),
        which can allocate a string.
        Calls operationInt52ToStringWithValidRadix(), which calls int52ToString(),
        which can allocate a string.
        Calls operationDoubleToStringWithValidRadix(), which calls numberToString(),
        which can allocate a string.

    RegExpExecNonGlobalOrSticky: calls createRegExpMatchesArray() which allocates
        memory for all kinds of objects.
    RegExpMatchFast: calls operationRegExpMatchFastString(), which calls
        RegExpObject::execInline() and RegExpObject::matchGlobal().  Both of
        these allocates memory for the match result.
    RegExpMatchFastGlobal: calls operationRegExpMatchFastGlobalString(), which
        calls RegExpObject's collectMatches(), which allocates an array amongst
        other objects.

    StringFromCharCode:
        If the uint32 code to convert is greater than maxSingleCharacterString,
        we'll call operationStringFromCharCode(), which calls jsSingleCharacterString(),
        which allocates a new string if the code is greater than maxSingleCharacterString.

Also fix SpeculativeJIT::compileFromCharCode() and FTL's compileStringFromCharCode()
to use maxSingleCharacterString instead of a literal constant.

* dfg/DFGDoesGC.cpp:
(JSC::DFG::doesGC):
* dfg/DFGSpeculativeJIT.cpp:
(JSC::DFG::SpeculativeJIT::compileFromCharCode):
* ftl/FTLLowerDFGToB3.cpp:
(JSC::FTL::DFG::LowerDFGToB3::compileStringFromCharCode):

git-svn-id: http://svn.webkit.org/repository/webkit/trunk@240998 268f45cc-cd09-0410-ab3c-d52691b4dbfc
---
 Source/JavaScriptCore/ChangeLog               | 42 +++++++++++++++++++
 Source/JavaScriptCore/dfg/DFGDoesGC.cpp       | 22 ++++++----
 .../JavaScriptCore/dfg/DFGSpeculativeJIT.cpp  |  2 +-
 Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp |  2 +-
 4 files changed, 58 insertions(+), 10 deletions(-)

diff --git a/Source/JavaScriptCore/ChangeLog b/Source/JavaScriptCore/ChangeLog
index 2b9076faade7..a8587e246eea 100644
--- a/Source/JavaScriptCore/ChangeLog
+++ b/Source/JavaScriptCore/ChangeLog
@@ -1,3 +1,45 @@
+2019-02-05  Mark Lam  <mark.lam@apple.com>
+
+        Fix DFG's doesGC() for a few more nodes.
+        https://bugs.webkit.org/show_bug.cgi?id=194307
+        <rdar://problem/47832956>
+
+        Reviewed by Yusuke Suzuki.
+
+        Fix doesGC() for the following nodes:
+
+            NumberToStringWithValidRadixConstant:
+                Calls operationInt32ToStringWithValidRadix(), which calls int32ToString(),
+                which can allocate a string.
+                Calls operationInt52ToStringWithValidRadix(), which calls int52ToString(),
+                which can allocate a string.
+                Calls operationDoubleToStringWithValidRadix(), which calls numberToString(),
+                which can allocate a string.
+
+            RegExpExecNonGlobalOrSticky: calls createRegExpMatchesArray() which allocates
+                memory for all kinds of objects.
+            RegExpMatchFast: calls operationRegExpMatchFastString(), which calls
+                RegExpObject::execInline() and RegExpObject::matchGlobal().  Both of
+                these allocates memory for the match result.
+            RegExpMatchFastGlobal: calls operationRegExpMatchFastGlobalString(), which
+                calls RegExpObject's collectMatches(), which allocates an array amongst
+                other objects.
+
+            StringFromCharCode:
+                If the uint32 code to convert is greater than maxSingleCharacterString,
+                we'll call operationStringFromCharCode(), which calls jsSingleCharacterString(),
+                which allocates a new string if the code is greater than maxSingleCharacterString.
+
+        Also fix SpeculativeJIT::compileFromCharCode() and FTL's compileStringFromCharCode()
+        to use maxSingleCharacterString instead of a literal constant.
+
+        * dfg/DFGDoesGC.cpp:
+        (JSC::DFG::doesGC):
+        * dfg/DFGSpeculativeJIT.cpp:
+        (JSC::DFG::SpeculativeJIT::compileFromCharCode):
+        * ftl/FTLLowerDFGToB3.cpp:
+        (JSC::FTL::DFG::LowerDFGToB3::compileStringFromCharCode):
+
 2019-02-18  Mark Lam  <mark.lam@apple.com>
 
         Fix DFG doesGC() for CompareEq/Less/LessEq/Greater/GreaterEq and CompareStrictEq nodes.
diff --git a/Source/JavaScriptCore/dfg/DFGDoesGC.cpp b/Source/JavaScriptCore/dfg/DFGDoesGC.cpp
index f7d6536bf1cf..b9c2198d9ffc 100644
--- a/Source/JavaScriptCore/dfg/DFGDoesGC.cpp
+++ b/Source/JavaScriptCore/dfg/DFGDoesGC.cpp
@@ -141,11 +141,6 @@ bool doesGC(Graph& graph, Node* node)
     case CheckNotEmpty:
     case AssertNotEmpty:
     case CheckStringIdent:
-    case RegExpExec:
-    case RegExpExecNonGlobalOrSticky:
-    case RegExpTest:
-    case RegExpMatchFast:
-    case RegExpMatchFastGlobal:
     case CompareBelow:
     case CompareBelowEq:
     case CompareEqPtr:
@@ -186,8 +181,6 @@ bool doesGC(Graph& graph, Node* node)
     case ToNumber:
     case ToString:
     case CallStringConstructor:
-    case NumberToStringWithRadix:
-    case NumberToStringWithValidRadixConstant:
     case InByVal:
     case InById:
     case HasOwnProperty:
@@ -206,7 +199,6 @@ bool doesGC(Graph& graph, Node* node)
     case ForceOSRExit:
     case CPUIntrinsic:
     case CheckTraps:
-    case StringFromCharCode:
     case NormalizeMapKey:
     case GetMapBucket:
     case GetMapBucketHead:
@@ -367,6 +359,13 @@ bool doesGC(Graph& graph, Node* node)
     case ParseInt: // We might resolve a rope even though we don't clobber anything.
     case SetAdd:
     case MapSet:
+    case RegExpExec:
+    case RegExpExecNonGlobalOrSticky:
+    case RegExpTest:
+    case RegExpMatchFast:
+    case RegExpMatchFastGlobal:
+    case NumberToStringWithRadix:
+    case NumberToStringWithValidRadixConstant:
         return true;
 
     case CompareEq:
@@ -424,6 +423,13 @@ bool doesGC(Graph& graph, Node* node)
     case MultiPutByOffset:
         return node->multiPutByOffsetData().reallocatesStorage();
 
+    case StringFromCharCode:
+        // FIXME: Should we constant fold this case?
+        // https://bugs.webkit.org/show_bug.cgi?id=194308
+        if (node->child1()->isInt32Constant() && (node->child1()->asUInt32() <= maxSingleCharacterString))
+            return false;
+        return true;
+
     case LastNodeType:
         RELEASE_ASSERT_NOT_REACHED();
         return true;
diff --git a/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp b/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp
index 382842b5d4ab..db841fb944d0 100644
--- a/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp
+++ b/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp
@@ -2285,7 +2285,7 @@ void SpeculativeJIT::compileFromCharCode(Node* node)
     GPRReg smallStringsReg = smallStrings.gpr();
 
     JITCompiler::JumpList slowCases;
-    slowCases.append(m_jit.branch32(MacroAssembler::AboveOrEqual, propertyReg, TrustedImm32(0xff)));
+    slowCases.append(m_jit.branch32(MacroAssembler::AboveOrEqual, propertyReg, TrustedImm32(maxSingleCharacterString)));
     m_jit.move(TrustedImmPtr(m_jit.vm()->smallStrings.singleCharacterStrings()), smallStringsReg);
     m_jit.loadPtr(MacroAssembler::BaseIndex(smallStringsReg, propertyReg, MacroAssembler::ScalePtr, 0), scratchReg);
 
diff --git a/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp b/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp
index f6db24533da2..71c189d5171c 100644
--- a/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp
+++ b/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp
@@ -6515,7 +6515,7 @@ private:
         LBasicBlock continuation = m_out.newBlock();
 
         m_out.branch(
-            m_out.aboveOrEqual(value, m_out.constInt32(0xff)),
+            m_out.aboveOrEqual(value, m_out.constInt32(maxSingleCharacterString)),
             rarely(slowCase), usually(smallIntCase));
 
         LBasicBlock lastNext = m_out.appendTo(smallIntCase, slowCase);
-- 
2.24.0

