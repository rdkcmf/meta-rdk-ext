From 4130c23a6f31051e0d40735f69b61c626a0ae8d2 Mon Sep 17 00:00:00 2001
From: Siva Sankar Raja <sivasankar_raja@comcast.com>
Source: COMCAST
License: LICENSE-LGPL-2.1
Upstream-Status: Pending
Signed-off-by: Siva Sankar Raja <sivasankar_raja@comcast.com>
Date: Thu, 4 Jul 2019 18:43:07 +0000
Subject: [PATCH] updated platform player supportsType() function to
 support additional mimetype arguments (cryptoblockformat & eotf) Youtube
 requires

cryptoblockformat support is added in this commit in upstream WPE:
https://github.com/WebPlatformForEmbedded/WPEWebKit/commit/0e4b75d3a2f3ae7a2fad52879fc6955fd6d9081b
---
 .../mse/MediaPlayerPrivateGStreamerMSE.cpp         | 31 ++++++++++++++++++++++
 1 file changed, 31 insertions(+)

Index: git/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
===================================================================
--- git.orig/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
+++ git/Source/WebCore/platform/graphics/gstreamer/mse/MediaPlayerPrivateGStreamerMSE.cpp
@@ -1084,6 +1084,8 @@ MediaPlayer::SupportsType MediaPlayerPri
         return result;
     }
 
+    GST_DEBUG("supportsType() %s", parameters.type.raw().utf8().data());
+
     bool ok;
     unsigned channels = parameters.type.parameter("channels"_s).toUInt(&ok);
     if (ok && channels > MEDIA_MAX_AAC_CHANNELS)
@@ -1109,6 +1111,34 @@ MediaPlayer::SupportsType MediaPlayerPri
     if (ok && framerate > MEDIA_MAX_FRAMERATE)
         return result;
 
+    // YT check for  electro-optic transfer function (EOTF) support
+    // Possible values:
+    // bt709 (SDR)
+    // smpte2084 HDR10
+    // arib-std-b67 HLG
+
+    String eotf = parameters.type.parameter("eotf"_s);
+    if (!eotf.isEmpty())
+    {
+#if ENABLE(VP9_HDR)
+        if(eotf == "bt709"){
+            GST_DEBUG("eotf = bt709");
+        }else if(eotf == "smpte2084"){
+            GST_DEBUG("eotf = smpte2084");
+        }else if(eotf == "arib-std-b67"){
+            GST_DEBUG("eotf = arib-std-b67");
+        }else{
+            GST_WARNING("unsupported eotf: %s", eotf.utf8().data());
+            return result;
+        }
+#else
+        if(eotf != "bt709"){
+            GST_WARNING("unsupported eotf: %s", eotf.utf8().data());
+            return result;
+        }
+#endif
+    }
+
     // Spec says we should not return "probably" if the codecs string is empty.
     if (MediaPlayerPrivateGStreamerMSE::mimeTypeCache().contains(containerType)) {
         Vector<String> codecs = parameters.type.codecs();
@@ -1117,6 +1147,7 @@ MediaPlayer::SupportsType MediaPlayerPri
         else
             result = supportsAllCodecs(codecs) ? MediaPlayer::IsSupported : MediaPlayer::IsNotSupported;
     }
+    GST_DEBUG("supportsType() result: %d", result);
 
     return extendedSupportsType(parameters, result);
 }
