From 15b620d7746ebdc0c4a94e7fda030b874c717aad Mon Sep 17 00:00:00 2001
From: mgopalakirshnan <manigandan.gopalakrishnan@lnttechservices.com>
Source: COMCAST
License: LICENSE-LGPL-2.1
Upstream-Status: Pending
Signed-off-by: mgopalakirshnan <manigandan.gopalakrishnan@lnttechservices.com>
Date: Fri, 5 Jan 2018 12:09:59 +0000
Subject: [PATCH] 0026-comcast-downscale-jpeg-images

---
 .../image-decoders/jpeg/JPEGImageDecoder.cpp        | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)

Index: git/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp
===================================================================
--- git.orig/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp
+++ git/Source/WebCore/platform/image-decoders/jpeg/JPEGImageDecoder.cpp
@@ -77,6 +77,11 @@ inline bool doFancyUpsampling() { return
 inline bool doFancyUpsampling() { return true; }
 #endif
 
+static bool enableDownscale() {
+    static bool gEnableDownscale = getenv("WPE_DISABLE_JPEG_DOWNSCALE") == nullptr;
+    return gEnableDownscale;
+}
+
 const int exifMarker = JPEG_APP0 + 1;
 
 namespace WebCore {
@@ -321,6 +326,18 @@ public:
 
             m_state = JPEG_START_DECOMPRESS;
 
+            if (enableDownscale())
+            {
+                const double maxWidth = 1280.0;
+                const double maxHeight = 720.0;
+                if (m_info.image_width > maxWidth || m_info.image_height > maxHeight)
+                {
+                    double f = std::min( double(m_info.image_width) / maxWidth, double(m_info.image_height) / maxHeight );
+                    m_info.scale_num = std::max( 1.0, std::min( std::ceil( 8.0 / f ), 8.0 ) );
+                    m_info.scale_denom = 8;
+                }
+            }
+
             // We can fill in the size now that the header is available.
             if (!m_decoder->setSize(IntSize(m_info.image_width, m_info.image_height)))
                 return false;
@@ -334,6 +351,10 @@ public:
             // Used to set up image size so arrays can be allocated.
             jpeg_calc_output_dimensions(&m_info);
 
+            // Update the size
+            if (enableDownscale() && !m_decoder->setSize(IntSize(m_info.output_width, m_info.output_height)))
+                return false;
+
             // Make a one-row-high sample array that will go away when done with
             // image. Always make it big enough to hold an RGB row. Since this
             // uses the IJG memory manager, it must be allocated before the call
