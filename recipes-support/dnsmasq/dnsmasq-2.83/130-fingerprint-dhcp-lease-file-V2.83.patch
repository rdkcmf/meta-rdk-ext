Index: dnsmasq-2.83/src/dnsmasq.h
===================================================================
--- dnsmasq-2.83.orig/src/dnsmasq.h
+++ dnsmasq-2.83/src/dnsmasq.h
@@ -717,6 +717,7 @@ struct dhcp_lease {
   unsigned char *clid;   /* clientid */
   char *hostname, *fqdn; /* name from client-hostname option or config */
   char *old_hostname;    /* hostname before it moved to another lease */
+  char *fingerprint;
   int flags;
   time_t expires;        /* lease expiry */
 #ifdef HAVE_BROKEN_RTC
@@ -1442,6 +1443,7 @@ void lease_find_interfaces(time_t now);
 void lease_add_extradata(struct dhcp_lease *lease, unsigned char *data, 
 			 unsigned int len, int delim);
 #endif
+void lease_add_fingerprint(struct dhcp_lease *lease, unsigned char *req_options);
 #endif
 
 /* rfc2131.c */
Index: dnsmasq-2.83/src/lease.c
===================================================================
--- dnsmasq-2.83.orig/src/lease.c
+++ dnsmasq-2.83/src/lease.c
@@ -29,6 +29,7 @@ static int read_leases(time_t now, FILE
   int clid_len, hw_len, hw_type;
   int items;
   char *domain = NULL;
+  char *dhcp_fingerprint = NULL;
 
   *daemon->dhcp_buff3 = *daemon->dhcp_buff2 = '\0';
 
@@ -41,6 +42,15 @@ static int read_leases(time_t now, FILE
 # error Buffer size breakage in leasefile parsing.
 #endif
 
+    dhcp_fingerprint = safe_malloc(DHCP_BUFF_SZ);
+    if (NULL == dhcp_fingerprint)
+    {
+        my_syslog (LOG_ERR, _("######## Failed to allocate the memory: %s : ##########"),dhcp_fingerprint);
+        return 0;
+    }
+    *dhcp_fingerprint = '\0';
+
+
     while ((items=fscanf(leasestream, "%255s %255s", daemon->dhcp_buff3, daemon->dhcp_buff2)) == 2)
       {
 	*daemon->namebuff = *daemon->dhcp_buff = *daemon->packet = '\0';
@@ -50,8 +60,12 @@ static int read_leases(time_t now, FILE
 	if (strcmp(daemon->dhcp_buff3, "duid") == 0)
 	  {
 	    daemon->duid_len = parse_hex(daemon->dhcp_buff2, (unsigned char *)daemon->dhcp_buff2, 130, NULL, NULL);
-	    if (daemon->duid_len < 0)
+	    if (daemon->duid_len < 0) 
+            {
+              if (NULL != dhcp_fingerprint)
+                free(dhcp_fingerprint);
 	      return 0;
+            }
 	    daemon->duid = safe_malloc(daemon->duid_len);
 	    memcpy(daemon->duid, daemon->dhcp_buff2, daemon->duid_len);
 	    continue;
@@ -116,6 +130,9 @@ static int read_leases(time_t now, FILE
 	if (strcmp(daemon->dhcp_buff, "*") !=  0)
 	  lease_set_hostname(lease, daemon->dhcp_buff, 0, domain, NULL);
 
+         if (strcmp(dhcp_fingerprint, "*") != 0)
+           lease->fingerprint = strdup(dhcp_fingerprint);
+
 	ei = atol(daemon->dhcp_buff3);
 
 #ifdef HAVE_BROKEN_RTC
@@ -133,10 +150,12 @@ static int read_leases(time_t now, FILE
 	/* set these correctly: the "old" events are generated later from
 	   the startup synthesised SIGHUP. */
 	lease->flags &= ~(LEASE_NEW | LEASE_CHANGED);
-	
-	*daemon->dhcp_buff3 = *daemon->dhcp_buff2 = '\0';
+
+        *daemon->dhcp_buff3 = *daemon->dhcp_buff2 = *dhcp_fingerprint = '\0';	
       }
     
+    if (NULL != dhcp_fingerprint)
+        free(dhcp_fingerprint);
     return (items == 0 || items == EOF);
 }
 
@@ -288,7 +307,8 @@ void lease_update_file(time_t now)
 
 	  ourprintf(&err, " %s ", daemon->addrbuff);
 	  ourprintf(&err, "%s ", lease->hostname ? lease->hostname : "*");
-	  	  
+	  ourprintf(&err, "%s ", lease->fingerprint ? lease->fingerprint : "*");
+ 
 	  if (lease->clid && lease->clid_len != 0)
 	    {
 	      for (i = 0; i < lease->clid_len - 1; i++)
@@ -563,8 +583,14 @@ void lease_prune(struct dhcp_lease *targ
 	  file_dirty = 1;
 	  if (lease->hostname)
 	    dns_dirty = 1;
-
+            
 	  daemon->metrics[lease->addr.s_addr ? METRIC_LEASES_PRUNED_4 : METRIC_LEASES_PRUNED_6]++;
+   
+          if (lease->fingerprint)
+            {
+              free(lease->fingerprint);
+              lease->fingerprint = NULL;
+            }
 
  	  *up = lease->next; /* unlink */
 	  
@@ -773,6 +799,7 @@ static struct dhcp_lease *lease_allocate
   lease->length = 0xffffffff; /* illegal value */
 #endif
   lease->hwaddr_len = 256; /* illegal value */
+  lease->fingerprint = NULL;
   lease->next = leases;
   leases = lease;
   
@@ -1201,6 +1228,55 @@ void lease_add_extradata(struct dhcp_lea
 }
 #endif
 
+#define SZ_FINGERPRINT  (256)
+void lease_add_fingerprint(struct dhcp_lease *lease, unsigned char *req_options)
+{
+  unsigned int i, len, left;
+  if (req_options == NULL || req_options[0] == OPTION_END)
+  {
+    /*
+     * We were given empty options -- we are not allowed to generate an empty fingerprint string, in such case
+     * it should be set to NULL instead of ""
+     */
+    if (lease->fingerprint != NULL)
+      free(lease->fingerprint);
+
+     lease->fingerprint = NULL;
+     return;
+  }
+
+  if (lease->fingerprint != NULL)
+       free(lease->fingerprint);
+
+    lease->fingerprint = whine_malloc(SZ_FINGERPRINT);
+    if (lease->fingerprint == NULL)
+      return;
+
+  char *q = lease->fingerprint;
+  for (i = 0; req_options[i] != OPTION_END; i++)
+  {
+    left = (SZ_FINGERPRINT - (q - lease->fingerprint));
+    len  = snprintf(q,
+                    left,
+                    "%d%s",
+                    req_options[i],
+                    req_options[i+1] == OPTION_END ? "" : ",");
+    /*
+     * snprintf returns len that would have been written, not
+     * how much was actually written. This means return value
+     * can be higher then max length provided
+     */
+    if (len > left) {
+      /*
+       * Not enough room to append the entire otpion,
+       * so truncate after last option
+       */
+      *(q-1) = '\0';
+      break;
+    }
+    q += len;
+  }
+}
 #endif
 	  
 
Index: dnsmasq-2.83/src/rfc2131.c
===================================================================
--- dnsmasq-2.83.orig/src/rfc2131.c
+++ dnsmasq-2.83/src/rfc2131.c
@@ -1327,6 +1327,16 @@ size_t dhcp_reply(struct dhcp_context *c
 	    }
 	}
 
+      /* get options information                */
+      if (lease)
+      {
+          lease_add_fingerprint(lease, req_options);
+      }
+      else
+      {
+          my_syslog(LOG_INFO, "fingerprint: lease is null ");
+      }
+
       if (message)
 	{
 	  daemon->metrics[rapid_commit ? METRIC_NOANSWER : METRIC_DHCPNAK]++;
