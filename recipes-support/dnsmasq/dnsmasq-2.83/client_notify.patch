Date: Jan 21, 2020 7:55 PM

Subject: [PATCH] RDKB-22539:[Presence] Device Join/leave detection.

    New requirement has been implemented to identify
    presence of connected clients using Arp message (ipv4),
    neighbour solicitation (ipv6).

Source: COMCAST

License: GPL-2.0-only

Upstream-Status: Pending

Signed-off-by: apalan608 <arunkumar_palanichamy@comcast.com>

Index: dnsmasq-2.83/Makefile
===================================================================
--- dnsmasq-2.83.orig/Makefile
+++ dnsmasq-2.83/Makefile
@@ -89,7 +89,7 @@ all : $(BUILDDIR)
 	@cd $(BUILDDIR) && $(MAKE) \
  top="$(top)" \
  build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags)" \
- build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs)" \
+ build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) -lrt $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs)" \
  -f $(top)/Makefile dnsmasq 
 
 mostly_clean :
@@ -114,7 +114,7 @@ all-i18n : $(BUILDDIR)
  top="$(top)" \
  i18n=-DLOCALEDIR=\'\"$(LOCALEDIR)\"\' \
  build_cflags="$(version) $(dbus_cflags) $(idn2_cflags) $(idn_cflags) $(ct_cflags) $(lua_cflags) $(nettle_cflags)" \
- build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) $(nettle_libs) $(gmp_libs) $(ubus_libs)"  \
+ build_libs="$(dbus_libs) $(idn2_libs) $(idn_libs) $(ct_libs) $(lua_libs) $(sunos_libs) -lrt $(nettle_libs) $(gmp_libs) $(ubus_libs)"  \
  -f $(top)/Makefile dnsmasq
 	for f in `cd $(PO); echo *.po`; do \
 		cd $(top) && cd $(BUILDDIR) && $(MAKE) top="$(top)" -f $(top)/Makefile $${f%.po}.mo; \
Index: dnsmasq-2.83/src/dnsmasq.c
===================================================================
--- dnsmasq-2.83.orig/src/dnsmasq.c
+++ dnsmasq-2.83/src/dnsmasq.c
@@ -1032,7 +1032,12 @@ int main (int argc, char **argv)
   /* Using inotify, have to select a resolv file at startup */
   poll_resolv(1, 0, now);
 #endif
-  
+ 
+#ifdef HAVE_DHCP
+  // monitoring ipv4 device presence feature
+  init_msgq_presence(daemon);
+#endif
+ 
   while (1)
     {
       int t, timeout = -1;
@@ -1064,6 +1069,12 @@ int main (int argc, char **argv)
 #endif
 	  
 #ifdef HAVE_DHCP
+      if (daemon->presenceMq != -1)
+      {
+          poll_listen(daemon->presenceMq, POLLIN);
+          my_syslog(LOG_WARNING, _("Poll listen presence mq"));
+      }
+
       if (daemon->dhcp || daemon->relay4)
 	{
 	  poll_listen(daemon->dhcpfd, POLLIN);
@@ -1223,6 +1234,14 @@ int main (int argc, char **argv)
 #endif      
 
 #ifdef HAVE_DHCP
+      if ( daemon->presenceMq != -1)
+      {
+         if (poll_check(daemon->presenceMq, POLLIN))
+         {
+               receiveq_updatepresence_status(daemon);
+         }
+      }
+
       if (daemon->dhcp || daemon->relay4)
 	{
 	  if (poll_check(daemon->dhcpfd, POLLIN))
Index: dnsmasq-2.83/src/dnsmasq.h
===================================================================
--- dnsmasq-2.83.orig/src/dnsmasq.h
+++ dnsmasq-2.83/src/dnsmasq.h
@@ -139,6 +139,7 @@ typedef unsigned long long u64;
 #ifndef HAVE_LINUX_NETWORK
 #  include <net/if_dl.h>
 #endif
+#include <mqueue.h>
 
 #if defined(HAVE_LINUX_NETWORK)
 #include <linux/version.h>
@@ -1161,7 +1162,7 @@ extern struct daemon {
   /* utility string buffer, hold max sized IP address as string */
   char *addrbuff;
   char *addrbuff2; /* only allocated when OPT_EXTRALOG */
-
+  mqd_t presenceMq; /* message queue for to detect presence of connected device*/
 #ifdef HAVE_DUMPFILE
   /* file for packet dumps. */
   int dumpfd;
Index: dnsmasq-2.83/src/rfc2131.c
===================================================================
--- dnsmasq-2.83.orig/src/rfc2131.c
+++ dnsmasq-2.83/src/rfc2131.c
@@ -15,12 +15,42 @@
 */
 
 #include "dnsmasq.h"
+#include <mqueue.h>
 
 #ifdef HAVE_DHCP
 
 #define option_len(opt) ((int)(((unsigned char *)(opt))[1]))
 #define option_ptr(opt, i) ((void *)&(((unsigned char *)(opt))[2u+(unsigned int)(i)]))
 
+#define EVENT_QUEUE_NAME  "/dnsmasq_eventqueue"
+#define DNSMASQ_PRESENCE_QUEUE_NAME  "/presence_queue"
+#define MAX_SIZE    512
+#define MAX_SIZE_PRESENCE    512
+#define MSG_TYPE_DNSMASQ  6
+#define MSG_TYPE_DNS_PRESENCE 7
+
+#define CHECK(x) \
+    do { \
+        if (!(x)) { \
+            fprintf(stderr, "%s:%d: ", __func__, __LINE__); \
+            perror(#x); \
+            return; \
+        } \
+    } while (0) \
+
+
+typedef struct _EventQData
+{
+    char ip[64];
+    char enable[32];
+    char mac[32];
+    int MsgType;
+}DnsmasqEventQData;
+
+char src_ip[64];
+char presence_notify[32];
+int  unlink_status = 1;
+
 #ifdef HAVE_SCRIPT
 static void add_extradata_opt(struct dhcp_lease *lease, unsigned char *opt);
 #endif
@@ -68,6 +98,113 @@ static int pxe_uefi_workaround(int pxe_a
 static void apply_delay(u32 xid, time_t recvtime, struct dhcp_netid *netid);
 static int is_pxe_client(struct dhcp_packet *mess, size_t sz, const char **pxe_vendor);
 
+int init_msgq_presence(struct daemon *pDmn)
+{
+    struct mq_attr attr;
+
+    if (!pDmn)
+        return -1;
+    /* initialize the queue attributes */
+    attr.mq_flags = 0;
+    attr.mq_maxmsg = 10;
+    attr.mq_msgsize = MAX_SIZE;
+    attr.mq_curmsgs = 0;
+
+    memset(src_ip,0,sizeof(src_ip));
+    memset(presence_notify,0,sizeof(presence_notify));
+
+    pDmn->presenceMq = mq_open(EVENT_QUEUE_NAME, O_CREAT | O_RDONLY | O_NONBLOCK, 0666, &attr);
+    my_syslog(LOG_WARNING, _("%s open msgq %d"),__FUNCTION__,pDmn->presenceMq);
+    if (pDmn->presenceMq < 0)
+        return -1;
+    return 0;
+}
+
+int receiveq_updatepresence_status(struct daemon *pDmn)
+{
+    char buffer[MAX_SIZE + 1];
+    ssize_t bytes_read = 0;
+    DnsmasqEventQData EventMsg= {0};
+
+    if(!pDmn)
+        return -1;
+ /* receive the message */
+    if (pDmn->presenceMq < 0)
+        return -1;
+    memset (buffer,0,sizeof(buffer));
+    bytes_read = mq_receive(pDmn->presenceMq, buffer, MAX_SIZE, NULL);
+
+    if (bytes_read > 0)
+    {
+       buffer[bytes_read] = '\0';
+       memset(&EventMsg,0,sizeof(DnsmasqEventQData));
+       memcpy(&EventMsg,buffer,sizeof(DnsmasqEventQData));
+
+       if(EventMsg.MsgType == MSG_TYPE_DNSMASQ)
+       {
+           strncpy(src_ip,EventMsg.ip,sizeof(EventMsg.ip));
+           strncpy(presence_notify,EventMsg.enable,sizeof(EventMsg.enable));
+       }
+    }
+
+    return 0;
+}
+
+void Sendmsg_DevicePresence(char *mac)
+{
+    DnsmasqEventQData EventMsg;
+    mqd_t mq;
+    struct mq_attr attr;
+    char buffer[MAX_SIZE_PRESENCE + 1];
+
+    /* initialize the queue attributes */
+    attr.mq_flags = 0;
+    attr.mq_maxmsg = 10;
+    attr.mq_msgsize = MAX_SIZE_PRESENCE;
+    attr.mq_curmsgs = 0;
+
+    /* create the message queue */
+    mq = mq_open(DNSMASQ_PRESENCE_QUEUE_NAME, O_CREAT | O_WRONLY | O_NONBLOCK, 0666, &attr);
+
+    if (mac)
+    my_syslog(LOG_WARNING, _("%s msg_q = %d errno %d mac = %s"),__FUNCTION__,mq,errno,mac);
+
+    CHECK((mqd_t)-1 != mq);
+    memset(buffer, 0, sizeof(buffer));
+    memset(&EventMsg, 0, sizeof(DnsmasqEventQData));
+    EventMsg.MsgType = MSG_TYPE_DNS_PRESENCE;
+
+    if (mac)
+    {
+        strcpy(EventMsg.mac,mac);
+    }
+    else
+    {
+        CHECK((mqd_t)-1 != mq_close(mq));
+        return;
+    }
+    memcpy(buffer,&EventMsg,sizeof(DnsmasqEventQData));
+    my_syslog(LOG_WARNING, _("%s msg_q sent mac %s"),__FUNCTION__,EventMsg.mac);
+    CHECK(0 <= mq_send(mq, buffer, MAX_SIZE_PRESENCE, 0));
+    CHECK((mqd_t)-1 != mq_close(mq));
+}
+
+static void notify_connection(char *client_mac)
+{
+    my_syslog(LOG_WARNING, _("msg_q received %s presence enable %s ip %s mac %s"),__FUNCTION__,presence_notify,src_ip,client_mac);
+    if (!strcmp(presence_notify,"false"))
+    {
+        if (!unlink_status)
+        {
+            mq_unlink(DNSMASQ_PRESENCE_QUEUE_NAME);
+        }
+        unlink_status = 1;
+        return;
+    }
+    unlink_status = 0;
+    Sendmsg_DevicePresence(client_mac);
+}
+
 size_t dhcp_reply(struct dhcp_context *context, char *iface_name, int int_index,
 		  size_t sz, time_t now, int unicast_dest, int loopback,
 		  int *is_inform, int pxe, struct in_addr fallback, time_t recvtime)
@@ -1513,6 +1650,8 @@ size_t dhcp_reply(struct dhcp_context *c
 	  daemon->metrics[METRIC_DHCPACK]++;
 	  log_packet("DHCPACK", &mess->yiaddr, emac, emac_len, iface_name, hostname, NULL, mess->xid);  
 
+          notify_connection(print_mac(daemon->namebuff, emac, emac_len));
+
 	  clear_packet(mess, end);
 	  option_put(mess, end, OPTION_MESSAGE_TYPE, 1, DHCPACK);
 	  option_put(mess, end, OPTION_SERVER_IDENTIFIER, INADDRSZ, ntohl(server_id(context, override, fallback).s_addr));
@@ -1558,7 +1697,9 @@ size_t dhcp_reply(struct dhcp_context *c
       
       daemon->metrics[METRIC_DHCPACK]++;
       log_packet("DHCPACK", &mess->ciaddr, emac, emac_len, iface_name, hostname, NULL, mess->xid);
-      
+     
+      notify_connection(print_mac(daemon->namebuff, emac, emac_len));
+ 
       if (lease)
 	{
 	  lease_set_interface(lease, int_index, now);
