Date: Mar 21, 2019 4:24 AM

From: aa163eb92ce32d1c846938bff7455d9abc57ff19 Apr 5, 2019 1:09 AM

Subject: [PATCH] RDKB-21548 :Develop code to support Secondary XDNS server

	Modified dnsmasq code such that DNS packets are forwarded to both primary and secondary XDNS servers.

Source: COMCAST

License: GPL-2.0-or-later

Upstream-Status: Pending

Signed-off-by: Sudheep kolipaka <sudheep_kolipaka@comcast.com>
---

diff -ruN dnsmasq-2.78.orig/src/arp.c dnsmasq-2.78/src/arp.c
--- dnsmasq-2.78.orig/src/arp.c	2019-04-29 04:31:57.573059517 +0000
+++ dnsmasq-2.78/src/arp.c	2019-04-29 00:26:30.536103577 +0000
@@ -295,9 +295,8 @@
        return p;
 }
 
-
 /* find dns server address for given mac in dnsrecs */
-int find_dnsoverride_server(char* macaddr, struct all_addr* serv, int iptype)
+int find_dnsoverride_server(char* macaddr, struct all_addr* serv, int iptype,int count)
 {
        if(!macaddr || !serv)
        {
@@ -311,7 +310,7 @@
        struct dnsoverride_record *p = dnsrecs;
        while(p)
        {
-               if(strcmp(p->macaddr, macaddr) == 0)
+               if(strcmp(p->macaddr, macaddr) == 0 && count==0)
                {
                        //found
                        if(iptype == 4)
@@ -331,11 +330,12 @@
                                my_syslog(LOG_WARNING, _("#### XDNS : find_dnsoverride_server() Error Param! invalid iptype: %d !"), iptype);
                                return 0; // fail
                        }
-
-                       return 1; //success
-
+                       		return 1; //success
                }
-               p = p->next;
+	       if(strcmp(p->macaddr, macaddr) == 0 && count==1){      //for secondary XDNS
+			count--;
+		}
+		p = p->next;
        }
        //unlock
 
@@ -344,16 +344,31 @@
        return 0; // not found
 }
 
-/* find default server address. Default is indicated by mac addr "00:00:00:00:00:00" TODO: Needs protection */
-int find_dnsoverride_defaultserver(struct all_addr* serv, int iptype)
+/* find default(primary and secondary) server address. Default is indicated by mac addr "00:00:00:00:00:00" TODO: Needs protection */
+int find_dnsoverride_defaultserver(struct all_addr* serv1,struct all_addr* serv2, int iptype,int* primary)
 {
-       if(!serv)
+       int retval;	
+       if(!serv1)
        {
-               my_syslog(LOG_WARNING, _("#### XDNS : find_dnsoverride_defaultserver(%x) Error Param!!"), serv);
+               my_syslog(LOG_WARNING, _("#### XDNS : find_dnsoverride_defaultserver(%x) Error Param!!"), serv1);
                return 0;
        }
 
-       return find_dnsoverride_server(XDNS_NULL_MAC, serv, iptype);
+       if(retval=find_dnsoverride_server(XDNS_NULL_MAC, serv1, iptype,0))                // For Primary Default server
+	{
+			*primary=1;
+		if(serv2)
+		{
+       			if(find_dnsoverride_server(XDNS_NULL_MAC, serv2, iptype,1))              // For secondary Default server
+				*primary=2;
+		}
+		else
+		{
+			my_syslog(LOG_WARNING, _("#### XDNS : find_dnsoverride_defaultserver(%x)secondary XDNS Error Param!!"), serv2);
+		}
+	}
+	
+	return retval;
 }
 
 /* </XDNS> */
diff -ruN dnsmasq-2.78.orig/src/dnsmasq.h dnsmasq-2.78/src/dnsmasq.h
--- dnsmasq-2.78.orig/src/dnsmasq.h	2019-04-29 04:31:57.573059517 +0000
+++ dnsmasq-2.78/src/dnsmasq.h	2019-04-29 04:30:50.953060015 +0000
@@ -992,6 +992,7 @@
   struct bogus_addr *bogus_addr, *ignore_addr;
   struct server *servers;
   struct server *dns_override_server; /* for XDNS */
+  struct server *dns_override_server2; /* for Secondary XDNS */
   struct ipsets *ipsets;
   int log_fac; /* log facility */
   char *log_file; /* optional log file */
@@ -1590,6 +1591,6 @@
 int update_dnsoverride_records(struct dnsoverride_record *precord);
 struct dnsoverride_record* get_dnsoverride_record(char* macaddr);
 struct dnsoverride_record* get_dnsoverride_defaultrecord();
-int find_dnsoverride_server(char* macaddr, struct all_addr* serv, int iptype);
-int find_dnsoverride_defaultserver(struct all_addr* serv, int iptype);
+int find_dnsoverride_server(char* macaddr, struct all_addr* serv, int iptype,int count);
+int find_dnsoverride_defaultserver(struct all_addr* serv1,struct all_addr* serv2, int iptype,int* primary);
 int do_arp_script_run(void);
diff -ruN dnsmasq-2.78.orig/src/edns0.c dnsmasq-2.78/src/edns0.c
--- dnsmasq-2.78.orig/src/edns0.c	2019-04-29 04:31:57.585059517 +0000
+++ dnsmasq-2.78/src/edns0.c	2019-04-29 00:26:30.536103577 +0000
@@ -15,6 +15,7 @@
 */
 
 #include "dnsmasq.h"
+#define XDNS_NULL_MAC "00:00:00:00:00:00"
 
 unsigned char *find_pseudoheader(struct dns_header *header, size_t plen, size_t  *len, unsigned char **p, int *is_sign, int *is_last)
 {
@@ -385,21 +386,23 @@
 
                // get appropriate ipv4 or ipv6 dnsoverride address using mac addr
                struct all_addr dnsaddr;
+	       struct all_addr secondarydnsaddr;
+		int primary=0;
                memset(&dnsaddr, 0, sizeof(struct all_addr));
+	       memset(&secondarydnsaddr, 0, sizeof(struct all_addr));
 
-               struct server *serv = NULL;
 
                // if xdns addr for same iptype, if not found try for other iptype
                // then try the default.
-               if(!find_dnsoverride_server(strmac, &dnsaddr, iptype))
+               if(!find_dnsoverride_server(strmac, &dnsaddr, iptype,0))
                {
-                      if(find_dnsoverride_server(strmac, &dnsaddr, (iptype==4)?6:4))//try other type
+                      if(find_dnsoverride_server(strmac, &dnsaddr, (iptype==4)?6:4,0))//try other type
                       {
                              iptype = (iptype==4)?6:4;
                       }
-                      else if(!find_dnsoverride_defaultserver(&dnsaddr, iptype))
+                      else if(!find_dnsoverride_defaultserver(&dnsaddr,&secondarydnsaddr,iptype,&primary))
                       {
-                            if(find_dnsoverride_defaultserver(&dnsaddr, (iptype==4)?6:4))//try other type
+                            if(find_dnsoverride_defaultserver(&dnsaddr,&secondarydnsaddr, (iptype==4)?6:4,&primary))//try other type
                             {
                                    iptype = (iptype==4)?6:4;
                             }
@@ -411,8 +414,59 @@
                             }
                       }
                }
-               //else found xdns server to use.
+		//else found xdns server to use.
 
+		if(primary==2)      // For secondary XDNS server
+		{
+		
+			struct server *secondserv = NULL;
+			char string[64]={0};
+               		secondserv = daemon->dns_override_server2;
+               		if(!secondserv) // if first time, daemon->dns_override_server2 is NULL. Allocate
+               		{
+                      		secondserv = whine_malloc(sizeof (struct server)); //allocated once & reused. Not freed.
+                      		if(secondserv)
+                      		{
+                            		memset(secondserv, 0, sizeof(struct server));
+                     		}
+                      		daemon->dns_override_server2 = secondserv;
+              		}
+
+               		if(secondserv)
+               		{
+                       		if(iptype == 4)
+                       		{
+                               		my_syslog(LOG_WARNING, _("### XDNS - set secondary ipv4 dns_override_server entry in daemon"));
+                              		//serv->addr.in.sin_addr = secondarydnsaddr.addr.addr4;
+                               		memcpy(&secondserv->addr.in.sin_addr, &secondarydnsaddr.addr.addr4, sizeof(struct in_addr));
+                               		secondserv->addr.sa.sa_family = AF_INET;
+					inet_ntop(AF_INET, &(secondarydnsaddr.addr.addr4), string, 64);
+					my_syslog(LOG_WARNING, _("### XDNS - set secondary ipv4 dns_override_server string:%s!"),string);
+                     		}
+#ifdef HAVE_IPV6
+                       		else if(iptype == 6)
+                       		{
+                               		my_syslog(LOG_WARNING, _("### XDNS - set secondary ipv6 dns_override_server entry in daemon"));
+                               		//serv->addr.in6.sin6_addr = secondarydnsaddr.addr.addr6;
+                               		memcpy(&secondserv->addr.in6.sin6_addr, &secondarydnsaddr.addr.addr6, sizeof(struct in6_addr));
+                               		secondserv->addr.sa.sa_family = AF_INET6;
+                                        inet_ntop(AF_INET6, &(secondarydnsaddr.addr.addr6), string, 64);
+                                        my_syslog(LOG_WARNING, _("### XDNS - set secondary ipv6 dns_override_server string:%s!"),string);
+                       		}
+#endif
+               	 		}
+   		 	}
+			else
+			{
+				daemon->dns_override_server2=NULL;
+				my_syslog(LOG_WARNING, _("### XDNS - secondary XDNS server does not exist!"));
+			
+			}
+
+		
+
+	
+	       struct server *serv = NULL;
                serv = daemon->dns_override_server;
                if(!serv) // if first time, daemon->dns_override_server is NULL. Allocate
                {
@@ -455,6 +509,8 @@
        return plen;
 }
 
+
+
 static size_t add_mac(struct dns_header *header, size_t plen, unsigned char *limit, union mysockaddr *l3, time_t now)
 {
        my_syslog(LOG_WARNING, _("#### XDNS : add_mac() called"));
diff -ruN dnsmasq-2.78.orig/src/forward.c dnsmasq-2.78/src/forward.c
--- dnsmasq-2.78.orig/src/forward.c	2019-04-29 04:31:57.577059517 +0000
+++ dnsmasq-2.78/src/forward.c	2019-04-29 04:59:48.885059003 +0000
@@ -239,6 +239,7 @@
   struct all_addr *addrp = NULL;
   unsigned int flags = 0;
   struct server *start = NULL;
+  struct server *secondstart = NULL;
 #ifdef HAVE_DNSSEC
   void *hash = hash_questions(header, plen, daemon->namebuff);
   int do_dnssec = 0;
@@ -436,7 +437,8 @@
       /* If we're sending an EDNS0 with any options, we can't recreate the query from a reply. */
       if (find_pseudoheader(header, plen, &edns0_len, NULL, NULL, NULL) && edns0_len > 11)
 	forward->flags |= FREC_HAS_EXTRADATA;
-      
+
+      int primaryxdns=0;      
       while (1)
 	{ 
 	  /* only send to servers dealing with our domain.
@@ -567,31 +569,41 @@
                          }
                  }
 
+                struct server *xdnsserver;
+                if(!primaryxdns)
+                {
+                        xdnsserver=daemon->dns_override_server;
+                }
+                else
+                {
+                        xdnsserver=daemon->dns_override_server2;
+                }
+
 
-			if(option_bool(OPT_DNS_OVERRIDE) && daemon->dns_override_server)
+			if(option_bool(OPT_DNS_OVERRIDE) && xdnsserver)
 			{
 			  char strprn[64] = {0};
-			  if(daemon->dns_override_server->addr.sa.sa_family == AF_INET)
+			  if(xdnsserver->addr.sa.sa_family == AF_INET)
 			  {
 				  memset(strprn, 0, 64);
-				  if(inet_ntop(AF_INET, &(daemon->dns_override_server->addr.in.sin_addr), strprn, 64))
+				  if(inet_ntop(AF_INET, &(xdnsserver->addr.in.sin_addr), strprn, 64))
 				  {
 					  if(strprn[0] != 0 && strcmp(strprn, "0.0.0.0") != 0)
 					  {
-						  memcpy(&start->addr.in.sin_addr, &daemon->dns_override_server->addr.in.sin_addr, sizeof(struct in_addr));
+						  memcpy(&start->addr.in.sin_addr, &xdnsserver->addr.in.sin_addr, sizeof(struct in_addr));
 						  start->addr.in.sin_family = AF_INET;
 			   			  //my_syslog(LOG_WARNING, _("#### XDNS - Overriding upstream address with IPv4 xDNS addr"));
 					  }
 				  }
 			  }
-			  else if(daemon->dns_override_server->addr.sa.sa_family == AF_INET6)
+			  else if(xdnsserver->addr.sa.sa_family == AF_INET6)
 			  {
 				  memset(strprn, 0, 64);
-				  if(inet_ntop(AF_INET6, &(daemon->dns_override_server->addr.in6.sin6_addr), strprn, 64))
+				  if(inet_ntop(AF_INET6, &(xdnsserver->addr.in6.sin6_addr), strprn, 64))
 				  {
 					  if(strprn[0] != 0 && strcmp(strprn, "::") != 0)
 					  {
-				  		  memcpy(&start->addr.in6.sin6_addr, &daemon->dns_override_server->addr.in6.sin6_addr, sizeof(struct in6_addr));
+				  		  memcpy(&start->addr.in6.sin6_addr, &xdnsserver->addr.in6.sin6_addr, sizeof(struct in6_addr));
 				  		  start->addr.in6.sin6_family = AF_INET6;
 			   			  //my_syslog(LOG_WARNING, _("#### XDNS - Overriding upstream address with IPv6 xDNS addr"));
 					  }
@@ -610,9 +622,13 @@
                  // Print where udp send is sending to:
                  char strprn[64] = {0}; memset(strprn, 0, 64);
                  if(start->addr.sa.sa_family == AF_INET)
+		{
                          inet_ntop(AF_INET, &(start->addr.in.sin_addr), strprn, 64);
+		}
                  else if(start->addr.sa.sa_family == AF_INET6)
+		{
                          inet_ntop(AF_INET6, &(start->addr.in6.sin6_addr), strprn, 64);
+		}
 
 			  my_syslog(LOG_INFO, _("#### XDNS - sendto (%u, 0x%x, len = %d) to %s : %s)"),
 				  fd,
@@ -632,36 +648,44 @@
                  my_syslog(LOG_WARNING, _("#### XDNS : retry_send() retry..."));
                  continue;
              }
-    
 
-		if (errno == 0) //succeeded
-		{
-		  /* Keep info in case we want to re-send this packet */
-		  daemon->srv_save = start;
-		  daemon->packet_len = plen;
-		  
-		  if (!gotname)
-		    strcpy(daemon->namebuff, "query");
-		  if (start->addr.sa.sa_family == AF_INET)
-		    log_query(F_SERVER | F_IPV4 | F_FORWARD, daemon->namebuff, 
-			      (struct all_addr *)&start->addr.in.sin_addr, NULL); 
+
+                if (errno == 0) //succeeded
+                {
+                  /* Keep info in case we want to re-send this packet */
+                  daemon->srv_save = start;
+                  daemon->packet_len = plen;
+
+                  if (!gotname)
+                    strcpy(daemon->namebuff, "query");
+                  if (start->addr.sa.sa_family == AF_INET)
+                    log_query(F_SERVER | F_IPV4 | F_FORWARD, daemon->namebuff,
+                              (struct all_addr *)&start->addr.in.sin_addr, NULL);
 #ifdef HAVE_IPV6
-		  else
-		    log_query(F_SERVER | F_IPV6 | F_FORWARD, daemon->namebuff, 
-			      (struct all_addr *)&start->addr.in6.sin6_addr, NULL);
-#endif 
-		  start->queries++;
-		  forwarded = 1;
-		  forward->sentto = start;
-		  if (!forward->forwardall) 
-		    break;
-		  forward->forwardall++;
-		}
-		else
-		{
-		         my_syslog(LOG_WARNING, _("#### XDNS : sendto() failed!"));
-		}
-	}
+                  else
+                    log_query(F_SERVER | F_IPV6 | F_FORWARD, daemon->namebuff,
+                              (struct all_addr *)&start->addr.in6.sin6_addr, NULL);
+#endif
+                  start->queries++;
+                  forwarded = 1;
+                  forward->sentto = start;
+                  if(!primaryxdns)
+                  {
+                        primaryxdns= 1;
+                  }
+                  else
+                  {
+                        primaryxdns=0;
+                  }
+                  if (!forward->forwardall)
+                    break;
+                  forward->forwardall++;
+                }
+                else
+                {
+                         my_syslog(LOG_WARNING, _("#### XDNS : sendto() failed!"));
+                }
+        }
  
 	  if (!(start = start->next))
  	    start = daemon->servers;
@@ -2355,6 +2379,7 @@
       while(retry_send(sendto(fd, daemon->packet, daemon->packet_len, 0,
 			      &daemon->srv_save->addr.sa, 
 			      sa_len(&daemon->srv_save->addr)))); 
+
     }
 }
 
diff -ruN dnsmasq-2.78.orig/src/network.c dnsmasq-2.78/src/network.c
--- dnsmasq-2.78.orig/src/network.c	2019-04-29 04:31:57.573059517 +0000
+++ dnsmasq-2.78/src/network.c	2019-04-29 00:26:30.540103578 +0000
@@ -1598,6 +1598,32 @@
   cleanup_servers();
 }
 
+/*XDNS- prints the linked list containg Primary and secondary DNS servers*/
+void print_dnsoverride_servers(struct dnsoverride_record *pprec)
+{
+
+        struct dnsoverride_record* p= pprec;
+	int i=0;
+        while(p != NULL)
+        {
+		char ipv4add[64] = {0};
+		char ipv6add[64] = {0};
+		inet_ntop(AF_INET, &(p->dnsaddr4.addr.addr4), ipv4add, 64);
+		inet_ntop(AF_INET6, &(p->dnsaddr6.addr.addr6), ipv6add, 64);
+       		my_syslog(LOG_ERR, _("### XDNS # macaddr[%d] : \"%s\""), i, p->macaddr);
+       		my_syslog(LOG_ERR, _("### XDNS # srvaddr4[%d] : \"%s\""), i, ipv4add);
+#ifdef HAVE_IPV6
+       		my_syslog(LOG_ERR, _("### XDNS # srvaddr6[%d] : \"%s\""), i, ipv6add);
+#endif
+
+     		my_syslog(LOG_ERR, _("### XDNS # cpetag[%d] : \"%s\""), i, p->cpetag);
+                p=p->next;
+		i++;
+
+        }
+
+}
+
 /* XDNS - Helper to create override server entries in record. Builds pprec list and returns the head. */
 static int create_dnsoverride_servers(struct dnsoverride_record **pprec, char* macaddr, char *srvaddr4, char *srvaddr6, char *cpetag)
 {
@@ -1626,6 +1652,7 @@
 
        //create entry and attach to record. This entries are maintained in arp.c. Cleanup is done there.
        struct dnsoverride_record* entry = NULL;
+       struct dnsoverride_record* temp = NULL;
        if ((entry = whine_malloc(sizeof(struct dnsoverride_record))))
        {
                memset(entry, 0, sizeof(struct dnsoverride_record));
@@ -1655,10 +1682,17 @@
                {
                        strcpy(entry->cpetag, cpetag);
                }
+  
+               entry->next = NULL;
+               if(*pprec == NULL)
+		{
+			*pprec = entry;
+		}
+		else
+		{
+		       (*pprec)->next = (struct dnsoverride_record*)entry;	
+		}
 
-
-               entry->next = *pprec;
-               *pprec = entry;
        }
        return 1; //success
 }
@@ -1795,6 +1829,7 @@
        }
 
        /* XDNS - Call to update the records in arp dnsoverride records*/
+       print_dnsoverride_servers(prec);
        update_dnsoverride_records(prec);
 
        fclose(f);
