diff -aruN libsoup-2.68.4.orig/libsoup/soup-cookie-jar.c libsoup-2.68.4/libsoup/soup-cookie-jar.c
--- libsoup-2.68.4.orig/libsoup/soup-cookie-jar.c	2021-12-01 09:17:21.735386680 +0000
+++ libsoup-2.68.4/libsoup/soup-cookie-jar.c	2021-12-01 09:18:08.434316195 +0000
@@ -50,6 +50,8 @@
 	GHashTable *domains, *serials;
 	guint serial;
 	SoupCookieJarAcceptPolicy accept_policy;
+	guint64 n_cookies;
+	guint64 limit;
 } SoupCookieJarPrivate;
 
 static void soup_cookie_jar_session_feature_init (SoupSessionFeatureInterface *feature_interface, gpointer interface_data);
@@ -59,6 +61,8 @@
 			 G_IMPLEMENT_INTERFACE (SOUP_TYPE_SESSION_FEATURE,
 						soup_cookie_jar_session_feature_init))
 
+#define MAX_COOKIE_SIZE 102400 /* 100K */
+
 static void
 soup_cookie_jar_init (SoupCookieJar *jar)
 {
@@ -71,6 +75,18 @@
 	priv->accept_policy = SOUP_COOKIE_JAR_ACCEPT_ALWAYS;
 }
 
+void
+soup_cookie_jar_set_limit (SoupCookieJar *jar,
+               guint64        limit)
+{
+       SoupCookieJarPrivate *priv;
+
+       g_return_if_fail (SOUP_IS_COOKIE_JAR (jar));
+
+       priv = soup_cookie_jar_get_instance_private (jar);
+       priv->limit = limit;
+}
+
 static void
 soup_cookie_jar_constructed (GObject *object)
 {
@@ -260,10 +276,13 @@
 {
 	SoupCookieJarPrivate *priv = soup_cookie_jar_get_instance_private (jar);
 
-	if (old && old != new)
+	if (old && old != new){
 		g_hash_table_remove (priv->serials, old);
+		priv->n_cookies--;
+	}
 	if (new) {
 		priv->serial++;
+		priv->n_cookies++;
 		g_hash_table_insert (priv->serials, new, GUINT_TO_POINTER (priv->serial));
 	}
 
@@ -273,6 +292,15 @@
 	g_signal_emit (jar, signals[CHANGED], 0, old, new);
 }
 
+static unsigned cookie_size (SoupCookie *cookie)
+{
+       /* Consider name, value, domain and path only for the size */
+       return (cookie->name ? strlen(cookie->name) : 0) +
+               (cookie->value ? strlen(cookie->value) : 0) +
+               (cookie->domain ? strlen(cookie->domain) : 0) +
+               (cookie->path ? strlen(cookie->path) : 0);
+}
+
 static int
 compare_cookies (gconstpointer a, gconstpointer b, gpointer jar)
 {
@@ -505,6 +533,11 @@
 		return;
 	}
 
+        if (cookie_size (cookie) > MAX_COOKIE_SIZE) {
+                g_warning ("Trying to add a cookie for domain '%s', bigger than maximum allowed size %d, ignoring it", cookie->domain, MAX_COOKIE_SIZE);
+                return;
+        }
+
 	priv = soup_cookie_jar_get_instance_private (jar);
 
 	if (first_party != NULL) {
@@ -562,6 +595,12 @@
 		return;
 	}
 
+        if (priv->limit > 0 && priv->n_cookies + 1 >= priv->limit) {
+                g_warning ("Reached limit of %" G_GUINT64_FORMAT " cookies, not adding the new one for domain '%s'", priv->limit, cookie->domain);
+                soup_cookie_free (cookie);
+                return;
+        }
+
 	if (last)
 		last->next = g_slist_append (NULL, cookie);
 	else {
diff -aruN libsoup-2.68.4.orig/libsoup/soup-cookie-jar.h libsoup-2.68.4/libsoup/soup-cookie-jar.h
--- libsoup-2.68.4.orig/libsoup/soup-cookie-jar.h	2021-12-01 09:17:21.735386680 +0000
+++ libsoup-2.68.4/libsoup/soup-cookie-jar.h	2021-12-01 09:18:08.434316195 +0000
@@ -51,6 +51,10 @@
 GType                     soup_cookie_jar_get_type                    (void);
 SOUP_AVAILABLE_IN_2_24
 SoupCookieJar *           soup_cookie_jar_new                         (void);
+
+SOUP_AVAILABLE_IN_2_24
+void                      soup_cookie_jar_set_limit                   (SoupCookieJar             *jar,
+                                                                       guint64                    limit);
 SOUP_AVAILABLE_IN_2_24
 char          *           soup_cookie_jar_get_cookies                 (SoupCookieJar             *jar,
 								       SoupURI                   *uri,
