Date: Tue, 7 Jan 2014 16:26:04 +0100
 
From: 141d2bcfeab5e0635c7f4e362387fd5b1b9494e6 Mon Sep 17 00:00:00 2001

Subject: [PATCH] Fix PR49718 : allow no_instrument_function attribute in class member definition/declaration
	
	allow no_instrument_function attribute in class member definition/declaration
	
Source: OPENSOURCE

License: GPL-2-or-later

Upstream-Status: Submitted [ https://patchwork.ozlabs.org/patch/308100/ ] 

Signed-off-by: Laurent Alfonsi <laurent.alfonsi@st.com>
---

 gcc/c-family/c-common.c        |  6 ------
 gcc/testsuite/g++.dg/pr49718.C | 41 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 41 insertions(+), 6 deletions(-)
 create mode 100644 gcc/testsuite/g++.dg/pr49718.C

diff --git a/gcc/c-family/c-common.c b/gcc/c-family/c-common.c
index 8ecb70c..17fcb0d 100644
--- a/gcc/c-family/c-common.c
+++ b/gcc/c-family/c-common.c
@@ -7929,12 +7929,6 @@ handle_no_instrument_function_attribute (tree *node, tree name,
 		"%qE attribute applies only to functions", name);
       *no_add_attrs = true;
     }
-  else if (DECL_INITIAL (decl))
-    {
-      error_at (DECL_SOURCE_LOCATION (decl),
-		"can%'t set %qE attribute after definition", name);
-      *no_add_attrs = true;
-    }
   else
     DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (decl) = 1;
 
diff --git a/gcc/testsuite/g++.dg/pr49718.C b/gcc/testsuite/g++.dg/pr49718.C
new file mode 100644
index 0000000..07cac8c
--- /dev/null
+++ b/gcc/testsuite/g++.dg/pr49718.C
@@ -0,0 +1,41 @@
+/* { dg-do compile } */
+/* { dg-options "-O2 -finstrument-functions" } */
+/* { dg-final { scan-assembler-times "__cyg_profile_func_enter" 1} } */
+
+#define NOINSTR __attribute__((no_instrument_function))
+
+struct t
+{
+   public:
+       /* Function code should be instrumented */
+       __attribute__((noinline)) t() {}
+       
+       /* Function t::a() should not be instrumented */
+       NOINSTR void a(){
+       }
+       /* Function t::b() should not be instrumented */
+       void NOINSTR b(){
+       }
+       /* Function t::c() should not be instrumented */
+       void c() NOINSTR {
+       }
+       /* Function t::d() should not be instrumented */
+       void d() NOINSTR;
+};
+
+void t::d()
+{
+}
+
+/* Function call_all_functions() should not be instrumented */
+struct t call_all_functions() __attribute__((no_instrument_function));
+struct t call_all_functions() 
+{
+       struct t a;     /* Constructor not inlined */
+       a.a();	       /* Inlined t::a() should not be instrumented */
+       a.b();	       /* Inlined t::b() should not be instrumented */
+       a.c();	       /* Inlined t::c() should not be instrumented */
+       a.d();	       /* Inlined t::d() should not be instrumented */
+       return a;
+}
+
-- 
1.8.4.1
