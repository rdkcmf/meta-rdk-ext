Date: Wed, 28 Jun 2017 13:44:52 -0700
From: e1b93fb47ae9c950977a2f80fb699c608505346a
From: Khem Raj
Subject: [PATCH] replace struct ucontext with ucontext_t type. 
Source: COMCAST
Upstream-Status: Backport
Signed-off-by: Matta Nancharayya <Nancharayya_Matta@comcast.com>
The ucontext_t type had a tag struct ucontext until now
but newer glibc will drop it so we need to adjust and use
the exposed type instead
Index: qemu-1.7.0/user-exec.c
===================================================================
--- qemu-1.7.0.orig/user-exec.c
+++ qemu-1.7.0/user-exec.c
@@ -53,7 +53,7 @@ static void exception_action(CPUArchStat
 void cpu_resume_from_signal(CPUArchState *env1, void *puc)
 {
 #ifdef __linux__
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
 #elif defined(__OpenBSD__)
     struct sigcontext *uc = puc;
 #endif
@@ -164,7 +164,7 @@ int cpu_signal_handler(int host_signum,
 #elif defined(__OpenBSD__)
     struct sigcontext *uc = puc;
 #else
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
 #endif
     unsigned long pc;
     int trapno;
@@ -219,7 +219,7 @@ int cpu_signal_handler(int host_signum,
 #elif defined(__OpenBSD__)
     struct sigcontext *uc = puc;
 #else
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
 #endif
 
     pc = PC_sig(uc);
@@ -281,7 +281,7 @@ int cpu_signal_handler(int host_signum,
 
 #ifdef __APPLE__
 #include <sys/ucontext.h>
-typedef struct ucontext SIGCONTEXT;
+typedef ucontext_t SIGCONTEXT;
 /* All Registers access - only for local access */
 #define REG_sig(reg_name, context)              \
     ((context)->uc_mcontext->ss.reg_name)
@@ -324,7 +324,7 @@ int cpu_signal_handler(int host_signum,
 #if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
     ucontext_t *uc = puc;
 #else
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
 #endif
     unsigned long pc;
     int is_write;
@@ -351,7 +351,7 @@ int cpu_signal_handler(int host_signum,
                            void *puc)
 {
     siginfo_t *info = pinfo;
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
     uint32_t *pc = uc->uc_mcontext.sc_pc;
     uint32_t insn = *pc;
     int is_write = 0;
@@ -438,7 +438,7 @@ int cpu_signal_handler(int host_signum,
                        void *puc)
 {
     siginfo_t *info = pinfo;
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
     unsigned long pc;
     int is_write;
 
@@ -463,7 +463,7 @@ int cpu_signal_handler(int host_signum,
                        void *puc)
 {
     siginfo_t *info = pinfo;
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
     uint64_t pc;
     int is_write = 0; /* XXX how to determine? */
 
@@ -478,7 +478,7 @@ int cpu_signal_handler(int host_signum,
                        void *puc)
 {
     siginfo_t *info = pinfo;
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
     unsigned long pc;
     int is_write;
 
@@ -500,7 +500,7 @@ int cpu_signal_handler(int host_signum,
 int cpu_signal_handler(int host_signum, void *pinfo, void *puc)
 {
     siginfo_t *info = pinfo;
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
     unsigned long ip;
     int is_write = 0;
 
@@ -531,7 +531,7 @@ int cpu_signal_handler(int host_signum,
                        void *puc)
 {
     siginfo_t *info = pinfo;
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
     unsigned long pc;
     uint16_t *pinsn;
     int is_write = 0;
@@ -584,7 +584,7 @@ int cpu_signal_handler(int host_signum,
                        void *puc)
 {
     siginfo_t *info = pinfo;
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
     greg_t pc = uc->uc_mcontext.pc;
     int is_write;
 
@@ -600,7 +600,7 @@ int cpu_signal_handler(int host_signum,
                        void *puc)
 {
     siginfo_t *info = pinfo;
-    struct ucontext *uc = puc;
+    ucontext_t *uc = puc;
     unsigned long pc = uc->uc_mcontext.sc_iaoq[0];
     uint32_t insn = *(uint32_t *)pc;
     int is_write = 0;
