(2019.08.12) Mariusz Koz≈Çowski <mkozlowski.contractor@libertyglobal.com>
[ONEM-12873] Unified env load for lxc-execute and lxc-attach

Currently LXC (2.0.6) behaves in following way:
lxc-execute - clear env and load lxc.environment
lxc-attach  - keep env and don't load lxc.environment

This makes some mechanisms that rely on env setup not work and thus hard
to use across OneMW.

With this change both lxc-execute and lxc-attach will load env in the
same way (by default). Env set by parent will be kept and then
lxc.environment loaded from lxc.conf.

If variable is present both in env and lxc.conf then the latter one will
overwrite the former. An exception to this is LD_PRELOAD which will be
concatenated.

Index: b/src/lxc/attach.c
===================================================================
--- a/src/lxc/attach.c
+++ b/src/lxc/attach.c
@@ -478,7 +478,7 @@ static int lxc_attach_drop_privs(struct
 	return 0;
 }
 
-static int lxc_attach_set_environment(enum lxc_attach_env_policy_t policy, char** extra_env, char** extra_keep)
+static int lxc_attach_set_environment(enum lxc_attach_env_policy_t policy, char** extra_env, char** extra_keep, char** conf_env)
 {
 	if (policy == LXC_ATTACH_CLEAR_ENV) {
 		char **extra_keep_store = NULL;
@@ -545,6 +545,15 @@ static int lxc_attach_set_environment(en
 		 * painful segfault death. */
 		if (!path_kept)
 			setenv("PATH", "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", 1);
+	} else if (policy == LXC_ATTACH_CONF_ENV) {
+		size_t count;
+
+		for (count = 0; conf_env[count]; count++) {
+			if (putenv(conf_env[count])) {
+				SYSERROR("failed to set environment variable: %s.", conf_env[count]);
+				return -1;
+			}
+		}
 	}
 
 	if (putenv("container=lxc")) {
@@ -842,7 +851,7 @@ static signed long get_personality(const
 	return ret;
 }
 
-int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_function, void* exec_payload, lxc_attach_options_t* options, pid_t* attached_process)
+int lxc_attach(const struct lxc_container* c, lxc_attach_exec_t exec_function, void* exec_payload, lxc_attach_options_t* options, pid_t* attached_process)
 {
 	int ret, status;
 	pid_t init_pid, pid, attached_pid, expected;
@@ -851,6 +860,8 @@ int lxc_attach(const char* name, const c
 	char* new_cwd;
 	int ipc_sockets[2];
 	signed long personality;
+	const char* name = c->name;
+	const char* lxcpath = c->config_path;
 
 	if (!options)
 		options = &attach_static_default_options;
@@ -895,6 +906,40 @@ int lxc_attach(const char* name, const c
 		}
 	}
 
+	{
+		struct lxc_list *iterator;
+		size_t count = 0;
+
+		/*
+		 * fill env table based on lxc.conf file before we attach
+		 */
+		lxc_list_for_each(iterator, &c->lxc_conf->environment) {
+			int ret;
+			char *elem = NULL;
+
+			ret = get_cc_ld_preload(&elem, (char *)iterator->elem);
+			if (ret == -ENOMEM) {
+				free(cwd);
+				lxc_proc_put_context_info(init_ctx);
+				return -1;
+			}
+
+			if (!elem)
+				elem = strdup(iterator->elem);
+
+			options->conf_env_vars = realloc(options->conf_env_vars, (count + 2) * sizeof(char *));
+			if (!elem || !options->conf_env_vars) {
+				ERROR("Failed to allocate env memory");
+				free(cwd);
+				lxc_proc_put_context_info(init_ctx);
+				return -1;
+			}
+
+			options->conf_env_vars[count++] = elem;
+			options->conf_env_vars[count] = NULL;
+		}
+	}
+
 	/* create a socket pair for IPC communication; set SOCK_CLOEXEC in order
 	 * to make sure we don't irritate other threads that want to fork+exec away
 	 *
@@ -1243,7 +1288,7 @@ static int attach_child_main(void* data)
 	}
 
 	/* always set the environment (specify (LXC_ATTACH_KEEP_ENV, NULL, NULL) if you want this to be a no-op) */
-	ret = lxc_attach_set_environment(options->env_policy, options->extra_env_vars, options->extra_keep_env);
+	ret = lxc_attach_set_environment(options->env_policy, options->extra_env_vars, options->extra_keep_env, options->conf_env_vars);
 	if (ret < 0) {
 		ERROR("could not set initial environment for attached process");
 		shutdown(ipc_socket, SHUT_RDWR);
Index: b/src/lxc/attach_options.h
===================================================================
--- a/src/lxc/attach_options.h
+++ b/src/lxc/attach_options.h
@@ -36,7 +36,8 @@ extern "C" {
  */
 typedef enum lxc_attach_env_policy_t {
 	LXC_ATTACH_KEEP_ENV,   //!< Retain the environment
-	LXC_ATTACH_CLEAR_ENV   //!< Clear the environment
+	LXC_ATTACH_CLEAR_ENV,  //!< Clear the environment
+	LXC_ATTACH_CONF_ENV    //!< Load the environment from conf file
 } lxc_attach_env_policy_t;
 
 enum {
@@ -120,6 +121,9 @@ typedef struct lxc_attach_options_t {
 	 */
 	char** extra_keep_env;
 
+	/*! Env vars read from container config */
+	char** conf_env_vars;
+
 	/**@{*/
 	/*! File descriptors for stdin, stdout and stderr,
 	 * \c dup2() will be used before calling exec_function,
@@ -148,6 +152,7 @@ typedef struct lxc_attach_options_t {
 		/* .env_policy = */     LXC_ATTACH_KEEP_ENV, \
 		/* .extra_env_vars = */ NULL, \
 		/* .extra_keep_env = */ NULL, \
+		/* .conf_env_vars = */  NULL, \
 		/* .stdin_fd = */       0, 1, 2 \
 	}
 
Index: b/src/lxc/tools/lxc_attach.c
===================================================================
--- a/src/lxc/tools/lxc_attach.c
+++ b/src/lxc/tools/lxc_attach.c
@@ -66,6 +66,7 @@ static const struct option my_longopts[]
 	{"clear-env", no_argument, 0, 500},
 	{"keep-env", no_argument, 0, 501},
 	{"keep-var", required_argument, 0, 502},
+	{"conf-env", no_argument, 0, 503},
 	{"set-var", required_argument, 0, 'v'},
 #endif	
 	{"pty-log", required_argument, 0, 'L'},
@@ -79,7 +80,7 @@ static int elevated_privileges = 0;
 static signed long new_personality = -1;
 static int namespace_flags = -1;
 static int remount_sys_proc = 0;
-static lxc_attach_env_policy_t env_policy = LXC_ATTACH_KEEP_ENV;
+static lxc_attach_env_policy_t env_policy = LXC_ATTACH_CONF_ENV;
 static uid_t uid = 0;
 static gid_t gid = 0;
 static char **extra_env = NULL;
@@ -189,6 +190,9 @@ static int my_parser(struct lxc_argument
 			return -1;
 		}
 		break;
+	case 503: /* conf-env */
+		env_policy = LXC_ATTACH_CONF_ENV;
+		break;
 	case 'v':
 		ret = add_to_simple_array(&extra_env, &extra_env_size, arg);
 		if (ret < 0) {
@@ -251,9 +255,11 @@ Options :\n\
       --clear-env   Clear all environment variables before attaching.\n\
                     The attached shell/program will start with only\n\
                     container=lxc set.\n\
-      --keep-env    Keep all current environment variables. This\n\
-                    is the current default behaviour, but is likely to\n\
-                    change in the future.\n"
+      --keep-env    Keep all current environment variables.\n\
+      --conf-env    Keep all current environment variables + load\n\
+                    environment variables from lxc.conf file speficied\n\
+                    with -f switch. This is the current default behaviour\n\
+                    \n"
 #endif                    
 "  -L, --pty-log=FILE\n\
                     Log pty output to FILE\n"
Index: b/src/lxc/attach.h
===================================================================
--- a/src/lxc/attach.h
+++ b/src/lxc/attach.h
@@ -36,6 +36,6 @@ struct lxc_proc_context_info {
 	unsigned long long capability_mask;
 };
 
-extern int lxc_attach(const char* name, const char* lxcpath, lxc_attach_exec_t exec_function, void* exec_payload, lxc_attach_options_t* options, pid_t* attached_process);
+extern int lxc_attach(const struct lxc_container* c, lxc_attach_exec_t exec_function, void* exec_payload, lxc_attach_options_t* options, pid_t* attached_process);
 
 #endif
Index: b/src/lxc/lxccontainer.c
===================================================================
--- a/src/lxc/lxccontainer.c
+++ b/src/lxc/lxccontainer.c
@@ -3281,7 +3281,7 @@ static int lxcapi_attach(struct lxc_cont
 
 	current_config = c->lxc_conf;
 
-	ret = lxc_attach(c->name, c->config_path, exec_function, exec_payload, options, attached_process);
+	ret = lxc_attach(c, exec_function, exec_payload, options, attached_process);
 	current_config = NULL;
 	return ret;
 }
@@ -3297,7 +3297,7 @@ static int do_lxcapi_attach_run_wait(str
 
 	command.program = (char*)program;
 	command.argv = (char**)argv;
-	r = lxc_attach(c->name, c->config_path, lxc_attach_run_command, &command, options, &pid);
+	r = lxc_attach(c, lxc_attach_run_command, &command, options, &pid);
 	if (r < 0) {
 		ERROR("ups");
 		return r;
Index: b/src/lxc/start.c
===================================================================
--- a/src/lxc/start.c
+++ b/src/lxc/start.c
@@ -882,14 +882,20 @@ static int do_start(void *data)
 	 * start hook above. Not all of the variables like CONFIG_PATH or ROOTFS
 	 * are valid in this context but others are.
 	 */
-	if (clearenv()) {
-		SYSERROR("Failed to clear environment.");
-		/* Don't error out though. */
-	}
 
 	lxc_list_for_each(iterator, &handler->conf->environment) {
-		if (putenv((char *)iterator->elem)) {
-			SYSERROR("Failed to set environment variable: %s.", (char *)iterator->elem);
+		int ret;
+		char *elem = NULL;
+
+		ret = get_cc_ld_preload(&elem, (char *)iterator->elem);
+		if (ret == -ENOMEM)
+			goto out_warn_father;
+
+		if (!elem)
+			elem = (char *)iterator->elem;
+
+		if (putenv(elem)) {
+			SYSERROR("Failed to set environment variable: %s.", elem);
 			goto out_warn_father;
 		}
 	}
Index: b/src/lxc/conf.c
===================================================================
--- a/src/lxc/conf.c
+++ b/src/lxc/conf.c
@@ -4575,3 +4575,33 @@ struct lxc_list *sort_cgroup_settings(st
 
 	return result;
 }
+
+/*
+ * If LD_PRELOAD is set by parent process and also in lxc.environment
+ * concatenate them and return in allocated buffer (buf). Otherwise buf
+ * is set to NULL.
+ */
+int get_cc_ld_preload(char **buf, const char *elem)
+{
+	char *ld_preload;
+	size_t len;
+
+	*buf = NULL;
+
+	ld_preload = getenv("LD_PRELOAD");
+	if (!ld_preload)
+		return 1;
+
+ 	if (strncmp("LD_PRELOAD=", elem, sizeof("LD_PRELOAD=")-1))
+		return 2;
+
+	len = strlen(ld_preload) + 1 + strlen(elem) + 1;
+	*buf = malloc(len);
+	if (!*buf) {
+		SYSERROR("Failed to allocate memory for LD_PRELOAD.");
+		return -ENOMEM;
+	}
+
+	snprintf(*buf, len, "LD_PRELOAD=%s:%s", ld_preload, elem + sizeof("LD_PRELOAD=")-1);
+	return 0;
+}
Index: b/src/lxc/conf.h
===================================================================
--- a/src/lxc/conf.h
+++ b/src/lxc/conf.h
@@ -447,4 +447,5 @@ void remount_all_slave(void);
 extern void suggest_default_idmap(void);
 FILE *write_mount_file(struct lxc_list *mount);
 struct lxc_list *sort_cgroup_settings(struct lxc_list* cgroup_settings);
+extern int get_cc_ld_preload(char **buf, const char *elem);
 #endif
