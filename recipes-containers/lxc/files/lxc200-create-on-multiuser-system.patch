lxc: linux Container library

Authors:
Daniel Lezcano <daniel.lezcano@free.fr>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

ou should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

Date: Mar 01 13:03:44 2018

From: 82081199840c43f1d1151825aa7e46542d76ff09 Mar 01 13:03:44 2018

Subject: [PATCH] RDK-21500:[Yocto 2.2.] ERROR:Failed to create LXC

	ported lxclock.c from lxc1.1.2 to lxc2.0.0 as issue is coming to create the lock path.

Source: COMCAST

Upstream-Status: Pending

Signed-off-by: gkumar <Ganesh_Kumar@comcast.com>
---

Index: lxc-2.0.0/src/lxc/lxclock.c
===================================================================
--- lxc-2.0.0.orig/src/lxc/lxclock.c
+++ lxc-2.0.0/src/lxc/lxclock.c
@@ -101,15 +101,16 @@ static char *lxclock_name(const char *p,
 	int len;
 	char *dest;
 	char *rundir;
+        char *homedir;
 
 	/* lockfile will be:
-	 * "/run" + "/lxc/lock/$lxcpath/$lxcname + '\0' if root
+	 * "/run" + "/lock/lxc/$lxcpath/$lxcname + '\0' if root
 	 * or
-	 * $XDG_RUNTIME_DIR + "/lxc/lock/$lxcpath/$lxcname + '\0' if non-root
+	 * $XDG_RUNTIME_DIR + "/lock/lxc/$lxcpath/$lxcname + '\0' if non-root
 	 */
 
-	/* length of "/lxc/lock/" + $lxcpath + "/" + "." + $lxcname + '\0' */
-	len = strlen("/lxc/lock/") + strlen(n) + strlen(p) + 3;
+	/* length of "/lock/lxc/" + $lxcpath + "/" + "." + $lxcname + '\0' */
+	len = strlen("/lock/lxc/") + strlen(n) + strlen(p) + 3;
 	rundir = get_rundir();
 	if (!rundir)
 		return NULL;
@@ -120,7 +121,7 @@ static char *lxclock_name(const char *p,
 		return NULL;
 	}
 
-	ret = snprintf(dest, len, "%s/lxc/lock/%s", rundir, p);
+       ret = snprintf(dest, len, "%s/lock/lxc/%s", rundir, p);
 	if (ret < 0 || ret >= len) {
 		free(dest);
 		free(rundir);
@@ -128,13 +129,41 @@ static char *lxclock_name(const char *p,
 	}
 	ret = mkdir_p(dest, 0755);
 	if (ret < 0) {
-		free(dest);
-		free(rundir);
-		return NULL;
-	}
+		/* fall back to "/tmp/" + $(id -u) + "/lxc" + $lxcpath + "/" + "." + $lxcname + '\0'
+		 * * maximum length of $(id -u) is 10 calculated by (log (2 ** (sizeof(uid_t) * 8) - 1) / log 10 + 1)
+		 * * lxcpath always starts with '/'
+		 */
+                homedir = getenv("USER");
+		int l2 = 22 + strlen(n) + strlen(p) + strlen(homedir);
+		if (l2 > len) {
+			char *d;
+			d = realloc(dest, l2);
+			if (!d) {
+				free(dest);
+				free(rundir);
+				return NULL;
+			}
+			len = l2;
+			dest = d;
+		}
+		ret = snprintf(dest, len, "/tmp/%s/lxc%s", homedir, p);
+		if (ret < 0 || ret >= len) {
+			free(dest);
+			free(rundir);
+			return NULL;
+		}
+		ret = mkdir_p(dest, 0755);
+		if (ret < 0) {
+			free(dest);
+			free(rundir);
+			return NULL;
+		}
+		ret = snprintf(dest, len, "/tmp/%s/lxc%s/.%s", homedir, p, n);
+	} else
+		ret = snprintf(dest, len, "%s/lock/lxc/%s/.%s", rundir, p, n);
 
-	ret = snprintf(dest, len, "%s/lxc/lock/%s/.%s", rundir, p, n);
 	free(rundir);
+
 	if (ret < 0 || ret >= len) {
 		free(dest);
 		return NULL;
